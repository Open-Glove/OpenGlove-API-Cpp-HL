/* soapBasicHttpBinding_USCOREIOGServiceProxy.cpp
   Generated by gSOAP 2.8.36 for OGService.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapBasicHttpBinding_USCOREIOGServiceProxy.h"

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIOGServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy(const BasicHttpBinding_USCOREIOGServiceProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	BasicHttpBinding_USCOREIOGServiceProxy_init(_soap->imode, _soap->omode);
}

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIOGServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIOGServiceProxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIOGServiceProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	BasicHttpBinding_USCOREIOGServiceProxy_init(imode, omode);
}

BasicHttpBinding_USCOREIOGServiceProxy::~BasicHttpBinding_USCOREIOGServiceProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void BasicHttpBinding_USCOREIOGServiceProxy::BasicHttpBinding_USCOREIOGServiceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
		{ "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", NULL, NULL },
		{ "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", NULL, NULL },
		{ "xsi", "http://www.w3.org/2001/XMLSchema-instance", NULL, NULL },
		{ "xsd", "http://www.w3.org/2001/XMLSchema", NULL, NULL },
        {"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
        {"ns4", "http://schemas.datacontract.org/2004/07/OpenGloveWCF", NULL, NULL},
        {"ns5", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL},
        {"ns1", "http://tempuri.org/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
BasicHttpBinding_USCOREIOGServiceProxy *BasicHttpBinding_USCOREIOGServiceProxy::copy()
{	BasicHttpBinding_USCOREIOGServiceProxy *dup = SOAP_NEW_COPY(BasicHttpBinding_USCOREIOGServiceProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

BasicHttpBinding_USCOREIOGServiceProxy& BasicHttpBinding_USCOREIOGServiceProxy::operator=(const BasicHttpBinding_USCOREIOGServiceProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void BasicHttpBinding_USCOREIOGServiceProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BasicHttpBinding_USCOREIOGServiceProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BasicHttpBinding_USCOREIOGServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREIOGServiceProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *BasicHttpBinding_USCOREIOGServiceProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *BasicHttpBinding_USCOREIOGServiceProxy::soap_fault()
{	return this->soap->fault;
}

const char *BasicHttpBinding_USCOREIOGServiceProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *BasicHttpBinding_USCOREIOGServiceProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void BasicHttpBinding_USCOREIOGServiceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREIOGServiceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BasicHttpBinding_USCOREIOGServiceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int BasicHttpBinding_USCOREIOGServiceProxy::GetGloves(const char *endpoint, const char *soap_action, _ns1__GetGloves *ns1__GetGloves, _ns1__GetGlovesResponse &ns1__GetGlovesResponse)
{	struct soap *soap = this->soap;
	struct __ns1__GetGloves soap_tmp___ns1__GetGloves;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/GetGloves";
	soap_tmp___ns1__GetGloves.ns1__GetGloves = ns1__GetGloves;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetGloves(soap, &soap_tmp___ns1__GetGloves);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetGloves(soap, &soap_tmp___ns1__GetGloves, "-ns1:GetGloves", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetGloves(soap, &soap_tmp___ns1__GetGloves, "-ns1:GetGloves", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetGlovesResponse*>(&ns1__GetGlovesResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetGlovesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetGlovesResponse.soap_get(soap, "ns1:GetGlovesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::RefreshGloves(const char *endpoint, const char *soap_action, _ns1__RefreshGloves *ns1__RefreshGloves, _ns1__RefreshGlovesResponse &ns1__RefreshGlovesResponse)
{	struct soap *soap = this->soap;
	struct __ns1__RefreshGloves soap_tmp___ns1__RefreshGloves;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/RefreshGloves";
	soap_tmp___ns1__RefreshGloves.ns1__RefreshGloves = ns1__RefreshGloves;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshGloves(soap, &soap_tmp___ns1__RefreshGloves);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshGloves(soap, &soap_tmp___ns1__RefreshGloves, "-ns1:RefreshGloves", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshGloves(soap, &soap_tmp___ns1__RefreshGloves, "-ns1:RefreshGloves", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__RefreshGlovesResponse*>(&ns1__RefreshGlovesResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__RefreshGlovesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshGlovesResponse.soap_get(soap, "ns1:RefreshGlovesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::SaveGlove(const char *endpoint, const char *soap_action, _ns1__SaveGlove *ns1__SaveGlove, _ns1__SaveGloveResponse &ns1__SaveGloveResponse)
{	struct soap *soap = this->soap;
	struct __ns1__SaveGlove soap_tmp___ns1__SaveGlove;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/SaveGlove";
	soap_tmp___ns1__SaveGlove.ns1__SaveGlove = ns1__SaveGlove;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__SaveGlove(soap, &soap_tmp___ns1__SaveGlove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SaveGlove(soap, &soap_tmp___ns1__SaveGlove, "-ns1:SaveGlove", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SaveGlove(soap, &soap_tmp___ns1__SaveGlove, "-ns1:SaveGlove", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__SaveGloveResponse*>(&ns1__SaveGloveResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SaveGloveResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SaveGloveResponse.soap_get(soap, "ns1:SaveGloveResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::Activate(const char *endpoint, const char *soap_action, _ns1__Activate *ns1__Activate, _ns1__ActivateResponse &ns1__ActivateResponse)
{	struct soap *soap = this->soap;
	struct __ns1__Activate soap_tmp___ns1__Activate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/Activate";
	soap_tmp___ns1__Activate.ns1__Activate = ns1__Activate;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Activate(soap, &soap_tmp___ns1__Activate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Activate(soap, &soap_tmp___ns1__Activate, "-ns1:Activate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Activate(soap, &soap_tmp___ns1__Activate, "-ns1:Activate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__ActivateResponse*>(&ns1__ActivateResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__ActivateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ActivateResponse.soap_get(soap, "ns1:ActivateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::Connect(const char *endpoint, const char *soap_action, _ns1__Connect *ns1__Connect, _ns1__ConnectResponse &ns1__ConnectResponse)
{	struct soap *soap = this->soap;
	struct __ns1__Connect soap_tmp___ns1__Connect;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/Connect";
	soap_tmp___ns1__Connect.ns1__Connect = ns1__Connect;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Connect(soap, &soap_tmp___ns1__Connect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Connect(soap, &soap_tmp___ns1__Connect, "-ns1:Connect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Connect(soap, &soap_tmp___ns1__Connect, "-ns1:Connect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__ConnectResponse*>(&ns1__ConnectResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__ConnectResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ConnectResponse.soap_get(soap, "ns1:ConnectResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::Disconnect(const char *endpoint, const char *soap_action, _ns1__Disconnect *ns1__Disconnect, _ns1__DisconnectResponse &ns1__DisconnectResponse)
{	struct soap *soap = this->soap;
	struct __ns1__Disconnect soap_tmp___ns1__Disconnect;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/Disconnect";
	soap_tmp___ns1__Disconnect.ns1__Disconnect = ns1__Disconnect;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Disconnect(soap, &soap_tmp___ns1__Disconnect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Disconnect(soap, &soap_tmp___ns1__Disconnect, "-ns1:Disconnect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Disconnect(soap, &soap_tmp___ns1__Disconnect, "-ns1:Disconnect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DisconnectResponse*>(&ns1__DisconnectResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DisconnectResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisconnectResponse.soap_get(soap, "ns1:DisconnectResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::ActivateMany(const char *endpoint, const char *soap_action, _ns1__ActivateMany *ns1__ActivateMany, _ns1__ActivateManyResponse &ns1__ActivateManyResponse)
{	struct soap *soap = this->soap;
	struct __ns1__ActivateMany soap_tmp___ns1__ActivateMany;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/ActivateMany";
	soap_tmp___ns1__ActivateMany.ns1__ActivateMany = ns1__ActivateMany;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__ActivateMany(soap, &soap_tmp___ns1__ActivateMany);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ActivateMany(soap, &soap_tmp___ns1__ActivateMany, "-ns1:ActivateMany", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ActivateMany(soap, &soap_tmp___ns1__ActivateMany, "-ns1:ActivateMany", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__ActivateManyResponse*>(&ns1__ActivateManyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__ActivateManyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ActivateManyResponse.soap_get(soap, "ns1:ActivateManyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::addFlexor(const char *endpoint, const char *soap_action, _ns1__addFlexor *ns1__addFlexor, _ns1__addFlexorResponse &ns1__addFlexorResponse)
{	struct soap *soap = this->soap;
	struct __ns1__addFlexor soap_tmp___ns1__addFlexor;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/addFlexor";
	soap_tmp___ns1__addFlexor.ns1__addFlexor = ns1__addFlexor;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__addFlexor(soap, &soap_tmp___ns1__addFlexor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addFlexor(soap, &soap_tmp___ns1__addFlexor, "-ns1:addFlexor", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addFlexor(soap, &soap_tmp___ns1__addFlexor, "-ns1:addFlexor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__addFlexorResponse*>(&ns1__addFlexorResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__addFlexorResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addFlexorResponse.soap_get(soap, "ns1:addFlexorResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::removeFlexor(const char *endpoint, const char *soap_action, _ns1__removeFlexor *ns1__removeFlexor, _ns1__removeFlexorResponse &ns1__removeFlexorResponse)
{	struct soap *soap = this->soap;
	struct __ns1__removeFlexor soap_tmp___ns1__removeFlexor;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/removeFlexor";
	soap_tmp___ns1__removeFlexor.ns1__removeFlexor = ns1__removeFlexor;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeFlexor(soap, &soap_tmp___ns1__removeFlexor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeFlexor(soap, &soap_tmp___ns1__removeFlexor, "-ns1:removeFlexor", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeFlexor(soap, &soap_tmp___ns1__removeFlexor, "-ns1:removeFlexor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__removeFlexorResponse*>(&ns1__removeFlexorResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__removeFlexorResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__removeFlexorResponse.soap_get(soap, "ns1:removeFlexorResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::calibrateFlexors(const char *endpoint, const char *soap_action, _ns1__calibrateFlexors *ns1__calibrateFlexors, _ns1__calibrateFlexorsResponse &ns1__calibrateFlexorsResponse)
{	struct soap *soap = this->soap;
	struct __ns1__calibrateFlexors soap_tmp___ns1__calibrateFlexors;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/calibrateFlexors";
	soap_tmp___ns1__calibrateFlexors.ns1__calibrateFlexors = ns1__calibrateFlexors;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__calibrateFlexors(soap, &soap_tmp___ns1__calibrateFlexors);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__calibrateFlexors(soap, &soap_tmp___ns1__calibrateFlexors, "-ns1:calibrateFlexors", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__calibrateFlexors(soap, &soap_tmp___ns1__calibrateFlexors, "-ns1:calibrateFlexors", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__calibrateFlexorsResponse*>(&ns1__calibrateFlexorsResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__calibrateFlexorsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__calibrateFlexorsResponse.soap_get(soap, "ns1:calibrateFlexorsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::confirmCalibration(const char *endpoint, const char *soap_action, _ns1__confirmCalibration *ns1__confirmCalibration, _ns1__confirmCalibrationResponse &ns1__confirmCalibrationResponse)
{	struct soap *soap = this->soap;
	struct __ns1__confirmCalibration soap_tmp___ns1__confirmCalibration;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/confirmCalibration";
	soap_tmp___ns1__confirmCalibration.ns1__confirmCalibration = ns1__confirmCalibration;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__confirmCalibration(soap, &soap_tmp___ns1__confirmCalibration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__confirmCalibration(soap, &soap_tmp___ns1__confirmCalibration, "-ns1:confirmCalibration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__confirmCalibration(soap, &soap_tmp___ns1__confirmCalibration, "-ns1:confirmCalibration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__confirmCalibrationResponse*>(&ns1__confirmCalibrationResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__confirmCalibrationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__confirmCalibrationResponse.soap_get(soap, "ns1:confirmCalibrationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::setThreshold(const char *endpoint, const char *soap_action, _ns1__setThreshold *ns1__setThreshold, _ns1__setThresholdResponse &ns1__setThresholdResponse)
{	struct soap *soap = this->soap;
	struct __ns1__setThreshold soap_tmp___ns1__setThreshold;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/setThreshold";
	soap_tmp___ns1__setThreshold.ns1__setThreshold = ns1__setThreshold;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setThreshold(soap, &soap_tmp___ns1__setThreshold);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setThreshold(soap, &soap_tmp___ns1__setThreshold, "-ns1:setThreshold", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setThreshold(soap, &soap_tmp___ns1__setThreshold, "-ns1:setThreshold", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__setThresholdResponse*>(&ns1__setThresholdResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__setThresholdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__setThresholdResponse.soap_get(soap, "ns1:setThresholdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::resetFlexors(const char *endpoint, const char *soap_action, _ns1__resetFlexors *ns1__resetFlexors, _ns1__resetFlexorsResponse &ns1__resetFlexorsResponse)
{	struct soap *soap = this->soap;
	struct __ns1__resetFlexors soap_tmp___ns1__resetFlexors;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/resetFlexors";
	soap_tmp___ns1__resetFlexors.ns1__resetFlexors = ns1__resetFlexors;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__resetFlexors(soap, &soap_tmp___ns1__resetFlexors);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__resetFlexors(soap, &soap_tmp___ns1__resetFlexors, "-ns1:resetFlexors", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__resetFlexors(soap, &soap_tmp___ns1__resetFlexors, "-ns1:resetFlexors", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__resetFlexorsResponse*>(&ns1__resetFlexorsResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__resetFlexorsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__resetFlexorsResponse.soap_get(soap, "ns1:resetFlexorsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::startIMU(const char *endpoint, const char *soap_action, _ns1__startIMU *ns1__startIMU, _ns1__startIMUResponse &ns1__startIMUResponse)
{	struct soap *soap = this->soap;
	struct __ns1__startIMU soap_tmp___ns1__startIMU;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/startIMU";
	soap_tmp___ns1__startIMU.ns1__startIMU = ns1__startIMU;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__startIMU(soap, &soap_tmp___ns1__startIMU);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__startIMU(soap, &soap_tmp___ns1__startIMU, "-ns1:startIMU", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__startIMU(soap, &soap_tmp___ns1__startIMU, "-ns1:startIMU", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__startIMUResponse*>(&ns1__startIMUResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__startIMUResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__startIMUResponse.soap_get(soap, "ns1:startIMUResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::setIMUStatus(const char *endpoint, const char *soap_action, _ns1__setIMUStatus *ns1__setIMUStatus, _ns1__setIMUStatusResponse &ns1__setIMUStatusResponse)
{	struct soap *soap = this->soap;
	struct __ns1__setIMUStatus soap_tmp___ns1__setIMUStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/setIMUStatus";
	soap_tmp___ns1__setIMUStatus.ns1__setIMUStatus = ns1__setIMUStatus;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setIMUStatus(soap, &soap_tmp___ns1__setIMUStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setIMUStatus(soap, &soap_tmp___ns1__setIMUStatus, "-ns1:setIMUStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setIMUStatus(soap, &soap_tmp___ns1__setIMUStatus, "-ns1:setIMUStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__setIMUStatusResponse*>(&ns1__setIMUStatusResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__setIMUStatusResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__setIMUStatusResponse.soap_get(soap, "ns1:setIMUStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIOGServiceProxy::setRawData(const char *endpoint, const char *soap_action, _ns1__setRawData *ns1__setRawData, _ns1__setRawDataResponse &ns1__setRawDataResponse)
{	struct soap *soap = this->soap;
	struct __ns1__setRawData soap_tmp___ns1__setRawData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IOGService/setRawData";
	soap_tmp___ns1__setRawData.ns1__setRawData = ns1__setRawData;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setRawData(soap, &soap_tmp___ns1__setRawData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setRawData(soap, &soap_tmp___ns1__setRawData, "-ns1:setRawData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setRawData(soap, &soap_tmp___ns1__setRawData, "-ns1:setRawData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__setRawDataResponse*>(&ns1__setRawDataResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__setRawDataResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__setRawDataResponse.soap_get(soap, "ns1:setRawDataResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
