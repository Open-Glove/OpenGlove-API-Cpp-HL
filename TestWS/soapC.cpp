/* soapC.cpp
   Generated by gSOAP 2.8.36 for OGService.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.36 2018-01-27 06:49:45 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_in_ns3__char(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_in_ULONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns4__Side:
		return soap_in_ns4__Side(soap, NULL, NULL, "ns4:Side");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns4__Side_:
		return soap_in_ns4__Side_(soap, NULL, NULL, "ns4:Side");
	case SOAP_TYPE_ns3__guid__:
		return soap_in_ns3__guid__(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__guid:
		return soap_in_ns3__guid(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return soap_in_ns3__duration__(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__duration:
		return soap_in_ns3__duration(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return soap_in_ns3__char__(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring:
		return soap_in_ns5__ArrayOfKeyValueOfstringstring(soap, NULL, NULL, "ns5:ArrayOfKeyValueOfstringstring");
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint:
		return soap_in_ns5__ArrayOfKeyValueOfintint(soap, NULL, NULL, "ns5:ArrayOfKeyValueOfintint");
	case SOAP_TYPE_ns5__ArrayOfstring:
		return soap_in_ns5__ArrayOfstring(soap, NULL, NULL, "ns5:ArrayOfstring");
	case SOAP_TYPE_ns5__ArrayOfint:
		return soap_in_ns5__ArrayOfint(soap, NULL, NULL, "ns5:ArrayOfint");
	case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile:
		return soap_in_ns4__Glove_x002eConfiguration_x002eProfile(soap, NULL, NULL, "ns4:Glove.Configuration.Profile");
	case SOAP_TYPE_ns4__Glove_x002eConfiguration:
		return soap_in_ns4__Glove_x002eConfiguration(soap, NULL, NULL, "ns4:Glove.Configuration");
	case SOAP_TYPE_ns4__Glove:
		return soap_in_ns4__Glove(soap, NULL, NULL, "ns4:Glove");
	case SOAP_TYPE_ns4__ArrayOfGlove:
		return soap_in_ns4__ArrayOfGlove(soap, NULL, NULL, "ns4:ArrayOfGlove");
	case SOAP_TYPE_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return soap_in_xsd__unsignedByte_(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return soap_in_xsd__byte_(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return soap_in_xsd__QName_(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return soap_in_xsd__IDREF_(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__setRawData:
		return soap_in_PointerTo_ns1__setRawData(soap, NULL, NULL, "ns1:setRawData");
	case SOAP_TYPE_PointerTo_ns1__setIMUStatus:
		return soap_in_PointerTo_ns1__setIMUStatus(soap, NULL, NULL, "ns1:setIMUStatus");
	case SOAP_TYPE_PointerTo_ns1__startIMU:
		return soap_in_PointerTo_ns1__startIMU(soap, NULL, NULL, "ns1:startIMU");
	case SOAP_TYPE_PointerTo_ns1__resetFlexors:
		return soap_in_PointerTo_ns1__resetFlexors(soap, NULL, NULL, "ns1:resetFlexors");
	case SOAP_TYPE_PointerTo_ns1__setThreshold:
		return soap_in_PointerTo_ns1__setThreshold(soap, NULL, NULL, "ns1:setThreshold");
	case SOAP_TYPE_PointerTo_ns1__confirmCalibration:
		return soap_in_PointerTo_ns1__confirmCalibration(soap, NULL, NULL, "ns1:confirmCalibration");
	case SOAP_TYPE_PointerTo_ns1__calibrateFlexors:
		return soap_in_PointerTo_ns1__calibrateFlexors(soap, NULL, NULL, "ns1:calibrateFlexors");
	case SOAP_TYPE_PointerTo_ns1__removeFlexor:
		return soap_in_PointerTo_ns1__removeFlexor(soap, NULL, NULL, "ns1:removeFlexor");
	case SOAP_TYPE_PointerTo_ns1__addFlexor:
		return soap_in_PointerTo_ns1__addFlexor(soap, NULL, NULL, "ns1:addFlexor");
	case SOAP_TYPE_PointerTo_ns1__ActivateMany:
		return soap_in_PointerTo_ns1__ActivateMany(soap, NULL, NULL, "ns1:ActivateMany");
	case SOAP_TYPE_PointerTo_ns1__Disconnect:
		return soap_in_PointerTo_ns1__Disconnect(soap, NULL, NULL, "ns1:Disconnect");
	case SOAP_TYPE_PointerTo_ns1__Connect:
		return soap_in_PointerTo_ns1__Connect(soap, NULL, NULL, "ns1:Connect");
	case SOAP_TYPE_PointerTo_ns1__Activate:
		return soap_in_PointerTo_ns1__Activate(soap, NULL, NULL, "ns1:Activate");
	case SOAP_TYPE_PointerTo_ns1__SaveGlove:
		return soap_in_PointerTo_ns1__SaveGlove(soap, NULL, NULL, "ns1:SaveGlove");
	case SOAP_TYPE_PointerTo_ns1__RefreshGloves:
		return soap_in_PointerTo_ns1__RefreshGloves(soap, NULL, NULL, "ns1:RefreshGloves");
	case SOAP_TYPE_PointerTo_ns1__GetGloves:
		return soap_in_PointerTo_ns1__GetGloves(soap, NULL, NULL, "ns1:GetGloves");
	case SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfstringstring:
		return soap_in_PointerTons5__ArrayOfKeyValueOfstringstring(soap, NULL, NULL, "ns5:ArrayOfKeyValueOfstringstring");
	case SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfintint:
		return soap_in_PointerTons5__ArrayOfKeyValueOfintint(soap, NULL, NULL, "ns5:ArrayOfKeyValueOfintint");
	case SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_x002eProfile:
		return soap_in_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, NULL, NULL, "ns4:Glove.Configuration.Profile");
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		return soap_in_PointerTons5__ArrayOfstring(soap, NULL, NULL, "ns5:ArrayOfstring");
	case SOAP_TYPE_PointerTons4__Side:
		return soap_in_PointerTons4__Side(soap, NULL, NULL, "ns4:Side");
	case SOAP_TYPE_PointerTons4__Glove_x002eConfiguration:
		return soap_in_PointerTons4__Glove_x002eConfiguration(soap, NULL, NULL, "ns4:Glove.Configuration");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTons5__ArrayOfint:
		return soap_in_PointerTons5__ArrayOfint(soap, NULL, NULL, "ns5:ArrayOfint");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons4__Glove:
		return soap_in_PointerTons4__Glove(soap, NULL, NULL, "ns4:Glove");
	case SOAP_TYPE_PointerTons4__ArrayOfGlove:
		return soap_in_PointerTons4__ArrayOfGlove(soap, NULL, NULL, "ns4:ArrayOfGlove");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns4:Side"))
		{	*type = SOAP_TYPE_ns4__Side_;
			return soap_in_ns4__Side_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid__;
			return soap_in_ns3__guid__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid;
			return soap_in_ns3__guid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration__;
			return soap_in_ns3__duration__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration;
			return soap_in_ns3__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char__;
			return soap_in_ns3__char__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfKeyValueOfstringstring"))
		{	*type = SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring;
			return soap_in_ns5__ArrayOfKeyValueOfstringstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfKeyValueOfintint"))
		{	*type = SOAP_TYPE_ns5__ArrayOfKeyValueOfintint;
			return soap_in_ns5__ArrayOfKeyValueOfintint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfstring"))
		{	*type = SOAP_TYPE_ns5__ArrayOfstring;
			return soap_in_ns5__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfint"))
		{	*type = SOAP_TYPE_ns5__ArrayOfint;
			return soap_in_ns5__ArrayOfint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:Glove.Configuration.Profile"))
		{	*type = SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile;
			return soap_in_ns4__Glove_x002eConfiguration_x002eProfile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:Glove.Configuration"))
		{	*type = SOAP_TYPE_ns4__Glove_x002eConfiguration;
			return soap_in_ns4__Glove_x002eConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:Glove"))
		{	*type = SOAP_TYPE_ns4__Glove;
			return soap_in_ns4__Glove(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfGlove"))
		{	*type = SOAP_TYPE_ns4__ArrayOfGlove;
			return soap_in_ns4__ArrayOfGlove(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte_;
			return soap_in_xsd__unsignedByte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte_;
			return soap_in_xsd__byte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName_;
			return soap_in_xsd__QName_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF_;
			return soap_in_xsd__IDREF_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID;
			return soap_in_xsd__ID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char;
			return soap_in_ns3__char(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_ULONG64;
			return soap_in_ULONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:Side"))
		{	*type = SOAP_TYPE_ns4__Side;
			return soap_in_ns4__Side(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring"))
		{	*type = SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring;
			return soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfKeyValueOfintint-KeyValueOfintint"))
		{	*type = SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint;
			return soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setRawDataResponse"))
		{	*type = SOAP_TYPE__ns1__setRawDataResponse;
			return soap_in__ns1__setRawDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setRawData"))
		{	*type = SOAP_TYPE__ns1__setRawData;
			return soap_in__ns1__setRawData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setIMUStatusResponse"))
		{	*type = SOAP_TYPE__ns1__setIMUStatusResponse;
			return soap_in__ns1__setIMUStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setIMUStatus"))
		{	*type = SOAP_TYPE__ns1__setIMUStatus;
			return soap_in__ns1__setIMUStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:startIMUResponse"))
		{	*type = SOAP_TYPE__ns1__startIMUResponse;
			return soap_in__ns1__startIMUResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:startIMU"))
		{	*type = SOAP_TYPE__ns1__startIMU;
			return soap_in__ns1__startIMU(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:resetFlexorsResponse"))
		{	*type = SOAP_TYPE__ns1__resetFlexorsResponse;
			return soap_in__ns1__resetFlexorsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:resetFlexors"))
		{	*type = SOAP_TYPE__ns1__resetFlexors;
			return soap_in__ns1__resetFlexors(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setThresholdResponse"))
		{	*type = SOAP_TYPE__ns1__setThresholdResponse;
			return soap_in__ns1__setThresholdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setThreshold"))
		{	*type = SOAP_TYPE__ns1__setThreshold;
			return soap_in__ns1__setThreshold(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:confirmCalibrationResponse"))
		{	*type = SOAP_TYPE__ns1__confirmCalibrationResponse;
			return soap_in__ns1__confirmCalibrationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:confirmCalibration"))
		{	*type = SOAP_TYPE__ns1__confirmCalibration;
			return soap_in__ns1__confirmCalibration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:calibrateFlexorsResponse"))
		{	*type = SOAP_TYPE__ns1__calibrateFlexorsResponse;
			return soap_in__ns1__calibrateFlexorsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:calibrateFlexors"))
		{	*type = SOAP_TYPE__ns1__calibrateFlexors;
			return soap_in__ns1__calibrateFlexors(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeFlexorResponse"))
		{	*type = SOAP_TYPE__ns1__removeFlexorResponse;
			return soap_in__ns1__removeFlexorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeFlexor"))
		{	*type = SOAP_TYPE__ns1__removeFlexor;
			return soap_in__ns1__removeFlexor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:addFlexorResponse"))
		{	*type = SOAP_TYPE__ns1__addFlexorResponse;
			return soap_in__ns1__addFlexorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:addFlexor"))
		{	*type = SOAP_TYPE__ns1__addFlexor;
			return soap_in__ns1__addFlexor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ActivateManyResponse"))
		{	*type = SOAP_TYPE__ns1__ActivateManyResponse;
			return soap_in__ns1__ActivateManyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ActivateMany"))
		{	*type = SOAP_TYPE__ns1__ActivateMany;
			return soap_in__ns1__ActivateMany(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DisconnectResponse"))
		{	*type = SOAP_TYPE__ns1__DisconnectResponse;
			return soap_in__ns1__DisconnectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Disconnect"))
		{	*type = SOAP_TYPE__ns1__Disconnect;
			return soap_in__ns1__Disconnect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ConnectResponse"))
		{	*type = SOAP_TYPE__ns1__ConnectResponse;
			return soap_in__ns1__ConnectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Connect"))
		{	*type = SOAP_TYPE__ns1__Connect;
			return soap_in__ns1__Connect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ActivateResponse"))
		{	*type = SOAP_TYPE__ns1__ActivateResponse;
			return soap_in__ns1__ActivateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Activate"))
		{	*type = SOAP_TYPE__ns1__Activate;
			return soap_in__ns1__Activate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SaveGloveResponse"))
		{	*type = SOAP_TYPE__ns1__SaveGloveResponse;
			return soap_in__ns1__SaveGloveResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SaveGlove"))
		{	*type = SOAP_TYPE__ns1__SaveGlove;
			return soap_in__ns1__SaveGlove(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RefreshGlovesResponse"))
		{	*type = SOAP_TYPE__ns1__RefreshGlovesResponse;
			return soap_in__ns1__RefreshGlovesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RefreshGloves"))
		{	*type = SOAP_TYPE__ns1__RefreshGloves;
			return soap_in__ns1__RefreshGloves(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetGlovesResponse"))
		{	*type = SOAP_TYPE__ns1__GetGlovesResponse;
			return soap_in__ns1__GetGlovesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetGloves"))
		{	*type = SOAP_TYPE__ns1__GetGloves;
			return soap_in__ns1__GetGloves(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_out_ns3__char(soap, tag, id, (const int *)ptr, "ns3:char");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_out_ULONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_ns4__Side:
		return soap_out_ns4__Side(soap, tag, id, (const enum ns4__Side *)ptr, "ns4:Side");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		return ((_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *)ptr)->soap_out(soap, "ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring", id, "");
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		return ((_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *)ptr)->soap_out(soap, "ns5:ArrayOfKeyValueOfintint-KeyValueOfintint", id, "");
	case SOAP_TYPE_ns4__Side_:
		return ((ns4__Side_ *)ptr)->soap_out(soap, tag, id, "ns4:Side");
	case SOAP_TYPE_ns3__guid__:
		return ((ns3__guid__ *)ptr)->soap_out(soap, tag, id, "ns3:guid");
	case SOAP_TYPE_ns3__guid:
		return soap_out_ns3__guid(soap, tag, id, (const std::string *)ptr, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return ((ns3__duration__ *)ptr)->soap_out(soap, tag, id, "ns3:duration");
	case SOAP_TYPE_ns3__duration:
		return soap_out_ns3__duration(soap, tag, id, (const std::string *)ptr, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return ((ns3__char__ *)ptr)->soap_out(soap, tag, id, "ns3:char");
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring:
		return ((ns5__ArrayOfKeyValueOfstringstring *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfKeyValueOfstringstring");
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint:
		return ((ns5__ArrayOfKeyValueOfintint *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfKeyValueOfintint");
	case SOAP_TYPE_ns5__ArrayOfstring:
		return ((ns5__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfstring");
	case SOAP_TYPE_ns5__ArrayOfint:
		return ((ns5__ArrayOfint *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfint");
	case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile:
		return ((ns4__Glove_x002eConfiguration_x002eProfile *)ptr)->soap_out(soap, tag, id, "ns4:Glove.Configuration.Profile");
	case SOAP_TYPE_ns4__Glove_x002eConfiguration:
		return ((ns4__Glove_x002eConfiguration *)ptr)->soap_out(soap, tag, id, "ns4:Glove.Configuration");
	case SOAP_TYPE_ns4__Glove:
		return ((ns4__Glove *)ptr)->soap_out(soap, tag, id, "ns4:Glove");
	case SOAP_TYPE_ns4__ArrayOfGlove:
		return ((ns4__ArrayOfGlove *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfGlove");
	case SOAP_TYPE__ns1__setRawDataResponse:
		return ((_ns1__setRawDataResponse *)ptr)->soap_out(soap, "ns1:setRawDataResponse", id, "");
	case SOAP_TYPE__ns1__setRawData:
		return ((_ns1__setRawData *)ptr)->soap_out(soap, "ns1:setRawData", id, "");
	case SOAP_TYPE__ns1__setIMUStatusResponse:
		return ((_ns1__setIMUStatusResponse *)ptr)->soap_out(soap, "ns1:setIMUStatusResponse", id, "");
	case SOAP_TYPE__ns1__setIMUStatus:
		return ((_ns1__setIMUStatus *)ptr)->soap_out(soap, "ns1:setIMUStatus", id, "");
	case SOAP_TYPE__ns1__startIMUResponse:
		return ((_ns1__startIMUResponse *)ptr)->soap_out(soap, "ns1:startIMUResponse", id, "");
	case SOAP_TYPE__ns1__startIMU:
		return ((_ns1__startIMU *)ptr)->soap_out(soap, "ns1:startIMU", id, "");
	case SOAP_TYPE__ns1__resetFlexorsResponse:
		return ((_ns1__resetFlexorsResponse *)ptr)->soap_out(soap, "ns1:resetFlexorsResponse", id, "");
	case SOAP_TYPE__ns1__resetFlexors:
		return ((_ns1__resetFlexors *)ptr)->soap_out(soap, "ns1:resetFlexors", id, "");
	case SOAP_TYPE__ns1__setThresholdResponse:
		return ((_ns1__setThresholdResponse *)ptr)->soap_out(soap, "ns1:setThresholdResponse", id, "");
	case SOAP_TYPE__ns1__setThreshold:
		return ((_ns1__setThreshold *)ptr)->soap_out(soap, "ns1:setThreshold", id, "");
	case SOAP_TYPE__ns1__confirmCalibrationResponse:
		return ((_ns1__confirmCalibrationResponse *)ptr)->soap_out(soap, "ns1:confirmCalibrationResponse", id, "");
	case SOAP_TYPE__ns1__confirmCalibration:
		return ((_ns1__confirmCalibration *)ptr)->soap_out(soap, "ns1:confirmCalibration", id, "");
	case SOAP_TYPE__ns1__calibrateFlexorsResponse:
		return ((_ns1__calibrateFlexorsResponse *)ptr)->soap_out(soap, "ns1:calibrateFlexorsResponse", id, "");
	case SOAP_TYPE__ns1__calibrateFlexors:
		return ((_ns1__calibrateFlexors *)ptr)->soap_out(soap, "ns1:calibrateFlexors", id, "");
	case SOAP_TYPE__ns1__removeFlexorResponse:
		return ((_ns1__removeFlexorResponse *)ptr)->soap_out(soap, "ns1:removeFlexorResponse", id, "");
	case SOAP_TYPE__ns1__removeFlexor:
		return ((_ns1__removeFlexor *)ptr)->soap_out(soap, "ns1:removeFlexor", id, "");
	case SOAP_TYPE__ns1__addFlexorResponse:
		return ((_ns1__addFlexorResponse *)ptr)->soap_out(soap, "ns1:addFlexorResponse", id, "");
	case SOAP_TYPE__ns1__addFlexor:
		return ((_ns1__addFlexor *)ptr)->soap_out(soap, "ns1:addFlexor", id, "");
	case SOAP_TYPE__ns1__ActivateManyResponse:
		return ((_ns1__ActivateManyResponse *)ptr)->soap_out(soap, "ns1:ActivateManyResponse", id, "");
	case SOAP_TYPE__ns1__ActivateMany:
		return ((_ns1__ActivateMany *)ptr)->soap_out(soap, "ns1:ActivateMany", id, "");
	case SOAP_TYPE__ns1__DisconnectResponse:
		return ((_ns1__DisconnectResponse *)ptr)->soap_out(soap, "ns1:DisconnectResponse", id, "");
	case SOAP_TYPE__ns1__Disconnect:
		return ((_ns1__Disconnect *)ptr)->soap_out(soap, "ns1:Disconnect", id, "");
	case SOAP_TYPE__ns1__ConnectResponse:
		return ((_ns1__ConnectResponse *)ptr)->soap_out(soap, "ns1:ConnectResponse", id, "");
	case SOAP_TYPE__ns1__Connect:
		return ((_ns1__Connect *)ptr)->soap_out(soap, "ns1:Connect", id, "");
	case SOAP_TYPE__ns1__ActivateResponse:
		return ((_ns1__ActivateResponse *)ptr)->soap_out(soap, "ns1:ActivateResponse", id, "");
	case SOAP_TYPE__ns1__Activate:
		return ((_ns1__Activate *)ptr)->soap_out(soap, "ns1:Activate", id, "");
	case SOAP_TYPE__ns1__SaveGloveResponse:
		return ((_ns1__SaveGloveResponse *)ptr)->soap_out(soap, "ns1:SaveGloveResponse", id, "");
	case SOAP_TYPE__ns1__SaveGlove:
		return ((_ns1__SaveGlove *)ptr)->soap_out(soap, "ns1:SaveGlove", id, "");
	case SOAP_TYPE__ns1__RefreshGlovesResponse:
		return ((_ns1__RefreshGlovesResponse *)ptr)->soap_out(soap, "ns1:RefreshGlovesResponse", id, "");
	case SOAP_TYPE__ns1__RefreshGloves:
		return ((_ns1__RefreshGloves *)ptr)->soap_out(soap, "ns1:RefreshGloves", id, "");
	case SOAP_TYPE__ns1__GetGlovesResponse:
		return ((_ns1__GetGlovesResponse *)ptr)->soap_out(soap, "ns1:GetGlovesResponse", id, "");
	case SOAP_TYPE__ns1__GetGloves:
		return ((_ns1__GetGloves *)ptr)->soap_out(soap, "ns1:GetGloves", id, "");
	case SOAP_TYPE_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return ((xsd__unsignedLong *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return ((xsd__unsignedByte_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return ((xsd__short *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::string *)ptr, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return ((xsd__double *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return ((xsd__byte_ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return ((xsd__QName_ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return ((xsd__IDREF_ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::string *)ptr, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__setRawData:
		return soap_out_PointerTo_ns1__setRawData(soap, tag, id, (_ns1__setRawData *const*)ptr, "ns1:setRawData");
	case SOAP_TYPE_PointerTo_ns1__setIMUStatus:
		return soap_out_PointerTo_ns1__setIMUStatus(soap, tag, id, (_ns1__setIMUStatus *const*)ptr, "ns1:setIMUStatus");
	case SOAP_TYPE_PointerTo_ns1__startIMU:
		return soap_out_PointerTo_ns1__startIMU(soap, tag, id, (_ns1__startIMU *const*)ptr, "ns1:startIMU");
	case SOAP_TYPE_PointerTo_ns1__resetFlexors:
		return soap_out_PointerTo_ns1__resetFlexors(soap, tag, id, (_ns1__resetFlexors *const*)ptr, "ns1:resetFlexors");
	case SOAP_TYPE_PointerTo_ns1__setThreshold:
		return soap_out_PointerTo_ns1__setThreshold(soap, tag, id, (_ns1__setThreshold *const*)ptr, "ns1:setThreshold");
	case SOAP_TYPE_PointerTo_ns1__confirmCalibration:
		return soap_out_PointerTo_ns1__confirmCalibration(soap, tag, id, (_ns1__confirmCalibration *const*)ptr, "ns1:confirmCalibration");
	case SOAP_TYPE_PointerTo_ns1__calibrateFlexors:
		return soap_out_PointerTo_ns1__calibrateFlexors(soap, tag, id, (_ns1__calibrateFlexors *const*)ptr, "ns1:calibrateFlexors");
	case SOAP_TYPE_PointerTo_ns1__removeFlexor:
		return soap_out_PointerTo_ns1__removeFlexor(soap, tag, id, (_ns1__removeFlexor *const*)ptr, "ns1:removeFlexor");
	case SOAP_TYPE_PointerTo_ns1__addFlexor:
		return soap_out_PointerTo_ns1__addFlexor(soap, tag, id, (_ns1__addFlexor *const*)ptr, "ns1:addFlexor");
	case SOAP_TYPE_PointerTo_ns1__ActivateMany:
		return soap_out_PointerTo_ns1__ActivateMany(soap, tag, id, (_ns1__ActivateMany *const*)ptr, "ns1:ActivateMany");
	case SOAP_TYPE_PointerTo_ns1__Disconnect:
		return soap_out_PointerTo_ns1__Disconnect(soap, tag, id, (_ns1__Disconnect *const*)ptr, "ns1:Disconnect");
	case SOAP_TYPE_PointerTo_ns1__Connect:
		return soap_out_PointerTo_ns1__Connect(soap, tag, id, (_ns1__Connect *const*)ptr, "ns1:Connect");
	case SOAP_TYPE_PointerTo_ns1__Activate:
		return soap_out_PointerTo_ns1__Activate(soap, tag, id, (_ns1__Activate *const*)ptr, "ns1:Activate");
	case SOAP_TYPE_PointerTo_ns1__SaveGlove:
		return soap_out_PointerTo_ns1__SaveGlove(soap, tag, id, (_ns1__SaveGlove *const*)ptr, "ns1:SaveGlove");
	case SOAP_TYPE_PointerTo_ns1__RefreshGloves:
		return soap_out_PointerTo_ns1__RefreshGloves(soap, tag, id, (_ns1__RefreshGloves *const*)ptr, "ns1:RefreshGloves");
	case SOAP_TYPE_PointerTo_ns1__GetGloves:
		return soap_out_PointerTo_ns1__GetGloves(soap, tag, id, (_ns1__GetGloves *const*)ptr, "ns1:GetGloves");
	case SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfstringstring:
		return soap_out_PointerTons5__ArrayOfKeyValueOfstringstring(soap, tag, id, (ns5__ArrayOfKeyValueOfstringstring *const*)ptr, "ns5:ArrayOfKeyValueOfstringstring");
	case SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfintint:
		return soap_out_PointerTons5__ArrayOfKeyValueOfintint(soap, tag, id, (ns5__ArrayOfKeyValueOfintint *const*)ptr, "ns5:ArrayOfKeyValueOfintint");
	case SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_x002eProfile:
		return soap_out_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, tag, id, (ns4__Glove_x002eConfiguration_x002eProfile *const*)ptr, "ns4:Glove.Configuration.Profile");
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		return soap_out_PointerTons5__ArrayOfstring(soap, tag, id, (ns5__ArrayOfstring *const*)ptr, "ns5:ArrayOfstring");
	case SOAP_TYPE_PointerTons4__Side:
		return soap_out_PointerTons4__Side(soap, tag, id, (enum ns4__Side *const*)ptr, "ns4:Side");
	case SOAP_TYPE_PointerTons4__Glove_x002eConfiguration:
		return soap_out_PointerTons4__Glove_x002eConfiguration(soap, tag, id, (ns4__Glove_x002eConfiguration *const*)ptr, "ns4:Glove.Configuration");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTons5__ArrayOfint:
		return soap_out_PointerTons5__ArrayOfint(soap, tag, id, (ns5__ArrayOfint *const*)ptr, "ns5:ArrayOfint");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons4__Glove:
		return soap_out_PointerTons4__Glove(soap, tag, id, (ns4__Glove *const*)ptr, "ns4:Glove");
	case SOAP_TYPE_PointerTons4__ArrayOfGlove:
		return soap_out_PointerTons4__ArrayOfGlove(soap, tag, id, (ns4__ArrayOfGlove *const*)ptr, "ns4:ArrayOfGlove");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		((_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		((_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__Side_:
		((ns4__Side_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__guid__:
		((ns3__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__guid:
		soap_serialize_ns3__guid(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__duration__:
		((ns3__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__duration:
		soap_serialize_ns3__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__char__:
		((ns3__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring:
		((ns5__ArrayOfKeyValueOfstringstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint:
		((ns5__ArrayOfKeyValueOfintint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		((ns5__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfint:
		((ns5__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile:
		((ns4__Glove_x002eConfiguration_x002eProfile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__Glove_x002eConfiguration:
		((ns4__Glove_x002eConfiguration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__Glove:
		((ns4__Glove *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfGlove:
		((ns4__ArrayOfGlove *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setRawDataResponse:
		((_ns1__setRawDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setRawData:
		((_ns1__setRawData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setIMUStatusResponse:
		((_ns1__setIMUStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setIMUStatus:
		((_ns1__setIMUStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__startIMUResponse:
		((_ns1__startIMUResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__startIMU:
		((_ns1__startIMU *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__resetFlexorsResponse:
		((_ns1__resetFlexorsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__resetFlexors:
		((_ns1__resetFlexors *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setThresholdResponse:
		((_ns1__setThresholdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setThreshold:
		((_ns1__setThreshold *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__confirmCalibrationResponse:
		((_ns1__confirmCalibrationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__confirmCalibration:
		((_ns1__confirmCalibration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__calibrateFlexorsResponse:
		((_ns1__calibrateFlexorsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__calibrateFlexors:
		((_ns1__calibrateFlexors *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeFlexorResponse:
		((_ns1__removeFlexorResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeFlexor:
		((_ns1__removeFlexor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__addFlexorResponse:
		((_ns1__addFlexorResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__addFlexor:
		((_ns1__addFlexor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ActivateManyResponse:
		((_ns1__ActivateManyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ActivateMany:
		((_ns1__ActivateMany *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DisconnectResponse:
		((_ns1__DisconnectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Disconnect:
		((_ns1__Disconnect *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ConnectResponse:
		((_ns1__ConnectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Connect:
		((_ns1__Connect *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ActivateResponse:
		((_ns1__ActivateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Activate:
		((_ns1__Activate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SaveGloveResponse:
		((_ns1__SaveGloveResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SaveGlove:
		((_ns1__SaveGlove *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RefreshGlovesResponse:
		((_ns1__RefreshGlovesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RefreshGloves:
		((_ns1__RefreshGloves *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetGlovesResponse:
		((_ns1__GetGlovesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetGloves:
		((_ns1__GetGloves *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		((xsd__unsignedLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		((xsd__unsignedByte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__short:
		((xsd__short *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float:
		((xsd__float *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__double:
		((xsd__double *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__byte_:
		((xsd__byte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName_:
		((xsd__QName_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		((xsd__IDREF_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__setRawData:
		soap_serialize___ns1__setRawData(soap, (const struct __ns1__setRawData *)ptr);
		break;
	case SOAP_TYPE___ns1__setIMUStatus:
		soap_serialize___ns1__setIMUStatus(soap, (const struct __ns1__setIMUStatus *)ptr);
		break;
	case SOAP_TYPE___ns1__startIMU:
		soap_serialize___ns1__startIMU(soap, (const struct __ns1__startIMU *)ptr);
		break;
	case SOAP_TYPE___ns1__resetFlexors:
		soap_serialize___ns1__resetFlexors(soap, (const struct __ns1__resetFlexors *)ptr);
		break;
	case SOAP_TYPE___ns1__setThreshold:
		soap_serialize___ns1__setThreshold(soap, (const struct __ns1__setThreshold *)ptr);
		break;
	case SOAP_TYPE___ns1__confirmCalibration:
		soap_serialize___ns1__confirmCalibration(soap, (const struct __ns1__confirmCalibration *)ptr);
		break;
	case SOAP_TYPE___ns1__calibrateFlexors:
		soap_serialize___ns1__calibrateFlexors(soap, (const struct __ns1__calibrateFlexors *)ptr);
		break;
	case SOAP_TYPE___ns1__removeFlexor:
		soap_serialize___ns1__removeFlexor(soap, (const struct __ns1__removeFlexor *)ptr);
		break;
	case SOAP_TYPE___ns1__addFlexor:
		soap_serialize___ns1__addFlexor(soap, (const struct __ns1__addFlexor *)ptr);
		break;
	case SOAP_TYPE___ns1__ActivateMany:
		soap_serialize___ns1__ActivateMany(soap, (const struct __ns1__ActivateMany *)ptr);
		break;
	case SOAP_TYPE___ns1__Disconnect:
		soap_serialize___ns1__Disconnect(soap, (const struct __ns1__Disconnect *)ptr);
		break;
	case SOAP_TYPE___ns1__Connect:
		soap_serialize___ns1__Connect(soap, (const struct __ns1__Connect *)ptr);
		break;
	case SOAP_TYPE___ns1__Activate:
		soap_serialize___ns1__Activate(soap, (const struct __ns1__Activate *)ptr);
		break;
	case SOAP_TYPE___ns1__SaveGlove:
		soap_serialize___ns1__SaveGlove(soap, (const struct __ns1__SaveGlove *)ptr);
		break;
	case SOAP_TYPE___ns1__RefreshGloves:
		soap_serialize___ns1__RefreshGloves(soap, (const struct __ns1__RefreshGloves *)ptr);
		break;
	case SOAP_TYPE___ns1__GetGloves:
		soap_serialize___ns1__GetGloves(soap, (const struct __ns1__GetGloves *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setRawData:
		soap_serialize_PointerTo_ns1__setRawData(soap, (_ns1__setRawData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setIMUStatus:
		soap_serialize_PointerTo_ns1__setIMUStatus(soap, (_ns1__setIMUStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__startIMU:
		soap_serialize_PointerTo_ns1__startIMU(soap, (_ns1__startIMU *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__resetFlexors:
		soap_serialize_PointerTo_ns1__resetFlexors(soap, (_ns1__resetFlexors *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setThreshold:
		soap_serialize_PointerTo_ns1__setThreshold(soap, (_ns1__setThreshold *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__confirmCalibration:
		soap_serialize_PointerTo_ns1__confirmCalibration(soap, (_ns1__confirmCalibration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__calibrateFlexors:
		soap_serialize_PointerTo_ns1__calibrateFlexors(soap, (_ns1__calibrateFlexors *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__removeFlexor:
		soap_serialize_PointerTo_ns1__removeFlexor(soap, (_ns1__removeFlexor *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__addFlexor:
		soap_serialize_PointerTo_ns1__addFlexor(soap, (_ns1__addFlexor *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ActivateMany:
		soap_serialize_PointerTo_ns1__ActivateMany(soap, (_ns1__ActivateMany *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Disconnect:
		soap_serialize_PointerTo_ns1__Disconnect(soap, (_ns1__Disconnect *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Connect:
		soap_serialize_PointerTo_ns1__Connect(soap, (_ns1__Connect *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Activate:
		soap_serialize_PointerTo_ns1__Activate(soap, (_ns1__Activate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SaveGlove:
		soap_serialize_PointerTo_ns1__SaveGlove(soap, (_ns1__SaveGlove *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RefreshGloves:
		soap_serialize_PointerTo_ns1__RefreshGloves(soap, (_ns1__RefreshGloves *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetGloves:
		soap_serialize_PointerTo_ns1__GetGloves(soap, (_ns1__GetGloves *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfstringstring:
		soap_serialize_PointerTons5__ArrayOfKeyValueOfstringstring(soap, (ns5__ArrayOfKeyValueOfstringstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfintint:
		soap_serialize_PointerTons5__ArrayOfKeyValueOfintint(soap, (ns5__ArrayOfKeyValueOfintint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_x002eProfile:
		soap_serialize_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, (ns4__Glove_x002eConfiguration_x002eProfile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		soap_serialize_PointerTons5__ArrayOfstring(soap, (ns5__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__Side:
		soap_serialize_PointerTons4__Side(soap, (enum ns4__Side *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__Glove_x002eConfiguration:
		soap_serialize_PointerTons4__Glove_x002eConfiguration(soap, (ns4__Glove_x002eConfiguration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfint:
		soap_serialize_PointerTons5__ArrayOfint(soap, (ns5__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__Glove:
		soap_serialize_PointerTons4__Glove(soap, (ns4__Glove *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfGlove:
		soap_serialize_PointerTons4__ArrayOfGlove(soap, (ns4__ArrayOfGlove *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF_:
		return (void*)soap_instantiate_xsd__IDREF_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName_:
		return (void*)soap_instantiate_xsd__QName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__byte_:
		return (void*)soap_instantiate_xsd__byte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double:
		return (void*)soap_instantiate_xsd__double(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float:
		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__short:
		return (void*)soap_instantiate_xsd__short(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedByte_:
		return (void*)soap_instantiate_xsd__unsignedByte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedLong:
		return (void*)soap_instantiate_xsd__unsignedLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__char__:
		return (void*)soap_instantiate_ns3__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration__:
		return (void*)soap_instantiate_ns3__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid__:
		return (void*)soap_instantiate_ns3__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__Side_:
		return (void*)soap_instantiate_ns4__Side_(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetGloves:
		return (void*)soap_instantiate__ns1__GetGloves(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetGlovesResponse:
		return (void*)soap_instantiate__ns1__GetGlovesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RefreshGloves:
		return (void*)soap_instantiate__ns1__RefreshGloves(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RefreshGlovesResponse:
		return (void*)soap_instantiate__ns1__RefreshGlovesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SaveGlove:
		return (void*)soap_instantiate__ns1__SaveGlove(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SaveGloveResponse:
		return (void*)soap_instantiate__ns1__SaveGloveResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Activate:
		return (void*)soap_instantiate__ns1__Activate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ActivateResponse:
		return (void*)soap_instantiate__ns1__ActivateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Connect:
		return (void*)soap_instantiate__ns1__Connect(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ConnectResponse:
		return (void*)soap_instantiate__ns1__ConnectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Disconnect:
		return (void*)soap_instantiate__ns1__Disconnect(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DisconnectResponse:
		return (void*)soap_instantiate__ns1__DisconnectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ActivateMany:
		return (void*)soap_instantiate__ns1__ActivateMany(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ActivateManyResponse:
		return (void*)soap_instantiate__ns1__ActivateManyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__addFlexor:
		return (void*)soap_instantiate__ns1__addFlexor(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__addFlexorResponse:
		return (void*)soap_instantiate__ns1__addFlexorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeFlexor:
		return (void*)soap_instantiate__ns1__removeFlexor(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeFlexorResponse:
		return (void*)soap_instantiate__ns1__removeFlexorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__calibrateFlexors:
		return (void*)soap_instantiate__ns1__calibrateFlexors(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__calibrateFlexorsResponse:
		return (void*)soap_instantiate__ns1__calibrateFlexorsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__confirmCalibration:
		return (void*)soap_instantiate__ns1__confirmCalibration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__confirmCalibrationResponse:
		return (void*)soap_instantiate__ns1__confirmCalibrationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setThreshold:
		return (void*)soap_instantiate__ns1__setThreshold(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setThresholdResponse:
		return (void*)soap_instantiate__ns1__setThresholdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__resetFlexors:
		return (void*)soap_instantiate__ns1__resetFlexors(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__resetFlexorsResponse:
		return (void*)soap_instantiate__ns1__resetFlexorsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__startIMU:
		return (void*)soap_instantiate__ns1__startIMU(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__startIMUResponse:
		return (void*)soap_instantiate__ns1__startIMUResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setIMUStatus:
		return (void*)soap_instantiate__ns1__setIMUStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setIMUStatusResponse:
		return (void*)soap_instantiate__ns1__setIMUStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setRawData:
		return (void*)soap_instantiate__ns1__setRawData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setRawDataResponse:
		return (void*)soap_instantiate__ns1__setRawDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfGlove:
		return (void*)soap_instantiate_ns4__ArrayOfGlove(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__Glove:
		return (void*)soap_instantiate_ns4__Glove(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__Glove_x002eConfiguration:
		return (void*)soap_instantiate_ns4__Glove_x002eConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile:
		return (void*)soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfint:
		return (void*)soap_instantiate_ns5__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfstring:
		return (void*)soap_instantiate_ns5__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		return (void*)soap_instantiate__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint:
		return (void*)soap_instantiate_ns5__ArrayOfKeyValueOfintint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		return (void*)soap_instantiate__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring:
		return (void*)soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetGloves:
		return (void*)soap_instantiate___ns1__GetGloves(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__RefreshGloves:
		return (void*)soap_instantiate___ns1__RefreshGloves(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SaveGlove:
		return (void*)soap_instantiate___ns1__SaveGlove(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Activate:
		return (void*)soap_instantiate___ns1__Activate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Connect:
		return (void*)soap_instantiate___ns1__Connect(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Disconnect:
		return (void*)soap_instantiate___ns1__Disconnect(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ActivateMany:
		return (void*)soap_instantiate___ns1__ActivateMany(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__addFlexor:
		return (void*)soap_instantiate___ns1__addFlexor(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__removeFlexor:
		return (void*)soap_instantiate___ns1__removeFlexor(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__calibrateFlexors:
		return (void*)soap_instantiate___ns1__calibrateFlexors(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__confirmCalibration:
		return (void*)soap_instantiate___ns1__confirmCalibration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setThreshold:
		return (void*)soap_instantiate___ns1__setThreshold(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__resetFlexors:
		return (void*)soap_instantiate___ns1__resetFlexors(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__startIMU:
		return (void*)soap_instantiate___ns1__startIMU(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setIMUStatus:
		return (void*)soap_instantiate___ns1__setIMUStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setRawData:
		return (void*)soap_instantiate___ns1__setRawData(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration:
		return (void*)soap_instantiate_ns3__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid:
		return (void*)soap_instantiate_ns3__guid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons4__Glove(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyType*>(p->ptr));
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__ID_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__ID_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__ID_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__IDREF_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__IDREF_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__IDREF_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__QName_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__QName_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__QName_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyURI_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyURI_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__boolean*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__boolean*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__byte_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__byte_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__byte_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__dateTime*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__dateTime*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__decimal_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__decimal_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__decimal_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__double:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__double*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__double*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__duration_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__duration_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__duration_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__float:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__float*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__float*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__int*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__int*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__long*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__long*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__short:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__short*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__short*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedByte_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedByte_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedInt*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedInt*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedLong*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedLong*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedShort*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedShort*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__char__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__char__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__char__*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__duration__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__duration__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__duration__*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__guid__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__guid__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__guid__*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__Side_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__Side_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__Side_*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetGloves:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetGloves*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetGloves*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetGlovesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetGlovesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetGlovesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__RefreshGloves:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__RefreshGloves*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__RefreshGloves*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__RefreshGlovesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__RefreshGlovesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__RefreshGlovesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SaveGlove:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SaveGlove*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SaveGlove*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SaveGloveResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SaveGloveResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SaveGloveResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__Activate:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__Activate*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__Activate*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__ActivateResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__ActivateResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__ActivateResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__Connect:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__Connect*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__Connect*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__ConnectResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__ConnectResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__ConnectResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__Disconnect:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__Disconnect*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__Disconnect*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__DisconnectResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__DisconnectResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__DisconnectResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__ActivateMany:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__ActivateMany*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__ActivateMany*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__ActivateManyResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__ActivateManyResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__ActivateManyResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__addFlexor:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__addFlexor*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__addFlexor*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__addFlexorResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__addFlexorResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__addFlexorResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__removeFlexor:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__removeFlexor*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__removeFlexor*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__removeFlexorResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__removeFlexorResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__removeFlexorResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__calibrateFlexors:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__calibrateFlexors*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__calibrateFlexors*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__calibrateFlexorsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__calibrateFlexorsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__calibrateFlexorsResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__confirmCalibration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__confirmCalibration*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__confirmCalibration*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__confirmCalibrationResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__confirmCalibrationResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__confirmCalibrationResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__setThreshold:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__setThreshold*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__setThreshold*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__setThresholdResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__setThresholdResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__setThresholdResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__resetFlexors:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__resetFlexors*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__resetFlexors*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__resetFlexorsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__resetFlexorsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__resetFlexorsResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__startIMU:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__startIMU*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__startIMU*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__startIMUResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__startIMUResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__startIMUResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__setIMUStatus:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__setIMUStatus*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__setIMUStatus*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__setIMUStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__setIMUStatusResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__setIMUStatusResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__setRawData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__setRawData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__setRawData*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__setRawDataResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__setRawDataResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__setRawDataResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfGlove:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfGlove*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfGlove*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__Glove:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__Glove*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__Glove*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__Glove_x002eConfiguration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__Glove_x002eConfiguration*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__Glove_x002eConfiguration*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__Glove_x002eConfiguration_x002eProfile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__Glove_x002eConfiguration_x002eProfile*>(p->ptr));
		break;
	case SOAP_TYPE_ns5__ArrayOfint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns5__ArrayOfint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns5__ArrayOfint*>(p->ptr));
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns5__ArrayOfstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns5__ArrayOfstring*>(p->ptr));
		break;
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint*>(p->ptr));
		break;
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns5__ArrayOfKeyValueOfintint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns5__ArrayOfKeyValueOfintint*>(p->ptr));
		break;
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring*>(p->ptr));
		break;
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns5__ArrayOfKeyValueOfstringstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns5__ArrayOfKeyValueOfstringstring*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetGloves:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetGloves*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetGloves*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__RefreshGloves:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__RefreshGloves*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__RefreshGloves*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__SaveGlove:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__SaveGlove*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__SaveGlove*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Activate:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Activate*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Activate*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Connect:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Connect*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Connect*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Disconnect:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Disconnect*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Disconnect*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__ActivateMany:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__ActivateMany*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__ActivateMany*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__addFlexor:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__addFlexor*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__addFlexor*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__removeFlexor:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__removeFlexor*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__removeFlexor*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__calibrateFlexors:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__calibrateFlexors*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__calibrateFlexors*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__confirmCalibration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__confirmCalibration*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__confirmCalibration*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__setThreshold:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__setThreshold*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__setThreshold*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__resetFlexors:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__resetFlexors*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__resetFlexors*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__startIMU:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__startIMU*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__startIMU*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__setIMUStatus:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__setIMUStatus*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__setIMUStatus*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__setRawData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__setRawData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__setRawData*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__IDREF:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__duration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__guid:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<std::string> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<std::string> *>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<int> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<int> *>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ns4__Glove *> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ns4__Glove *> *>(p->ptr));
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		case SOAP_TYPE_xsd__ID_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__IDREF_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__QName_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__anyURI_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__base64Binary_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__boolean: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__byte_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__dateTime: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__decimal_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__double: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__duration_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__float: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__int: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__long: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__short: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__string: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedByte_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedInt: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedLong: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__unsignedShort: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__char__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__duration__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns3__guid__: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns4__Side_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns4__ArrayOfGlove: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns4__Glove: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns4__Glove_x002eConfiguration: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns5__ArrayOfint: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns5__ArrayOfstring: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring: t = SOAP_TYPE_xsd__anyType; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		if (t == SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *)p)[index] = *(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		if (t == SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *)p)[index] = *(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (t == SOAP_TYPE_int)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<int>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<int> *)p)[index] = *(int *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove:
		if (t == SOAP_TYPE_ns4__Glove || soap_fbase(t, SOAP_TYPE_ns4__Glove))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns4__Glove *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns4__Glove *> *)p)[index] = *(ns4__Glove **)q;
		}
		break;
	case SOAP_TYPE_xsd__anyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyType type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyType*)p = *(xsd__anyType*)q;
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_xsd__ID_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__ID_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__ID_*)p = *(xsd__ID_*)q;
		break;
	case SOAP_TYPE_xsd__IDREF_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__IDREF_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__IDREF_*)p = *(xsd__IDREF_*)q;
		break;
	case SOAP_TYPE_xsd__QName_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__QName_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__QName_*)p = *(xsd__QName_*)q;
		break;
	case SOAP_TYPE_xsd__anyURI_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyURI_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
		break;
	case SOAP_TYPE_xsd__boolean:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__boolean type=%d location=%p object=%p\n", t, p, q));
		*(xsd__boolean*)p = *(xsd__boolean*)q;
		break;
	case SOAP_TYPE_xsd__byte_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__byte_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__byte_*)p = *(xsd__byte_*)q;
		break;
	case SOAP_TYPE_xsd__dateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__dateTime type=%d location=%p object=%p\n", t, p, q));
		*(xsd__dateTime*)p = *(xsd__dateTime*)q;
		break;
	case SOAP_TYPE_xsd__decimal_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__decimal_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__decimal_*)p = *(xsd__decimal_*)q;
		break;
	case SOAP_TYPE_xsd__double:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__double type=%d location=%p object=%p\n", t, p, q));
		*(xsd__double*)p = *(xsd__double*)q;
		break;
	case SOAP_TYPE_xsd__duration_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__duration_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__duration_*)p = *(xsd__duration_*)q;
		break;
	case SOAP_TYPE_xsd__float:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__float type=%d location=%p object=%p\n", t, p, q));
		*(xsd__float*)p = *(xsd__float*)q;
		break;
	case SOAP_TYPE_xsd__int:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__int type=%d location=%p object=%p\n", t, p, q));
		*(xsd__int*)p = *(xsd__int*)q;
		break;
	case SOAP_TYPE_xsd__long:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__long type=%d location=%p object=%p\n", t, p, q));
		*(xsd__long*)p = *(xsd__long*)q;
		break;
	case SOAP_TYPE_xsd__short:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__short type=%d location=%p object=%p\n", t, p, q));
		*(xsd__short*)p = *(xsd__short*)q;
		break;
	case SOAP_TYPE_xsd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__string type=%d location=%p object=%p\n", t, p, q));
		*(xsd__string*)p = *(xsd__string*)q;
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedByte_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedByte_*)p = *(xsd__unsignedByte_*)q;
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedInt type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedLong type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedLong*)p = *(xsd__unsignedLong*)q;
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedShort type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
		break;
	case SOAP_TYPE_ns3__char__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__char__ type=%d location=%p object=%p\n", t, p, q));
		*(ns3__char__*)p = *(ns3__char__*)q;
		break;
	case SOAP_TYPE_ns3__duration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__duration__ type=%d location=%p object=%p\n", t, p, q));
		*(ns3__duration__*)p = *(ns3__duration__*)q;
		break;
	case SOAP_TYPE_ns3__guid__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__guid__ type=%d location=%p object=%p\n", t, p, q));
		*(ns3__guid__*)p = *(ns3__guid__*)q;
		break;
	case SOAP_TYPE_ns4__Side_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__Side_ type=%d location=%p object=%p\n", t, p, q));
		*(ns4__Side_*)p = *(ns4__Side_*)q;
		break;
	case SOAP_TYPE__ns1__GetGloves:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetGloves type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetGloves*)p = *(_ns1__GetGloves*)q;
		break;
	case SOAP_TYPE__ns1__GetGlovesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetGlovesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetGlovesResponse*)p = *(_ns1__GetGlovesResponse*)q;
		break;
	case SOAP_TYPE__ns1__RefreshGloves:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__RefreshGloves type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__RefreshGloves*)p = *(_ns1__RefreshGloves*)q;
		break;
	case SOAP_TYPE__ns1__RefreshGlovesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__RefreshGlovesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__RefreshGlovesResponse*)p = *(_ns1__RefreshGlovesResponse*)q;
		break;
	case SOAP_TYPE__ns1__SaveGlove:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__SaveGlove type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__SaveGlove*)p = *(_ns1__SaveGlove*)q;
		break;
	case SOAP_TYPE__ns1__SaveGloveResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__SaveGloveResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__SaveGloveResponse*)p = *(_ns1__SaveGloveResponse*)q;
		break;
	case SOAP_TYPE__ns1__Activate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Activate type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Activate*)p = *(_ns1__Activate*)q;
		break;
	case SOAP_TYPE__ns1__ActivateResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ActivateResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ActivateResponse*)p = *(_ns1__ActivateResponse*)q;
		break;
	case SOAP_TYPE__ns1__Connect:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Connect type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Connect*)p = *(_ns1__Connect*)q;
		break;
	case SOAP_TYPE__ns1__ConnectResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ConnectResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ConnectResponse*)p = *(_ns1__ConnectResponse*)q;
		break;
	case SOAP_TYPE__ns1__Disconnect:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Disconnect type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Disconnect*)p = *(_ns1__Disconnect*)q;
		break;
	case SOAP_TYPE__ns1__DisconnectResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DisconnectResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DisconnectResponse*)p = *(_ns1__DisconnectResponse*)q;
		break;
	case SOAP_TYPE__ns1__ActivateMany:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ActivateMany type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ActivateMany*)p = *(_ns1__ActivateMany*)q;
		break;
	case SOAP_TYPE__ns1__ActivateManyResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ActivateManyResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ActivateManyResponse*)p = *(_ns1__ActivateManyResponse*)q;
		break;
	case SOAP_TYPE__ns1__addFlexor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__addFlexor type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__addFlexor*)p = *(_ns1__addFlexor*)q;
		break;
	case SOAP_TYPE__ns1__addFlexorResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__addFlexorResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__addFlexorResponse*)p = *(_ns1__addFlexorResponse*)q;
		break;
	case SOAP_TYPE__ns1__removeFlexor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__removeFlexor type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__removeFlexor*)p = *(_ns1__removeFlexor*)q;
		break;
	case SOAP_TYPE__ns1__removeFlexorResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__removeFlexorResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__removeFlexorResponse*)p = *(_ns1__removeFlexorResponse*)q;
		break;
	case SOAP_TYPE__ns1__calibrateFlexors:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__calibrateFlexors type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__calibrateFlexors*)p = *(_ns1__calibrateFlexors*)q;
		break;
	case SOAP_TYPE__ns1__calibrateFlexorsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__calibrateFlexorsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__calibrateFlexorsResponse*)p = *(_ns1__calibrateFlexorsResponse*)q;
		break;
	case SOAP_TYPE__ns1__confirmCalibration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__confirmCalibration type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__confirmCalibration*)p = *(_ns1__confirmCalibration*)q;
		break;
	case SOAP_TYPE__ns1__confirmCalibrationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__confirmCalibrationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__confirmCalibrationResponse*)p = *(_ns1__confirmCalibrationResponse*)q;
		break;
	case SOAP_TYPE__ns1__setThreshold:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__setThreshold type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__setThreshold*)p = *(_ns1__setThreshold*)q;
		break;
	case SOAP_TYPE__ns1__setThresholdResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__setThresholdResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__setThresholdResponse*)p = *(_ns1__setThresholdResponse*)q;
		break;
	case SOAP_TYPE__ns1__resetFlexors:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__resetFlexors type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__resetFlexors*)p = *(_ns1__resetFlexors*)q;
		break;
	case SOAP_TYPE__ns1__resetFlexorsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__resetFlexorsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__resetFlexorsResponse*)p = *(_ns1__resetFlexorsResponse*)q;
		break;
	case SOAP_TYPE__ns1__startIMU:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__startIMU type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__startIMU*)p = *(_ns1__startIMU*)q;
		break;
	case SOAP_TYPE__ns1__startIMUResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__startIMUResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__startIMUResponse*)p = *(_ns1__startIMUResponse*)q;
		break;
	case SOAP_TYPE__ns1__setIMUStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__setIMUStatus type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__setIMUStatus*)p = *(_ns1__setIMUStatus*)q;
		break;
	case SOAP_TYPE__ns1__setIMUStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__setIMUStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__setIMUStatusResponse*)p = *(_ns1__setIMUStatusResponse*)q;
		break;
	case SOAP_TYPE__ns1__setRawData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__setRawData type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__setRawData*)p = *(_ns1__setRawData*)q;
		break;
	case SOAP_TYPE__ns1__setRawDataResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__setRawDataResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__setRawDataResponse*)p = *(_ns1__setRawDataResponse*)q;
		break;
	case SOAP_TYPE_ns4__ArrayOfGlove:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__ArrayOfGlove type=%d location=%p object=%p\n", t, p, q));
		*(ns4__ArrayOfGlove*)p = *(ns4__ArrayOfGlove*)q;
		break;
	case SOAP_TYPE_ns4__Glove:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__Glove type=%d location=%p object=%p\n", t, p, q));
		*(ns4__Glove*)p = *(ns4__Glove*)q;
		break;
	case SOAP_TYPE_ns4__Glove_x002eConfiguration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__Glove_x002eConfiguration type=%d location=%p object=%p\n", t, p, q));
		*(ns4__Glove_x002eConfiguration*)p = *(ns4__Glove_x002eConfiguration*)q;
		break;
	case SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__Glove_x002eConfiguration_x002eProfile type=%d location=%p object=%p\n", t, p, q));
		*(ns4__Glove_x002eConfiguration_x002eProfile*)p = *(ns4__Glove_x002eConfiguration_x002eProfile*)q;
		break;
	case SOAP_TYPE_ns5__ArrayOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns5__ArrayOfint type=%d location=%p object=%p\n", t, p, q));
		*(ns5__ArrayOfint*)p = *(ns5__ArrayOfint*)q;
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns5__ArrayOfstring type=%d location=%p object=%p\n", t, p, q));
		*(ns5__ArrayOfstring*)p = *(ns5__ArrayOfstring*)q;
		break;
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint*)p = *(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint*)q;
		break;
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfintint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns5__ArrayOfKeyValueOfintint type=%d location=%p object=%p\n", t, p, q));
		*(ns5__ArrayOfKeyValueOfintint*)p = *(ns5__ArrayOfKeyValueOfintint*)q;
		break;
	case SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring*)p = *(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring*)q;
		break;
	case SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns5__ArrayOfKeyValueOfstringstring type=%d location=%p object=%p\n", t, p, q));
		*(ns5__ArrayOfKeyValueOfstringstring*)p = *(ns5__ArrayOfKeyValueOfstringstring*)q;
		break;
	case SOAP_TYPE___ns1__GetGloves:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetGloves type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetGloves*)p = *(struct __ns1__GetGloves*)q;
		break;
	case SOAP_TYPE___ns1__RefreshGloves:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__RefreshGloves type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__RefreshGloves*)p = *(struct __ns1__RefreshGloves*)q;
		break;
	case SOAP_TYPE___ns1__SaveGlove:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__SaveGlove type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__SaveGlove*)p = *(struct __ns1__SaveGlove*)q;
		break;
	case SOAP_TYPE___ns1__Activate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Activate type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Activate*)p = *(struct __ns1__Activate*)q;
		break;
	case SOAP_TYPE___ns1__Connect:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Connect type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Connect*)p = *(struct __ns1__Connect*)q;
		break;
	case SOAP_TYPE___ns1__Disconnect:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Disconnect type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Disconnect*)p = *(struct __ns1__Disconnect*)q;
		break;
	case SOAP_TYPE___ns1__ActivateMany:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ActivateMany type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ActivateMany*)p = *(struct __ns1__ActivateMany*)q;
		break;
	case SOAP_TYPE___ns1__addFlexor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__addFlexor type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__addFlexor*)p = *(struct __ns1__addFlexor*)q;
		break;
	case SOAP_TYPE___ns1__removeFlexor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__removeFlexor type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__removeFlexor*)p = *(struct __ns1__removeFlexor*)q;
		break;
	case SOAP_TYPE___ns1__calibrateFlexors:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__calibrateFlexors type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__calibrateFlexors*)p = *(struct __ns1__calibrateFlexors*)q;
		break;
	case SOAP_TYPE___ns1__confirmCalibration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__confirmCalibration type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__confirmCalibration*)p = *(struct __ns1__confirmCalibration*)q;
		break;
	case SOAP_TYPE___ns1__setThreshold:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__setThreshold type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__setThreshold*)p = *(struct __ns1__setThreshold*)q;
		break;
	case SOAP_TYPE___ns1__resetFlexors:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__resetFlexors type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__resetFlexors*)p = *(struct __ns1__resetFlexors*)q;
		break;
	case SOAP_TYPE___ns1__startIMU:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__startIMU type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__startIMU*)p = *(struct __ns1__startIMU*)q;
		break;
	case SOAP_TYPE___ns1__setIMUStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__setIMUStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__setIMUStatus*)p = *(struct __ns1__setIMUStatus*)q;
		break;
	case SOAP_TYPE___ns1__setRawData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__setRawData type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__setRawData*)p = *(struct __ns1__setRawData*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__QName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__ID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__IDREF:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__decimal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns3__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns3__guid:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_xsd__byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_xsd__byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__byte(soap, tag ? tag : "xsd:byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	a = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return a;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n)
{
	short *a = static_cast<short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(short)));
	for (short *p = a; p && n--; ++p)
		soap_default_short(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	if (soap_out_short(soap, tag ? tag : "short", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ns3__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ns3__char);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_ns3__char(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_ns3__char(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ns3__char(soap, tag ? tag : "ns3:char", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	a = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return a;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n)
{
	LONG64 *a = static_cast<LONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(LONG64)));
	for (LONG64 *p = a; p && n--; ++p)
		soap_default_LONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	if (soap_out_LONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	a = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return a;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n)
{
	float *a = static_cast<float *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(float)));
	for (float *p = a; p && n--; ++p)
		soap_default_float(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	if (soap_out_float(soap, tag ? tag : "float", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_xsd__unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_xsd__unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__unsignedByte(soap, tag ? tag : "xsd:unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{
	a = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return a;
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n)
{
	unsigned short *a = static_cast<unsigned short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned short)));
	for (unsigned short *p = a; p && n--; ++p)
		soap_default_unsignedShort(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	if (soap_out_unsignedShort(soap, tag ? tag : "unsignedShort", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_ULONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	a = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_ULONG64);
	return a;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n)
{
	ULONG64 *a = static_cast<ULONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(ULONG64)));
	for (ULONG64 *p = a; p && n--; ++p)
		soap_default_ULONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	if (soap_out_ULONG64(soap, tag ? tag : "unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ULONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns4__Side[] =
{	{ (LONG64)ns4__Side__Right, "Right" },
	{ (LONG64)ns4__Side__Left, "Left" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__Side2s(struct soap *soap, enum ns4__Side n)
{	const char *s = soap_code_str(soap_codes_ns4__Side, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Side(struct soap *soap, const char *tag, int id, const enum ns4__Side *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__Side), type) || soap_send(soap, soap_ns4__Side2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__Side(struct soap *soap, const char *s, enum ns4__Side *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns4__Side, s);
	if (map)
		*a = (enum ns4__Side)map->code;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (enum ns4__Side)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns4__Side * SOAP_FMAC4 soap_in_ns4__Side(struct soap *soap, const char *tag, enum ns4__Side *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns4__Side *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__Side, sizeof(enum ns4__Side), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2ns4__Side(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns4__Side *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__Side, SOAP_TYPE_ns4__Side, sizeof(enum ns4__Side), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns4__Side * SOAP_FMAC4 soap_new_ns4__Side(struct soap *soap, int n)
{
	enum ns4__Side *a = static_cast<enum ns4__Side *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns4__Side)));
	for (enum ns4__Side *p = a; p && n--; ++p)
		soap_default_ns4__Side(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__Side(struct soap *soap, const enum ns4__Side *a, const char *tag, const char *type)
{
	if (soap_out_ns4__Side(soap, tag ? tag : "ns4:Side", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns4__Side * SOAP_FMAC4 soap_get_ns4__Side(struct soap *soap, enum ns4__Side *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__Side(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key = NULL;
	this->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value = NULL;
}

void _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value);
#endif
}

int _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *tag, int id, const _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring), type))
		return soap->error;
	if (!a->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key)
	{	if (soap_element_nil(soap, "ns5:Key"))
			return soap->error;
	}
	else
	if (soap_out_PointerTostd__string(soap, "ns5:Key", -1, &a->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key, ""))
		return soap->error;
	if (!a->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value)
	{	if (soap_element_nil(soap, "ns5:Value"))
			return soap->error;
	}
	else
	if (soap_out_PointerTostd__string(soap, "ns5:Value", -1, &a->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC4 soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *tag, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Key", &a->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key, "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Value", &a->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value, "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0 || soap_flag_Value1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC2 soap_instantiate__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *p;
	size_t k = sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring);
	if (n < 0)
	{	p = SOAP_NEW(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring);
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag ? tag : "ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC4 soap_get__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Key);
	soap_default_int(soap, &this->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Value);
}

void _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Key, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Value, SOAP_TYPE_int);
#endif
}

int _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const char *tag, int id, const _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint), type))
		return soap->error;
	if (soap_out_int(soap, "ns5:Key", -1, &a->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Key, ""))
		return soap->error;
	if (soap_out_int(soap, "ns5:Value", -1, &a->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * SOAP_FMAC4 soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const char *tag, _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns5:Key", &a->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Key, "xsd:int"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns5:Value", &a->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Value, "xsd:int"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0 || soap_flag_Value1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * SOAP_FMAC2 soap_instantiate__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *p;
	size_t k = sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint);
	if (n < 0)
	{	p = SOAP_NEW(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint);
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag ? tag : "ns5:ArrayOfKeyValueOfintint-KeyValueOfintint", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * SOAP_FMAC4 soap_get__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__Side_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns4__Side(soap, &this->ns4__Side_::__item);
}

void ns4__Side_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns4__Side_::__item, SOAP_TYPE_ns4__Side);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__Side_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__Side_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Side_(struct soap *soap, const char *tag, int id, const ns4__Side_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns4__Side(soap, tag, id, &a->ns4__Side_::__item, "ns4:Side");
}

void *ns4__Side_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__Side_(soap, tag, this, type);
}

SOAP_FMAC3 ns4__Side_ * SOAP_FMAC4 soap_in_ns4__Side_(struct soap *soap, const char *tag, ns4__Side_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__Side_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__Side_, sizeof(ns4__Side_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__Side_)
		return (ns4__Side_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns4__Side(soap, tag, &a->ns4__Side_::__item, "ns4:Side"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns4__Side_ * SOAP_FMAC2 soap_instantiate_ns4__Side_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__Side_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__Side_ *p;
	size_t k = sizeof(ns4__Side_);
	if (n < 0)
	{	p = SOAP_NEW(ns4__Side_);
		if (p)
			((ns4__Side_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns4__Side_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns4__Side_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__Side_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns4__Side_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns4__Side_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__Side_(soap, tag ? tag : "ns4:Side", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__Side_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__Side_(soap, this, tag, type);
}

SOAP_FMAC3 ns4__Side_ * SOAP_FMAC4 soap_get_ns4__Side_(struct soap *soap, ns4__Side_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__Side_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__guid(soap, &this->ns3__guid__::__item);
}

void ns3__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns3__guid(soap, &this->ns3__guid__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap *soap, const char *tag, int id, const ns3__guid__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__guid(soap, tag, id, &a->ns3__guid__::__item, "ns3:guid");
}

void *ns3__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__guid__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap *soap, const char *tag, ns3__guid__ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__guid__ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__guid__, sizeof(ns3__guid__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__guid__)
		return (ns3__guid__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns3__guid(soap, tag, &a->ns3__guid__::__item, "ns3:guid"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__guid__(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__guid__ *p;
	size_t k = sizeof(ns3__guid__);
	if (n < 0)
	{	p = SOAP_NEW(ns3__guid__);
		if (p)
			((ns3__guid__*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__guid__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__guid__*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__guid__ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__guid__, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__guid__(soap, tag ? tag : "ns3:guid", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__guid__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap *soap, ns3__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__guid(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns3__guid), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__guid(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__guid, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__guid, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns3__guid, SOAP_TYPE_ns3__guid, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns3__guid(soap, tag ? tag : "ns3:guid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__guid(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__duration(soap, &this->ns3__duration__::__item);
}

void ns3__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns3__duration(soap, &this->ns3__duration__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap *soap, const char *tag, int id, const ns3__duration__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__duration(soap, tag, id, &a->ns3__duration__::__item, "ns3:duration");
}

void *ns3__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__duration__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap *soap, const char *tag, ns3__duration__ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__duration__ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__duration__, sizeof(ns3__duration__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__duration__)
		return (ns3__duration__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns3__duration(soap, tag, &a->ns3__duration__::__item, "ns3:duration"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__duration__(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__duration__ *p;
	size_t k = sizeof(ns3__duration__);
	if (n < 0)
	{	p = SOAP_NEW(ns3__duration__);
		if (p)
			((ns3__duration__*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__duration__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__duration__*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__duration__ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__duration__, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__duration__(soap, tag ? tag : "ns3:duration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__duration__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap *soap, ns3__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns3__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns3__duration, SOAP_TYPE_ns3__duration, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns3__duration(soap, tag ? tag : "ns3:duration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__char(soap, &this->ns3__char__::__item);
}

void ns3__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap *soap, const char *tag, int id, const ns3__char__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__char(soap, tag, id, &a->ns3__char__::__item, "ns3:char");
}

void *ns3__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__char__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap *soap, const char *tag, ns3__char__ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__char__ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__char__, sizeof(ns3__char__), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__char__)
		return (ns3__char__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns3__char(soap, tag, &a->ns3__char__::__item, "ns3:char"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__char__(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__char__ *p;
	size_t k = sizeof(ns3__char__);
	if (n < 0)
	{	p = SOAP_NEW(ns3__char__);
		if (p)
			((ns3__char__*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__char__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__char__*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__char__ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__char__, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__char__(soap, tag ? tag : "ns3:char", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__char__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap *soap, ns3__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns5__ArrayOfKeyValueOfstringstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns5__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring = NULL;
}

void ns5__ArrayOfKeyValueOfstringstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, &this->ns5__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns5__ArrayOfKeyValueOfstringstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfKeyValueOfstringstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *tag, int id, const ns5__ArrayOfKeyValueOfstringstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring), type ? type : "ns5:ArrayOfKeyValueOfstringstring"))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, "ns5:KeyValueOfstringstring", -1, &a->ns5__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfKeyValueOfstringstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfKeyValueOfstringstring(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring * SOAP_FMAC4 soap_in_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *tag, ns5__ArrayOfKeyValueOfstringstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfKeyValueOfstringstring *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring, sizeof(ns5__ArrayOfKeyValueOfstringstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns5__ArrayOfKeyValueOfstringstring *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, "ns5:KeyValueOfstringstring", &a->ns5__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring, ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfKeyValueOfstringstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring, sizeof(ns5__ArrayOfKeyValueOfstringstring), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns5__ArrayOfKeyValueOfstringstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns5__ArrayOfKeyValueOfstringstring *p;
	size_t k = sizeof(ns5__ArrayOfKeyValueOfstringstring);
	if (n < 0)
	{	p = SOAP_NEW(ns5__ArrayOfKeyValueOfstringstring);
		if (p)
			((ns5__ArrayOfKeyValueOfstringstring*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns5__ArrayOfKeyValueOfstringstring, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfKeyValueOfstringstring*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns5__ArrayOfKeyValueOfstringstring location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns5__ArrayOfKeyValueOfstringstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns5__ArrayOfKeyValueOfstringstring(soap, tag ? tag : "ns5:ArrayOfKeyValueOfstringstring", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfKeyValueOfstringstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfKeyValueOfstringstring(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring * SOAP_FMAC4 soap_get_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, ns5__ArrayOfKeyValueOfstringstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfKeyValueOfstringstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns5__ArrayOfKeyValueOfintint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns5__ArrayOfKeyValueOfintint::KeyValueOfintint = NULL;
}

void ns5__ArrayOfKeyValueOfintint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, &this->ns5__ArrayOfKeyValueOfintint::KeyValueOfintint);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns5__ArrayOfKeyValueOfintint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfKeyValueOfintint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfKeyValueOfintint(struct soap *soap, const char *tag, int id, const ns5__ArrayOfKeyValueOfintint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint), type ? type : "ns5:ArrayOfKeyValueOfintint"))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, "ns5:KeyValueOfintint", -1, &a->ns5__ArrayOfKeyValueOfintint::KeyValueOfintint, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfKeyValueOfintint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfKeyValueOfintint(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint * SOAP_FMAC4 soap_in_ns5__ArrayOfKeyValueOfintint(struct soap *soap, const char *tag, ns5__ArrayOfKeyValueOfintint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfKeyValueOfintint *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint, sizeof(ns5__ArrayOfKeyValueOfintint), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns5__ArrayOfKeyValueOfintint)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns5__ArrayOfKeyValueOfintint *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, "ns5:KeyValueOfintint", &a->ns5__ArrayOfKeyValueOfintint::KeyValueOfintint, ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfKeyValueOfintint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint, sizeof(ns5__ArrayOfKeyValueOfintint), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns5__ArrayOfKeyValueOfintint * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfKeyValueOfintint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfKeyValueOfintint(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns5__ArrayOfKeyValueOfintint *p;
	size_t k = sizeof(ns5__ArrayOfKeyValueOfintint);
	if (n < 0)
	{	p = SOAP_NEW(ns5__ArrayOfKeyValueOfintint);
		if (p)
			((ns5__ArrayOfKeyValueOfintint*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns5__ArrayOfKeyValueOfintint, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfKeyValueOfintint*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns5__ArrayOfKeyValueOfintint location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns5__ArrayOfKeyValueOfintint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns5__ArrayOfKeyValueOfintint(soap, tag ? tag : "ns5:ArrayOfKeyValueOfintint", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfKeyValueOfintint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfKeyValueOfintint(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint * SOAP_FMAC4 soap_get_ns5__ArrayOfKeyValueOfintint(struct soap *soap, ns5__ArrayOfKeyValueOfintint *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfKeyValueOfintint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns5__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns5__ArrayOfstring::string);
}

void ns5__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns5__ArrayOfstring::string);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns5__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfstring(struct soap *soap, const char *tag, int id, const ns5__ArrayOfstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfstring), type ? type : "ns5:ArrayOfstring"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns5:string", -1, &a->ns5__ArrayOfstring::string, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_in_ns5__ArrayOfstring(struct soap *soap, const char *tag, ns5__ArrayOfstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfstring *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns5__ArrayOfstring)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns5__ArrayOfstring *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ns5:string", &a->ns5__ArrayOfstring::string, "xsd:string"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfstring, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns5__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfstring(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns5__ArrayOfstring *p;
	size_t k = sizeof(ns5__ArrayOfstring);
	if (n < 0)
	{	p = SOAP_NEW(ns5__ArrayOfstring);
		if (p)
			((ns5__ArrayOfstring*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns5__ArrayOfstring, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfstring*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns5__ArrayOfstring location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns5__ArrayOfstring, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns5__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns5__ArrayOfstring(soap, tag ? tag : "ns5:ArrayOfstring", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_get_ns5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns5__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfint(soap, &this->ns5__ArrayOfint::int_);
}

void ns5__ArrayOfint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfint(soap, &this->ns5__ArrayOfint::int_);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns5__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfint(struct soap *soap, const char *tag, int id, const ns5__ArrayOfint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfint), type ? type : "ns5:ArrayOfint"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "ns5:int", -1, &a->ns5__ArrayOfint::int_, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfint * SOAP_FMAC4 soap_in_ns5__ArrayOfint(struct soap *soap, const char *tag, ns5__ArrayOfint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfint *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfint, sizeof(ns5__ArrayOfint), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns5__ArrayOfint)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns5__ArrayOfint *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "ns5:int", &a->ns5__ArrayOfint::int_, "xsd:int"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfint, SOAP_TYPE_ns5__ArrayOfint, sizeof(ns5__ArrayOfint), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns5__ArrayOfint * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfint(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns5__ArrayOfint *p;
	size_t k = sizeof(ns5__ArrayOfint);
	if (n < 0)
	{	p = SOAP_NEW(ns5__ArrayOfint);
		if (p)
			((ns5__ArrayOfint*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns5__ArrayOfint, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfint*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns5__ArrayOfint location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns5__ArrayOfint, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns5__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns5__ArrayOfint(soap, tag ? tag : "ns5:ArrayOfint", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfint * SOAP_FMAC4 soap_get_ns5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__Glove_x002eConfiguration_x002eProfile::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__Glove_x002eConfiguration_x002eProfile::AreaCount = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsMappings = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsThreshold = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::GloveHash = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::Mappings = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::ProfileName = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::imuCalibrationStatus = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::imuModel = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::imuStatus = NULL;
	this->ns4__Glove_x002eConfiguration_x002eProfile::rawData = NULL;
}

void ns4__Glove_x002eConfiguration_x002eProfile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::AreaCount);
	soap_serialize_PointerTons5__ArrayOfKeyValueOfintint(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsMappings);
	soap_serialize_PointerToint(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsThreshold);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::GloveHash);
	soap_serialize_PointerTons5__ArrayOfKeyValueOfstringstring(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::Mappings);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::ProfileName);
	soap_serialize_PointerTobool(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::imuCalibrationStatus);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::imuModel);
	soap_serialize_PointerTobool(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::imuStatus);
	soap_serialize_PointerTobool(soap, &this->ns4__Glove_x002eConfiguration_x002eProfile::rawData);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__Glove_x002eConfiguration_x002eProfile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__Glove_x002eConfiguration_x002eProfile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, const char *tag, int id, const ns4__Glove_x002eConfiguration_x002eProfile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile), type ? type : "ns4:Glove.Configuration.Profile"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns4:AreaCount", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::AreaCount, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfKeyValueOfintint(soap, "ns4:FlexorsMappings", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsMappings, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns4:FlexorsThreshold", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsThreshold, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:GloveHash", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::GloveHash, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfKeyValueOfstringstring(soap, "ns4:Mappings", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::Mappings, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:ProfileName", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::ProfileName, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:imuCalibrationStatus", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::imuCalibrationStatus, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:imuModel", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::imuModel, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:imuStatus", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::imuStatus, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:rawData", -1, &a->ns4__Glove_x002eConfiguration_x002eProfile::rawData, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__Glove_x002eConfiguration_x002eProfile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__Glove_x002eConfiguration_x002eProfile(soap, tag, this, type);
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile * SOAP_FMAC4 soap_in_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, const char *tag, ns4__Glove_x002eConfiguration_x002eProfile *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__Glove_x002eConfiguration_x002eProfile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile, sizeof(ns4__Glove_x002eConfiguration_x002eProfile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns4__Glove_x002eConfiguration_x002eProfile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_AreaCount1 = 1;
	size_t soap_flag_FlexorsMappings1 = 1;
	size_t soap_flag_FlexorsThreshold1 = 1;
	size_t soap_flag_GloveHash1 = 1;
	size_t soap_flag_Mappings1 = 1;
	size_t soap_flag_ProfileName1 = 1;
	size_t soap_flag_imuCalibrationStatus1 = 1;
	size_t soap_flag_imuModel1 = 1;
	size_t soap_flag_imuStatus1 = 1;
	size_t soap_flag_rawData1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AreaCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns4:AreaCount", &a->ns4__Glove_x002eConfiguration_x002eProfile::AreaCount, "xsd:int"))
				{	soap_flag_AreaCount1--;
					continue;
				}
			if (soap_flag_FlexorsMappings1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfKeyValueOfintint(soap, "ns4:FlexorsMappings", &a->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsMappings, "ns5:ArrayOfKeyValueOfintint"))
				{	soap_flag_FlexorsMappings1--;
					continue;
				}
			if (soap_flag_FlexorsThreshold1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns4:FlexorsThreshold", &a->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsThreshold, "xsd:int"))
				{	soap_flag_FlexorsThreshold1--;
					continue;
				}
			if (soap_flag_GloveHash1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:GloveHash", &a->ns4__Glove_x002eConfiguration_x002eProfile::GloveHash, "xsd:string"))
				{	soap_flag_GloveHash1--;
					continue;
				}
			if (soap_flag_Mappings1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfKeyValueOfstringstring(soap, "ns4:Mappings", &a->ns4__Glove_x002eConfiguration_x002eProfile::Mappings, "ns5:ArrayOfKeyValueOfstringstring"))
				{	soap_flag_Mappings1--;
					continue;
				}
			if (soap_flag_ProfileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:ProfileName", &a->ns4__Glove_x002eConfiguration_x002eProfile::ProfileName, "xsd:string"))
				{	soap_flag_ProfileName1--;
					continue;
				}
			if (soap_flag_imuCalibrationStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:imuCalibrationStatus", &a->ns4__Glove_x002eConfiguration_x002eProfile::imuCalibrationStatus, "xsd:boolean"))
				{	soap_flag_imuCalibrationStatus1--;
					continue;
				}
			if (soap_flag_imuModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:imuModel", &a->ns4__Glove_x002eConfiguration_x002eProfile::imuModel, "xsd:string"))
				{	soap_flag_imuModel1--;
					continue;
				}
			if (soap_flag_imuStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:imuStatus", &a->ns4__Glove_x002eConfiguration_x002eProfile::imuStatus, "xsd:boolean"))
				{	soap_flag_imuStatus1--;
					continue;
				}
			if (soap_flag_rawData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:rawData", &a->ns4__Glove_x002eConfiguration_x002eProfile::rawData, "xsd:boolean"))
				{	soap_flag_rawData1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__Glove_x002eConfiguration_x002eProfile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile, sizeof(ns4__Glove_x002eConfiguration_x002eProfile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns4__Glove_x002eConfiguration_x002eProfile * SOAP_FMAC2 soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__Glove_x002eConfiguration_x002eProfile *p;
	size_t k = sizeof(ns4__Glove_x002eConfiguration_x002eProfile);
	if (n < 0)
	{	p = SOAP_NEW(ns4__Glove_x002eConfiguration_x002eProfile);
		if (p)
			((ns4__Glove_x002eConfiguration_x002eProfile*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns4__Glove_x002eConfiguration_x002eProfile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns4__Glove_x002eConfiguration_x002eProfile*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__Glove_x002eConfiguration_x002eProfile location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns4__Glove_x002eConfiguration_x002eProfile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__Glove_x002eConfiguration_x002eProfile(soap, tag ? tag : "ns4:Glove.Configuration.Profile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__Glove_x002eConfiguration_x002eProfile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__Glove_x002eConfiguration_x002eProfile(soap, this, tag, type);
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile * SOAP_FMAC4 soap_get_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, ns4__Glove_x002eConfiguration_x002eProfile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__Glove_x002eConfiguration_x002eProfile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__Glove_x002eConfiguration::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__Glove_x002eConfiguration::AllowedBaudRates = NULL;
	this->ns4__Glove_x002eConfiguration::BaudRate = NULL;
	this->ns4__Glove_x002eConfiguration::FlexInit = NULL;
	this->ns4__Glove_x002eConfiguration::FlexPins = NULL;
	this->ns4__Glove_x002eConfiguration::GloveHash = NULL;
	this->ns4__Glove_x002eConfiguration::GloveName = NULL;
	this->ns4__Glove_x002eConfiguration::GloveProfile = NULL;
	this->ns4__Glove_x002eConfiguration::NegativeInit = NULL;
	this->ns4__Glove_x002eConfiguration::NegativePins = NULL;
	this->ns4__Glove_x002eConfiguration::PositiveInit = NULL;
	this->ns4__Glove_x002eConfiguration::PositivePins = NULL;
}

void ns4__Glove_x002eConfiguration::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->ns4__Glove_x002eConfiguration::AllowedBaudRates);
	soap_serialize_PointerToint(soap, &this->ns4__Glove_x002eConfiguration::BaudRate);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->ns4__Glove_x002eConfiguration::FlexInit);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->ns4__Glove_x002eConfiguration::FlexPins);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove_x002eConfiguration::GloveHash);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove_x002eConfiguration::GloveName);
	soap_serialize_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, &this->ns4__Glove_x002eConfiguration::GloveProfile);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->ns4__Glove_x002eConfiguration::NegativeInit);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->ns4__Glove_x002eConfiguration::NegativePins);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->ns4__Glove_x002eConfiguration::PositiveInit);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->ns4__Glove_x002eConfiguration::PositivePins);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__Glove_x002eConfiguration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__Glove_x002eConfiguration(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Glove_x002eConfiguration(struct soap *soap, const char *tag, int id, const ns4__Glove_x002eConfiguration *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__Glove_x002eConfiguration), type ? type : "ns4:Glove.Configuration"))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns4:AllowedBaudRates", -1, &a->ns4__Glove_x002eConfiguration::AllowedBaudRates, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns4:BaudRate", -1, &a->ns4__Glove_x002eConfiguration::BaudRate, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns4:FlexInit", -1, &a->ns4__Glove_x002eConfiguration::FlexInit, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns4:FlexPins", -1, &a->ns4__Glove_x002eConfiguration::FlexPins, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:GloveHash", -1, &a->ns4__Glove_x002eConfiguration::GloveHash, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:GloveName", -1, &a->ns4__Glove_x002eConfiguration::GloveName, ""))
		return soap->error;
	if (soap_out_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, "ns4:GloveProfile", -1, &a->ns4__Glove_x002eConfiguration::GloveProfile, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns4:NegativeInit", -1, &a->ns4__Glove_x002eConfiguration::NegativeInit, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns4:NegativePins", -1, &a->ns4__Glove_x002eConfiguration::NegativePins, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns4:PositiveInit", -1, &a->ns4__Glove_x002eConfiguration::PositiveInit, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns4:PositivePins", -1, &a->ns4__Glove_x002eConfiguration::PositivePins, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__Glove_x002eConfiguration::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__Glove_x002eConfiguration(soap, tag, this, type);
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration * SOAP_FMAC4 soap_in_ns4__Glove_x002eConfiguration(struct soap *soap, const char *tag, ns4__Glove_x002eConfiguration *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__Glove_x002eConfiguration *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__Glove_x002eConfiguration, sizeof(ns4__Glove_x002eConfiguration), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__Glove_x002eConfiguration)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns4__Glove_x002eConfiguration *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_AllowedBaudRates1 = 1;
	size_t soap_flag_BaudRate1 = 1;
	size_t soap_flag_FlexInit1 = 1;
	size_t soap_flag_FlexPins1 = 1;
	size_t soap_flag_GloveHash1 = 1;
	size_t soap_flag_GloveName1 = 1;
	size_t soap_flag_GloveProfile1 = 1;
	size_t soap_flag_NegativeInit1 = 1;
	size_t soap_flag_NegativePins1 = 1;
	size_t soap_flag_PositiveInit1 = 1;
	size_t soap_flag_PositivePins1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AllowedBaudRates1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns4:AllowedBaudRates", &a->ns4__Glove_x002eConfiguration::AllowedBaudRates, "ns5:ArrayOfint"))
				{	soap_flag_AllowedBaudRates1--;
					continue;
				}
			if (soap_flag_BaudRate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns4:BaudRate", &a->ns4__Glove_x002eConfiguration::BaudRate, "xsd:int"))
				{	soap_flag_BaudRate1--;
					continue;
				}
			if (soap_flag_FlexInit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns4:FlexInit", &a->ns4__Glove_x002eConfiguration::FlexInit, "ns5:ArrayOfstring"))
				{	soap_flag_FlexInit1--;
					continue;
				}
			if (soap_flag_FlexPins1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns4:FlexPins", &a->ns4__Glove_x002eConfiguration::FlexPins, "ns5:ArrayOfint"))
				{	soap_flag_FlexPins1--;
					continue;
				}
			if (soap_flag_GloveHash1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:GloveHash", &a->ns4__Glove_x002eConfiguration::GloveHash, "xsd:string"))
				{	soap_flag_GloveHash1--;
					continue;
				}
			if (soap_flag_GloveName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:GloveName", &a->ns4__Glove_x002eConfiguration::GloveName, "xsd:string"))
				{	soap_flag_GloveName1--;
					continue;
				}
			if (soap_flag_GloveProfile1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, "ns4:GloveProfile", &a->ns4__Glove_x002eConfiguration::GloveProfile, "ns4:Glove.Configuration.Profile"))
				{	soap_flag_GloveProfile1--;
					continue;
				}
			if (soap_flag_NegativeInit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns4:NegativeInit", &a->ns4__Glove_x002eConfiguration::NegativeInit, "ns5:ArrayOfstring"))
				{	soap_flag_NegativeInit1--;
					continue;
				}
			if (soap_flag_NegativePins1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns4:NegativePins", &a->ns4__Glove_x002eConfiguration::NegativePins, "ns5:ArrayOfint"))
				{	soap_flag_NegativePins1--;
					continue;
				}
			if (soap_flag_PositiveInit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns4:PositiveInit", &a->ns4__Glove_x002eConfiguration::PositiveInit, "ns5:ArrayOfstring"))
				{	soap_flag_PositiveInit1--;
					continue;
				}
			if (soap_flag_PositivePins1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns4:PositivePins", &a->ns4__Glove_x002eConfiguration::PositivePins, "ns5:ArrayOfint"))
				{	soap_flag_PositivePins1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__Glove_x002eConfiguration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__Glove_x002eConfiguration, SOAP_TYPE_ns4__Glove_x002eConfiguration, sizeof(ns4__Glove_x002eConfiguration), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns4__Glove_x002eConfiguration * SOAP_FMAC2 soap_instantiate_ns4__Glove_x002eConfiguration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__Glove_x002eConfiguration(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__Glove_x002eConfiguration *p;
	size_t k = sizeof(ns4__Glove_x002eConfiguration);
	if (n < 0)
	{	p = SOAP_NEW(ns4__Glove_x002eConfiguration);
		if (p)
			((ns4__Glove_x002eConfiguration*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns4__Glove_x002eConfiguration, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns4__Glove_x002eConfiguration*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__Glove_x002eConfiguration location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns4__Glove_x002eConfiguration, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns4__Glove_x002eConfiguration::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__Glove_x002eConfiguration(soap, tag ? tag : "ns4:Glove.Configuration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__Glove_x002eConfiguration::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__Glove_x002eConfiguration(soap, this, tag, type);
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration * SOAP_FMAC4 soap_get_ns4__Glove_x002eConfiguration(struct soap *soap, ns4__Glove_x002eConfiguration *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__Glove_x002eConfiguration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__Glove::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__Glove::BluetoothAddress = NULL;
	this->ns4__Glove::Connected = NULL;
	this->ns4__Glove::GloveConfiguration = NULL;
	this->ns4__Glove::Name = NULL;
	this->ns4__Glove::Port = NULL;
	this->ns4__Glove::Side = NULL;
	this->ns4__Glove::WebSocketPort = NULL;
}

void ns4__Glove::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove::BluetoothAddress);
	soap_serialize_PointerTobool(soap, &this->ns4__Glove::Connected);
	soap_serialize_PointerTons4__Glove_x002eConfiguration(soap, &this->ns4__Glove::GloveConfiguration);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove::Name);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove::Port);
	soap_serialize_PointerTons4__Side(soap, &this->ns4__Glove::Side);
	soap_serialize_PointerTostd__string(soap, &this->ns4__Glove::WebSocketPort);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__Glove::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__Glove(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Glove(struct soap *soap, const char *tag, int id, const ns4__Glove *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__Glove), type ? type : "ns4:Glove"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:BluetoothAddress", -1, &a->ns4__Glove::BluetoothAddress, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:Connected", -1, &a->ns4__Glove::Connected, ""))
		return soap->error;
	if (soap_out_PointerTons4__Glove_x002eConfiguration(soap, "ns4:GloveConfiguration", -1, &a->ns4__Glove::GloveConfiguration, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:Name", -1, &a->ns4__Glove::Name, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:Port", -1, &a->ns4__Glove::Port, ""))
		return soap->error;
	if (soap_out_PointerTons4__Side(soap, "ns4:Side", -1, &a->ns4__Glove::Side, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:WebSocketPort", -1, &a->ns4__Glove::WebSocketPort, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__Glove::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__Glove(soap, tag, this, type);
}

SOAP_FMAC3 ns4__Glove * SOAP_FMAC4 soap_in_ns4__Glove(struct soap *soap, const char *tag, ns4__Glove *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__Glove *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__Glove, sizeof(ns4__Glove), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__Glove)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns4__Glove *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_BluetoothAddress1 = 1;
	size_t soap_flag_Connected1 = 1;
	size_t soap_flag_GloveConfiguration1 = 1;
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Port1 = 1;
	size_t soap_flag_Side1 = 1;
	size_t soap_flag_WebSocketPort1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_BluetoothAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:BluetoothAddress", &a->ns4__Glove::BluetoothAddress, "xsd:string"))
				{	soap_flag_BluetoothAddress1--;
					continue;
				}
			if (soap_flag_Connected1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:Connected", &a->ns4__Glove::Connected, "xsd:boolean"))
				{	soap_flag_Connected1--;
					continue;
				}
			if (soap_flag_GloveConfiguration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__Glove_x002eConfiguration(soap, "ns4:GloveConfiguration", &a->ns4__Glove::GloveConfiguration, "ns4:Glove.Configuration"))
				{	soap_flag_GloveConfiguration1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:Name", &a->ns4__Glove::Name, "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:Port", &a->ns4__Glove::Port, "xsd:string"))
				{	soap_flag_Port1--;
					continue;
				}
			if (soap_flag_Side1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__Side(soap, "ns4:Side", &a->ns4__Glove::Side, "ns4:Side"))
				{	soap_flag_Side1--;
					continue;
				}
			if (soap_flag_WebSocketPort1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:WebSocketPort", &a->ns4__Glove::WebSocketPort, "xsd:string"))
				{	soap_flag_WebSocketPort1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__Glove *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__Glove, SOAP_TYPE_ns4__Glove, sizeof(ns4__Glove), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns4__Glove * SOAP_FMAC2 soap_instantiate_ns4__Glove(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__Glove(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__Glove *p;
	size_t k = sizeof(ns4__Glove);
	if (n < 0)
	{	p = SOAP_NEW(ns4__Glove);
		if (p)
			((ns4__Glove*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns4__Glove, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns4__Glove*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__Glove location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns4__Glove, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns4__Glove::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__Glove(soap, tag ? tag : "ns4:Glove", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__Glove::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__Glove(soap, this, tag, type);
}

SOAP_FMAC3 ns4__Glove * SOAP_FMAC4 soap_get_ns4__Glove(struct soap *soap, ns4__Glove *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__Glove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__ArrayOfGlove::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTons4__Glove(soap, &this->ns4__ArrayOfGlove::Glove);
}

void ns4__ArrayOfGlove::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons4__Glove(soap, &this->ns4__ArrayOfGlove::Glove);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfGlove::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfGlove(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfGlove(struct soap *soap, const char *tag, int id, const ns4__ArrayOfGlove *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfGlove), type ? type : "ns4:ArrayOfGlove"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons4__Glove(soap, "ns4:Glove", -1, &a->ns4__ArrayOfGlove::Glove, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfGlove::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfGlove(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfGlove * SOAP_FMAC4 soap_in_ns4__ArrayOfGlove(struct soap *soap, const char *tag, ns4__ArrayOfGlove *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfGlove *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfGlove, sizeof(ns4__ArrayOfGlove), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__ArrayOfGlove)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns4__ArrayOfGlove *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons4__Glove(soap, "ns4:Glove", &a->ns4__ArrayOfGlove::Glove, "ns4:Glove"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfGlove *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfGlove, SOAP_TYPE_ns4__ArrayOfGlove, sizeof(ns4__ArrayOfGlove), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns4__ArrayOfGlove * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfGlove(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfGlove(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__ArrayOfGlove *p;
	size_t k = sizeof(ns4__ArrayOfGlove);
	if (n < 0)
	{	p = SOAP_NEW(ns4__ArrayOfGlove);
		if (p)
			((ns4__ArrayOfGlove*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns4__ArrayOfGlove, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfGlove*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__ArrayOfGlove location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns4__ArrayOfGlove, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns4__ArrayOfGlove::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__ArrayOfGlove(soap, tag ? tag : "ns4:ArrayOfGlove", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfGlove::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfGlove(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfGlove * SOAP_FMAC4 soap_get_ns4__ArrayOfGlove(struct soap *soap, ns4__ArrayOfGlove *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfGlove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__setRawDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__setRawDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__setRawDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setRawDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRawDataResponse(struct soap *soap, const char *tag, int id, const _ns1__setRawDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setRawDataResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__setRawDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setRawDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setRawDataResponse * SOAP_FMAC4 soap_in__ns1__setRawDataResponse(struct soap *soap, const char *tag, _ns1__setRawDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setRawDataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setRawDataResponse, sizeof(_ns1__setRawDataResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__setRawDataResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__setRawDataResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setRawDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setRawDataResponse, SOAP_TYPE__ns1__setRawDataResponse, sizeof(_ns1__setRawDataResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__setRawDataResponse * SOAP_FMAC2 soap_instantiate__ns1__setRawDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setRawDataResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__setRawDataResponse *p;
	size_t k = sizeof(_ns1__setRawDataResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__setRawDataResponse);
		if (p)
			((_ns1__setRawDataResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__setRawDataResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__setRawDataResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__setRawDataResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__setRawDataResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__setRawDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__setRawDataResponse(soap, tag ? tag : "ns1:setRawDataResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setRawDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setRawDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setRawDataResponse * SOAP_FMAC4 soap_get__ns1__setRawDataResponse(struct soap *soap, _ns1__setRawDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setRawDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__setRawData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setRawData::gloveAddress = NULL;
	this->_ns1__setRawData::value = NULL;
	/* transient soap skipped */
}

void _ns1__setRawData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__setRawData::gloveAddress);
	soap_serialize_PointerToint(soap, &this->_ns1__setRawData::value);
#endif
}

int _ns1__setRawData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setRawData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRawData(struct soap *soap, const char *tag, int id, const _ns1__setRawData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setRawData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__setRawData::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:value", -1, &a->_ns1__setRawData::value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__setRawData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setRawData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setRawData * SOAP_FMAC4 soap_in__ns1__setRawData(struct soap *soap, const char *tag, _ns1__setRawData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setRawData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setRawData, sizeof(_ns1__setRawData), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__setRawData)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__setRawData *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__setRawData::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:value", &a->_ns1__setRawData::value, "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setRawData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setRawData, SOAP_TYPE__ns1__setRawData, sizeof(_ns1__setRawData), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__setRawData * SOAP_FMAC2 soap_instantiate__ns1__setRawData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setRawData(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__setRawData *p;
	size_t k = sizeof(_ns1__setRawData);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__setRawData);
		if (p)
			((_ns1__setRawData*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__setRawData, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__setRawData*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__setRawData location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__setRawData, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__setRawData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__setRawData(soap, tag ? tag : "ns1:setRawData", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setRawData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setRawData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setRawData * SOAP_FMAC4 soap_get__ns1__setRawData(struct soap *soap, _ns1__setRawData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setRawData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__setIMUStatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__setIMUStatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__setIMUStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setIMUStatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setIMUStatusResponse(struct soap *soap, const char *tag, int id, const _ns1__setIMUStatusResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setIMUStatusResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__setIMUStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setIMUStatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setIMUStatusResponse * SOAP_FMAC4 soap_in__ns1__setIMUStatusResponse(struct soap *soap, const char *tag, _ns1__setIMUStatusResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setIMUStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setIMUStatusResponse, sizeof(_ns1__setIMUStatusResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__setIMUStatusResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__setIMUStatusResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setIMUStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setIMUStatusResponse, SOAP_TYPE__ns1__setIMUStatusResponse, sizeof(_ns1__setIMUStatusResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__setIMUStatusResponse * SOAP_FMAC2 soap_instantiate__ns1__setIMUStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setIMUStatusResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__setIMUStatusResponse *p;
	size_t k = sizeof(_ns1__setIMUStatusResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__setIMUStatusResponse);
		if (p)
			((_ns1__setIMUStatusResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__setIMUStatusResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__setIMUStatusResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__setIMUStatusResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__setIMUStatusResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__setIMUStatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__setIMUStatusResponse(soap, tag ? tag : "ns1:setIMUStatusResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setIMUStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setIMUStatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setIMUStatusResponse * SOAP_FMAC4 soap_get__ns1__setIMUStatusResponse(struct soap *soap, _ns1__setIMUStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setIMUStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__setIMUStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setIMUStatus::gloveAddress = NULL;
	this->_ns1__setIMUStatus::value = NULL;
	/* transient soap skipped */
}

void _ns1__setIMUStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__setIMUStatus::gloveAddress);
	soap_serialize_PointerToint(soap, &this->_ns1__setIMUStatus::value);
#endif
}

int _ns1__setIMUStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setIMUStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setIMUStatus(struct soap *soap, const char *tag, int id, const _ns1__setIMUStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setIMUStatus), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__setIMUStatus::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:value", -1, &a->_ns1__setIMUStatus::value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__setIMUStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setIMUStatus(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setIMUStatus * SOAP_FMAC4 soap_in__ns1__setIMUStatus(struct soap *soap, const char *tag, _ns1__setIMUStatus *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setIMUStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setIMUStatus, sizeof(_ns1__setIMUStatus), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__setIMUStatus)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__setIMUStatus *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__setIMUStatus::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:value", &a->_ns1__setIMUStatus::value, "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setIMUStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setIMUStatus, SOAP_TYPE__ns1__setIMUStatus, sizeof(_ns1__setIMUStatus), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__setIMUStatus * SOAP_FMAC2 soap_instantiate__ns1__setIMUStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setIMUStatus(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__setIMUStatus *p;
	size_t k = sizeof(_ns1__setIMUStatus);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__setIMUStatus);
		if (p)
			((_ns1__setIMUStatus*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__setIMUStatus, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__setIMUStatus*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__setIMUStatus location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__setIMUStatus, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__setIMUStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__setIMUStatus(soap, tag ? tag : "ns1:setIMUStatus", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setIMUStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setIMUStatus(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setIMUStatus * SOAP_FMAC4 soap_get__ns1__setIMUStatus(struct soap *soap, _ns1__setIMUStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setIMUStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__startIMUResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__startIMUResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__startIMUResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__startIMUResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__startIMUResponse(struct soap *soap, const char *tag, int id, const _ns1__startIMUResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__startIMUResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__startIMUResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__startIMUResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__startIMUResponse * SOAP_FMAC4 soap_in__ns1__startIMUResponse(struct soap *soap, const char *tag, _ns1__startIMUResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__startIMUResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__startIMUResponse, sizeof(_ns1__startIMUResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__startIMUResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__startIMUResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__startIMUResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__startIMUResponse, SOAP_TYPE__ns1__startIMUResponse, sizeof(_ns1__startIMUResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__startIMUResponse * SOAP_FMAC2 soap_instantiate__ns1__startIMUResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__startIMUResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__startIMUResponse *p;
	size_t k = sizeof(_ns1__startIMUResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__startIMUResponse);
		if (p)
			((_ns1__startIMUResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__startIMUResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__startIMUResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__startIMUResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__startIMUResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__startIMUResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__startIMUResponse(soap, tag ? tag : "ns1:startIMUResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__startIMUResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__startIMUResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__startIMUResponse * SOAP_FMAC4 soap_get__ns1__startIMUResponse(struct soap *soap, _ns1__startIMUResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__startIMUResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__startIMU::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__startIMU::gloveAddress = NULL;
	/* transient soap skipped */
}

void _ns1__startIMU::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__startIMU::gloveAddress);
#endif
}

int _ns1__startIMU::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__startIMU(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__startIMU(struct soap *soap, const char *tag, int id, const _ns1__startIMU *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__startIMU), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__startIMU::gloveAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__startIMU::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__startIMU(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__startIMU * SOAP_FMAC4 soap_in__ns1__startIMU(struct soap *soap, const char *tag, _ns1__startIMU *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__startIMU *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__startIMU, sizeof(_ns1__startIMU), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__startIMU)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__startIMU *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__startIMU::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__startIMU *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__startIMU, SOAP_TYPE__ns1__startIMU, sizeof(_ns1__startIMU), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__startIMU * SOAP_FMAC2 soap_instantiate__ns1__startIMU(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__startIMU(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__startIMU *p;
	size_t k = sizeof(_ns1__startIMU);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__startIMU);
		if (p)
			((_ns1__startIMU*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__startIMU, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__startIMU*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__startIMU location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__startIMU, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__startIMU::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__startIMU(soap, tag ? tag : "ns1:startIMU", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__startIMU::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__startIMU(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__startIMU * SOAP_FMAC4 soap_get__ns1__startIMU(struct soap *soap, _ns1__startIMU *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__startIMU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__resetFlexorsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__resetFlexorsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__resetFlexorsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__resetFlexorsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__resetFlexorsResponse(struct soap *soap, const char *tag, int id, const _ns1__resetFlexorsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__resetFlexorsResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__resetFlexorsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__resetFlexorsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__resetFlexorsResponse * SOAP_FMAC4 soap_in__ns1__resetFlexorsResponse(struct soap *soap, const char *tag, _ns1__resetFlexorsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__resetFlexorsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__resetFlexorsResponse, sizeof(_ns1__resetFlexorsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__resetFlexorsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__resetFlexorsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__resetFlexorsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__resetFlexorsResponse, SOAP_TYPE__ns1__resetFlexorsResponse, sizeof(_ns1__resetFlexorsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__resetFlexorsResponse * SOAP_FMAC2 soap_instantiate__ns1__resetFlexorsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__resetFlexorsResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__resetFlexorsResponse *p;
	size_t k = sizeof(_ns1__resetFlexorsResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__resetFlexorsResponse);
		if (p)
			((_ns1__resetFlexorsResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__resetFlexorsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__resetFlexorsResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__resetFlexorsResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__resetFlexorsResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__resetFlexorsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__resetFlexorsResponse(soap, tag ? tag : "ns1:resetFlexorsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__resetFlexorsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__resetFlexorsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__resetFlexorsResponse * SOAP_FMAC4 soap_get__ns1__resetFlexorsResponse(struct soap *soap, _ns1__resetFlexorsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__resetFlexorsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__resetFlexors::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__resetFlexors::gloveAddress = NULL;
	/* transient soap skipped */
}

void _ns1__resetFlexors::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__resetFlexors::gloveAddress);
#endif
}

int _ns1__resetFlexors::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__resetFlexors(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__resetFlexors(struct soap *soap, const char *tag, int id, const _ns1__resetFlexors *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__resetFlexors), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__resetFlexors::gloveAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__resetFlexors::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__resetFlexors(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__resetFlexors * SOAP_FMAC4 soap_in__ns1__resetFlexors(struct soap *soap, const char *tag, _ns1__resetFlexors *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__resetFlexors *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__resetFlexors, sizeof(_ns1__resetFlexors), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__resetFlexors)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__resetFlexors *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__resetFlexors::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__resetFlexors *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__resetFlexors, SOAP_TYPE__ns1__resetFlexors, sizeof(_ns1__resetFlexors), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__resetFlexors * SOAP_FMAC2 soap_instantiate__ns1__resetFlexors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__resetFlexors(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__resetFlexors *p;
	size_t k = sizeof(_ns1__resetFlexors);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__resetFlexors);
		if (p)
			((_ns1__resetFlexors*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__resetFlexors, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__resetFlexors*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__resetFlexors location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__resetFlexors, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__resetFlexors::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__resetFlexors(soap, tag ? tag : "ns1:resetFlexors", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__resetFlexors::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__resetFlexors(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__resetFlexors * SOAP_FMAC4 soap_get__ns1__resetFlexors(struct soap *soap, _ns1__resetFlexors *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__resetFlexors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__setThresholdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__setThresholdResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__setThresholdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setThresholdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setThresholdResponse(struct soap *soap, const char *tag, int id, const _ns1__setThresholdResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setThresholdResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__setThresholdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setThresholdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setThresholdResponse * SOAP_FMAC4 soap_in__ns1__setThresholdResponse(struct soap *soap, const char *tag, _ns1__setThresholdResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setThresholdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setThresholdResponse, sizeof(_ns1__setThresholdResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__setThresholdResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__setThresholdResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setThresholdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setThresholdResponse, SOAP_TYPE__ns1__setThresholdResponse, sizeof(_ns1__setThresholdResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__setThresholdResponse * SOAP_FMAC2 soap_instantiate__ns1__setThresholdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setThresholdResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__setThresholdResponse *p;
	size_t k = sizeof(_ns1__setThresholdResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__setThresholdResponse);
		if (p)
			((_ns1__setThresholdResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__setThresholdResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__setThresholdResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__setThresholdResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__setThresholdResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__setThresholdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__setThresholdResponse(soap, tag ? tag : "ns1:setThresholdResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setThresholdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setThresholdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setThresholdResponse * SOAP_FMAC4 soap_get__ns1__setThresholdResponse(struct soap *soap, _ns1__setThresholdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setThresholdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__setThreshold::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setThreshold::gloveAddress = NULL;
	this->_ns1__setThreshold::value = NULL;
	/* transient soap skipped */
}

void _ns1__setThreshold::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__setThreshold::gloveAddress);
	soap_serialize_PointerToint(soap, &this->_ns1__setThreshold::value);
#endif
}

int _ns1__setThreshold::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setThreshold(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setThreshold(struct soap *soap, const char *tag, int id, const _ns1__setThreshold *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setThreshold), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__setThreshold::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:value", -1, &a->_ns1__setThreshold::value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__setThreshold::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setThreshold(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setThreshold * SOAP_FMAC4 soap_in__ns1__setThreshold(struct soap *soap, const char *tag, _ns1__setThreshold *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setThreshold *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setThreshold, sizeof(_ns1__setThreshold), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__setThreshold)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__setThreshold *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__setThreshold::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:value", &a->_ns1__setThreshold::value, "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setThreshold *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setThreshold, SOAP_TYPE__ns1__setThreshold, sizeof(_ns1__setThreshold), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__setThreshold * SOAP_FMAC2 soap_instantiate__ns1__setThreshold(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setThreshold(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__setThreshold *p;
	size_t k = sizeof(_ns1__setThreshold);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__setThreshold);
		if (p)
			((_ns1__setThreshold*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__setThreshold, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__setThreshold*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__setThreshold location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__setThreshold, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__setThreshold::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__setThreshold(soap, tag ? tag : "ns1:setThreshold", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setThreshold::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setThreshold(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setThreshold * SOAP_FMAC4 soap_get__ns1__setThreshold(struct soap *soap, _ns1__setThreshold *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setThreshold(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__confirmCalibrationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__confirmCalibrationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__confirmCalibrationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__confirmCalibrationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__confirmCalibrationResponse(struct soap *soap, const char *tag, int id, const _ns1__confirmCalibrationResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__confirmCalibrationResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__confirmCalibrationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__confirmCalibrationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__confirmCalibrationResponse * SOAP_FMAC4 soap_in__ns1__confirmCalibrationResponse(struct soap *soap, const char *tag, _ns1__confirmCalibrationResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__confirmCalibrationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__confirmCalibrationResponse, sizeof(_ns1__confirmCalibrationResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__confirmCalibrationResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__confirmCalibrationResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__confirmCalibrationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__confirmCalibrationResponse, SOAP_TYPE__ns1__confirmCalibrationResponse, sizeof(_ns1__confirmCalibrationResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__confirmCalibrationResponse * SOAP_FMAC2 soap_instantiate__ns1__confirmCalibrationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__confirmCalibrationResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__confirmCalibrationResponse *p;
	size_t k = sizeof(_ns1__confirmCalibrationResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__confirmCalibrationResponse);
		if (p)
			((_ns1__confirmCalibrationResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__confirmCalibrationResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__confirmCalibrationResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__confirmCalibrationResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__confirmCalibrationResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__confirmCalibrationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__confirmCalibrationResponse(soap, tag ? tag : "ns1:confirmCalibrationResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__confirmCalibrationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__confirmCalibrationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__confirmCalibrationResponse * SOAP_FMAC4 soap_get__ns1__confirmCalibrationResponse(struct soap *soap, _ns1__confirmCalibrationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__confirmCalibrationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__confirmCalibration::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__confirmCalibration::gloveAddress = NULL;
	/* transient soap skipped */
}

void _ns1__confirmCalibration::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__confirmCalibration::gloveAddress);
#endif
}

int _ns1__confirmCalibration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__confirmCalibration(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__confirmCalibration(struct soap *soap, const char *tag, int id, const _ns1__confirmCalibration *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__confirmCalibration), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__confirmCalibration::gloveAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__confirmCalibration::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__confirmCalibration(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__confirmCalibration * SOAP_FMAC4 soap_in__ns1__confirmCalibration(struct soap *soap, const char *tag, _ns1__confirmCalibration *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__confirmCalibration *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__confirmCalibration, sizeof(_ns1__confirmCalibration), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__confirmCalibration)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__confirmCalibration *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__confirmCalibration::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__confirmCalibration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__confirmCalibration, SOAP_TYPE__ns1__confirmCalibration, sizeof(_ns1__confirmCalibration), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__confirmCalibration * SOAP_FMAC2 soap_instantiate__ns1__confirmCalibration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__confirmCalibration(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__confirmCalibration *p;
	size_t k = sizeof(_ns1__confirmCalibration);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__confirmCalibration);
		if (p)
			((_ns1__confirmCalibration*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__confirmCalibration, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__confirmCalibration*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__confirmCalibration location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__confirmCalibration, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__confirmCalibration::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__confirmCalibration(soap, tag ? tag : "ns1:confirmCalibration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__confirmCalibration::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__confirmCalibration(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__confirmCalibration * SOAP_FMAC4 soap_get__ns1__confirmCalibration(struct soap *soap, _ns1__confirmCalibration *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__confirmCalibration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__calibrateFlexorsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__calibrateFlexorsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__calibrateFlexorsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__calibrateFlexorsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__calibrateFlexorsResponse(struct soap *soap, const char *tag, int id, const _ns1__calibrateFlexorsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__calibrateFlexorsResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__calibrateFlexorsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__calibrateFlexorsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__calibrateFlexorsResponse * SOAP_FMAC4 soap_in__ns1__calibrateFlexorsResponse(struct soap *soap, const char *tag, _ns1__calibrateFlexorsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__calibrateFlexorsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__calibrateFlexorsResponse, sizeof(_ns1__calibrateFlexorsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__calibrateFlexorsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__calibrateFlexorsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__calibrateFlexorsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__calibrateFlexorsResponse, SOAP_TYPE__ns1__calibrateFlexorsResponse, sizeof(_ns1__calibrateFlexorsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__calibrateFlexorsResponse * SOAP_FMAC2 soap_instantiate__ns1__calibrateFlexorsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__calibrateFlexorsResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__calibrateFlexorsResponse *p;
	size_t k = sizeof(_ns1__calibrateFlexorsResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__calibrateFlexorsResponse);
		if (p)
			((_ns1__calibrateFlexorsResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__calibrateFlexorsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__calibrateFlexorsResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__calibrateFlexorsResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__calibrateFlexorsResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__calibrateFlexorsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__calibrateFlexorsResponse(soap, tag ? tag : "ns1:calibrateFlexorsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__calibrateFlexorsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__calibrateFlexorsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__calibrateFlexorsResponse * SOAP_FMAC4 soap_get__ns1__calibrateFlexorsResponse(struct soap *soap, _ns1__calibrateFlexorsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__calibrateFlexorsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__calibrateFlexors::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__calibrateFlexors::gloveAddress = NULL;
	/* transient soap skipped */
}

void _ns1__calibrateFlexors::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__calibrateFlexors::gloveAddress);
#endif
}

int _ns1__calibrateFlexors::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__calibrateFlexors(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__calibrateFlexors(struct soap *soap, const char *tag, int id, const _ns1__calibrateFlexors *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__calibrateFlexors), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__calibrateFlexors::gloveAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__calibrateFlexors::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__calibrateFlexors(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__calibrateFlexors * SOAP_FMAC4 soap_in__ns1__calibrateFlexors(struct soap *soap, const char *tag, _ns1__calibrateFlexors *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__calibrateFlexors *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__calibrateFlexors, sizeof(_ns1__calibrateFlexors), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__calibrateFlexors)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__calibrateFlexors *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__calibrateFlexors::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__calibrateFlexors *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__calibrateFlexors, SOAP_TYPE__ns1__calibrateFlexors, sizeof(_ns1__calibrateFlexors), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__calibrateFlexors * SOAP_FMAC2 soap_instantiate__ns1__calibrateFlexors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__calibrateFlexors(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__calibrateFlexors *p;
	size_t k = sizeof(_ns1__calibrateFlexors);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__calibrateFlexors);
		if (p)
			((_ns1__calibrateFlexors*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__calibrateFlexors, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__calibrateFlexors*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__calibrateFlexors location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__calibrateFlexors, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__calibrateFlexors::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__calibrateFlexors(soap, tag ? tag : "ns1:calibrateFlexors", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__calibrateFlexors::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__calibrateFlexors(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__calibrateFlexors * SOAP_FMAC4 soap_get__ns1__calibrateFlexors(struct soap *soap, _ns1__calibrateFlexors *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__calibrateFlexors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__removeFlexorResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__removeFlexorResponse::removeFlexorResult = NULL;
	/* transient soap skipped */
}

void _ns1__removeFlexorResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->_ns1__removeFlexorResponse::removeFlexorResult);
#endif
}

int _ns1__removeFlexorResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeFlexorResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeFlexorResponse(struct soap *soap, const char *tag, int id, const _ns1__removeFlexorResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeFlexorResponse), type))
		return soap->error;
	if (a->removeFlexorResult)
		soap_element_result(soap, "ns1:removeFlexorResult");
	if (soap_out_PointerToint(soap, "ns1:removeFlexorResult", -1, &a->_ns1__removeFlexorResponse::removeFlexorResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeFlexorResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__removeFlexorResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeFlexorResponse * SOAP_FMAC4 soap_in__ns1__removeFlexorResponse(struct soap *soap, const char *tag, _ns1__removeFlexorResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeFlexorResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeFlexorResponse, sizeof(_ns1__removeFlexorResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__removeFlexorResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__removeFlexorResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_removeFlexorResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_removeFlexorResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:removeFlexorResult", &a->_ns1__removeFlexorResponse::removeFlexorResult, "xsd:int"))
				{	soap_flag_removeFlexorResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:removeFlexorResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__removeFlexorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeFlexorResponse, SOAP_TYPE__ns1__removeFlexorResponse, sizeof(_ns1__removeFlexorResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__removeFlexorResponse * SOAP_FMAC2 soap_instantiate__ns1__removeFlexorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeFlexorResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__removeFlexorResponse *p;
	size_t k = sizeof(_ns1__removeFlexorResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__removeFlexorResponse);
		if (p)
			((_ns1__removeFlexorResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__removeFlexorResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__removeFlexorResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__removeFlexorResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__removeFlexorResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__removeFlexorResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__removeFlexorResponse(soap, tag ? tag : "ns1:removeFlexorResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeFlexorResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeFlexorResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeFlexorResponse * SOAP_FMAC4 soap_get__ns1__removeFlexorResponse(struct soap *soap, _ns1__removeFlexorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeFlexorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__removeFlexor::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__removeFlexor::gloveAddress = NULL;
	this->_ns1__removeFlexor::mapping = NULL;
	/* transient soap skipped */
}

void _ns1__removeFlexor::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__removeFlexor::gloveAddress);
	soap_serialize_PointerToint(soap, &this->_ns1__removeFlexor::mapping);
#endif
}

int _ns1__removeFlexor::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeFlexor(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeFlexor(struct soap *soap, const char *tag, int id, const _ns1__removeFlexor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeFlexor), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__removeFlexor::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:mapping", -1, &a->_ns1__removeFlexor::mapping, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeFlexor::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__removeFlexor(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeFlexor * SOAP_FMAC4 soap_in__ns1__removeFlexor(struct soap *soap, const char *tag, _ns1__removeFlexor *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeFlexor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeFlexor, sizeof(_ns1__removeFlexor), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__removeFlexor)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__removeFlexor *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_mapping1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__removeFlexor::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_mapping1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:mapping", &a->_ns1__removeFlexor::mapping, "xsd:int"))
				{	soap_flag_mapping1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__removeFlexor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeFlexor, SOAP_TYPE__ns1__removeFlexor, sizeof(_ns1__removeFlexor), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__removeFlexor * SOAP_FMAC2 soap_instantiate__ns1__removeFlexor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeFlexor(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__removeFlexor *p;
	size_t k = sizeof(_ns1__removeFlexor);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__removeFlexor);
		if (p)
			((_ns1__removeFlexor*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__removeFlexor, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__removeFlexor*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__removeFlexor location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__removeFlexor, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__removeFlexor::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__removeFlexor(soap, tag ? tag : "ns1:removeFlexor", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeFlexor::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeFlexor(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeFlexor * SOAP_FMAC4 soap_get__ns1__removeFlexor(struct soap *soap, _ns1__removeFlexor *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeFlexor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__addFlexorResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__addFlexorResponse::addFlexorResult = NULL;
	/* transient soap skipped */
}

void _ns1__addFlexorResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->_ns1__addFlexorResponse::addFlexorResult);
#endif
}

int _ns1__addFlexorResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__addFlexorResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addFlexorResponse(struct soap *soap, const char *tag, int id, const _ns1__addFlexorResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__addFlexorResponse), type))
		return soap->error;
	if (a->addFlexorResult)
		soap_element_result(soap, "ns1:addFlexorResult");
	if (soap_out_PointerToint(soap, "ns1:addFlexorResult", -1, &a->_ns1__addFlexorResponse::addFlexorResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__addFlexorResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__addFlexorResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__addFlexorResponse * SOAP_FMAC4 soap_in__ns1__addFlexorResponse(struct soap *soap, const char *tag, _ns1__addFlexorResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__addFlexorResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__addFlexorResponse, sizeof(_ns1__addFlexorResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__addFlexorResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__addFlexorResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_addFlexorResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_addFlexorResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:addFlexorResult", &a->_ns1__addFlexorResponse::addFlexorResult, "xsd:int"))
				{	soap_flag_addFlexorResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:addFlexorResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__addFlexorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__addFlexorResponse, SOAP_TYPE__ns1__addFlexorResponse, sizeof(_ns1__addFlexorResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__addFlexorResponse * SOAP_FMAC2 soap_instantiate__ns1__addFlexorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__addFlexorResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__addFlexorResponse *p;
	size_t k = sizeof(_ns1__addFlexorResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__addFlexorResponse);
		if (p)
			((_ns1__addFlexorResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__addFlexorResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__addFlexorResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__addFlexorResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__addFlexorResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__addFlexorResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__addFlexorResponse(soap, tag ? tag : "ns1:addFlexorResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__addFlexorResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__addFlexorResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__addFlexorResponse * SOAP_FMAC4 soap_get__ns1__addFlexorResponse(struct soap *soap, _ns1__addFlexorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__addFlexorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__addFlexor::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__addFlexor::gloveAddress = NULL;
	this->_ns1__addFlexor::pin = NULL;
	this->_ns1__addFlexor::mapping = NULL;
	/* transient soap skipped */
}

void _ns1__addFlexor::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__addFlexor::gloveAddress);
	soap_serialize_PointerToint(soap, &this->_ns1__addFlexor::pin);
	soap_serialize_PointerToint(soap, &this->_ns1__addFlexor::mapping);
#endif
}

int _ns1__addFlexor::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__addFlexor(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addFlexor(struct soap *soap, const char *tag, int id, const _ns1__addFlexor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__addFlexor), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__addFlexor::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:pin", -1, &a->_ns1__addFlexor::pin, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:mapping", -1, &a->_ns1__addFlexor::mapping, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__addFlexor::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__addFlexor(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__addFlexor * SOAP_FMAC4 soap_in__ns1__addFlexor(struct soap *soap, const char *tag, _ns1__addFlexor *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__addFlexor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__addFlexor, sizeof(_ns1__addFlexor), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__addFlexor)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__addFlexor *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_pin1 = 1;
	size_t soap_flag_mapping1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__addFlexor::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_pin1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:pin", &a->_ns1__addFlexor::pin, "xsd:int"))
				{	soap_flag_pin1--;
					continue;
				}
			if (soap_flag_mapping1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:mapping", &a->_ns1__addFlexor::mapping, "xsd:int"))
				{	soap_flag_mapping1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__addFlexor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__addFlexor, SOAP_TYPE__ns1__addFlexor, sizeof(_ns1__addFlexor), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__addFlexor * SOAP_FMAC2 soap_instantiate__ns1__addFlexor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__addFlexor(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__addFlexor *p;
	size_t k = sizeof(_ns1__addFlexor);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__addFlexor);
		if (p)
			((_ns1__addFlexor*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__addFlexor, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__addFlexor*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__addFlexor location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__addFlexor, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__addFlexor::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__addFlexor(soap, tag ? tag : "ns1:addFlexor", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__addFlexor::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__addFlexor(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__addFlexor * SOAP_FMAC4 soap_get__ns1__addFlexor(struct soap *soap, _ns1__addFlexor *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__addFlexor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ActivateManyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ActivateManyResponse::ActivateManyResult = NULL;
	/* transient soap skipped */
}

void _ns1__ActivateManyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->_ns1__ActivateManyResponse::ActivateManyResult);
#endif
}

int _ns1__ActivateManyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ActivateManyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ActivateManyResponse(struct soap *soap, const char *tag, int id, const _ns1__ActivateManyResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ActivateManyResponse), type))
		return soap->error;
	if (a->ActivateManyResult)
		soap_element_result(soap, "ns1:ActivateManyResult");
	if (soap_out_PointerToint(soap, "ns1:ActivateManyResult", -1, &a->_ns1__ActivateManyResponse::ActivateManyResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ActivateManyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ActivateManyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ActivateManyResponse * SOAP_FMAC4 soap_in__ns1__ActivateManyResponse(struct soap *soap, const char *tag, _ns1__ActivateManyResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ActivateManyResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ActivateManyResponse, sizeof(_ns1__ActivateManyResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ActivateManyResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ActivateManyResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ActivateManyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ActivateManyResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:ActivateManyResult", &a->_ns1__ActivateManyResponse::ActivateManyResult, "xsd:int"))
				{	soap_flag_ActivateManyResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:ActivateManyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ActivateManyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ActivateManyResponse, SOAP_TYPE__ns1__ActivateManyResponse, sizeof(_ns1__ActivateManyResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ActivateManyResponse * SOAP_FMAC2 soap_instantiate__ns1__ActivateManyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ActivateManyResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ActivateManyResponse *p;
	size_t k = sizeof(_ns1__ActivateManyResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__ActivateManyResponse);
		if (p)
			((_ns1__ActivateManyResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__ActivateManyResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__ActivateManyResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ActivateManyResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__ActivateManyResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__ActivateManyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ActivateManyResponse(soap, tag ? tag : "ns1:ActivateManyResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ActivateManyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ActivateManyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ActivateManyResponse * SOAP_FMAC4 soap_get__ns1__ActivateManyResponse(struct soap *soap, _ns1__ActivateManyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ActivateManyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ActivateMany::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ActivateMany::gloveAddress = NULL;
	this->_ns1__ActivateMany::actuators = NULL;
	this->_ns1__ActivateMany::intensityList = NULL;
	/* transient soap skipped */
}

void _ns1__ActivateMany::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__ActivateMany::gloveAddress);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->_ns1__ActivateMany::actuators);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->_ns1__ActivateMany::intensityList);
#endif
}

int _ns1__ActivateMany::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ActivateMany(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ActivateMany(struct soap *soap, const char *tag, int id, const _ns1__ActivateMany *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ActivateMany), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__ActivateMany::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns1:actuators", -1, &a->_ns1__ActivateMany::actuators, ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns1:intensityList", -1, &a->_ns1__ActivateMany::intensityList, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ActivateMany::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ActivateMany(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ActivateMany * SOAP_FMAC4 soap_in__ns1__ActivateMany(struct soap *soap, const char *tag, _ns1__ActivateMany *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ActivateMany *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ActivateMany, sizeof(_ns1__ActivateMany), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ActivateMany)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ActivateMany *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_actuators1 = 1;
	size_t soap_flag_intensityList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__ActivateMany::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_actuators1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns1:actuators", &a->_ns1__ActivateMany::actuators, "ns5:ArrayOfint"))
				{	soap_flag_actuators1--;
					continue;
				}
			if (soap_flag_intensityList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns1:intensityList", &a->_ns1__ActivateMany::intensityList, "ns5:ArrayOfint"))
				{	soap_flag_intensityList1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ActivateMany *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ActivateMany, SOAP_TYPE__ns1__ActivateMany, sizeof(_ns1__ActivateMany), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ActivateMany * SOAP_FMAC2 soap_instantiate__ns1__ActivateMany(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ActivateMany(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ActivateMany *p;
	size_t k = sizeof(_ns1__ActivateMany);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__ActivateMany);
		if (p)
			((_ns1__ActivateMany*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__ActivateMany, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__ActivateMany*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ActivateMany location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__ActivateMany, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__ActivateMany::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ActivateMany(soap, tag ? tag : "ns1:ActivateMany", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ActivateMany::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ActivateMany(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ActivateMany * SOAP_FMAC4 soap_get__ns1__ActivateMany(struct soap *soap, _ns1__ActivateMany *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ActivateMany(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DisconnectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DisconnectResponse::DisconnectResult = NULL;
	/* transient soap skipped */
}

void _ns1__DisconnectResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->_ns1__DisconnectResponse::DisconnectResult);
#endif
}

int _ns1__DisconnectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DisconnectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DisconnectResponse(struct soap *soap, const char *tag, int id, const _ns1__DisconnectResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DisconnectResponse), type))
		return soap->error;
	if (a->DisconnectResult)
		soap_element_result(soap, "ns1:DisconnectResult");
	if (soap_out_PointerToint(soap, "ns1:DisconnectResult", -1, &a->_ns1__DisconnectResponse::DisconnectResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DisconnectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DisconnectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DisconnectResponse * SOAP_FMAC4 soap_in__ns1__DisconnectResponse(struct soap *soap, const char *tag, _ns1__DisconnectResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DisconnectResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DisconnectResponse, sizeof(_ns1__DisconnectResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DisconnectResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DisconnectResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_DisconnectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DisconnectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:DisconnectResult", &a->_ns1__DisconnectResponse::DisconnectResult, "xsd:int"))
				{	soap_flag_DisconnectResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:DisconnectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DisconnectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DisconnectResponse, SOAP_TYPE__ns1__DisconnectResponse, sizeof(_ns1__DisconnectResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DisconnectResponse * SOAP_FMAC2 soap_instantiate__ns1__DisconnectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DisconnectResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DisconnectResponse *p;
	size_t k = sizeof(_ns1__DisconnectResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__DisconnectResponse);
		if (p)
			((_ns1__DisconnectResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__DisconnectResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__DisconnectResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DisconnectResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__DisconnectResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__DisconnectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DisconnectResponse(soap, tag ? tag : "ns1:DisconnectResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DisconnectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DisconnectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DisconnectResponse * SOAP_FMAC4 soap_get__ns1__DisconnectResponse(struct soap *soap, _ns1__DisconnectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DisconnectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Disconnect::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Disconnect::gloveAddress = NULL;
	/* transient soap skipped */
}

void _ns1__Disconnect::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Disconnect::gloveAddress);
#endif
}

int _ns1__Disconnect::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Disconnect(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Disconnect(struct soap *soap, const char *tag, int id, const _ns1__Disconnect *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Disconnect), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__Disconnect::gloveAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Disconnect::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Disconnect(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Disconnect * SOAP_FMAC4 soap_in__ns1__Disconnect(struct soap *soap, const char *tag, _ns1__Disconnect *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Disconnect *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Disconnect, sizeof(_ns1__Disconnect), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Disconnect)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Disconnect *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__Disconnect::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Disconnect *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Disconnect, SOAP_TYPE__ns1__Disconnect, sizeof(_ns1__Disconnect), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Disconnect * SOAP_FMAC2 soap_instantiate__ns1__Disconnect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Disconnect(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Disconnect *p;
	size_t k = sizeof(_ns1__Disconnect);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__Disconnect);
		if (p)
			((_ns1__Disconnect*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__Disconnect, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__Disconnect*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Disconnect location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__Disconnect, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__Disconnect::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Disconnect(soap, tag ? tag : "ns1:Disconnect", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Disconnect::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Disconnect(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Disconnect * SOAP_FMAC4 soap_get__ns1__Disconnect(struct soap *soap, _ns1__Disconnect *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Disconnect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ConnectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ConnectResponse::ConnectResult = NULL;
	/* transient soap skipped */
}

void _ns1__ConnectResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->_ns1__ConnectResponse::ConnectResult);
#endif
}

int _ns1__ConnectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ConnectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConnectResponse(struct soap *soap, const char *tag, int id, const _ns1__ConnectResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ConnectResponse), type))
		return soap->error;
	if (a->ConnectResult)
		soap_element_result(soap, "ns1:ConnectResult");
	if (soap_out_PointerToint(soap, "ns1:ConnectResult", -1, &a->_ns1__ConnectResponse::ConnectResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ConnectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ConnectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ConnectResponse * SOAP_FMAC4 soap_in__ns1__ConnectResponse(struct soap *soap, const char *tag, _ns1__ConnectResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ConnectResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ConnectResponse, sizeof(_ns1__ConnectResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ConnectResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ConnectResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ConnectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConnectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:ConnectResult", &a->_ns1__ConnectResponse::ConnectResult, "xsd:int"))
				{	soap_flag_ConnectResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:ConnectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ConnectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ConnectResponse, SOAP_TYPE__ns1__ConnectResponse, sizeof(_ns1__ConnectResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ConnectResponse * SOAP_FMAC2 soap_instantiate__ns1__ConnectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ConnectResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ConnectResponse *p;
	size_t k = sizeof(_ns1__ConnectResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__ConnectResponse);
		if (p)
			((_ns1__ConnectResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__ConnectResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__ConnectResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ConnectResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__ConnectResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__ConnectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ConnectResponse(soap, tag ? tag : "ns1:ConnectResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ConnectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ConnectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ConnectResponse * SOAP_FMAC4 soap_get__ns1__ConnectResponse(struct soap *soap, _ns1__ConnectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ConnectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Connect::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Connect::gloveAddress = NULL;
	/* transient soap skipped */
}

void _ns1__Connect::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Connect::gloveAddress);
#endif
}

int _ns1__Connect::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Connect(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Connect(struct soap *soap, const char *tag, int id, const _ns1__Connect *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Connect), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__Connect::gloveAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Connect::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Connect(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Connect * SOAP_FMAC4 soap_in__ns1__Connect(struct soap *soap, const char *tag, _ns1__Connect *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Connect *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Connect, sizeof(_ns1__Connect), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Connect)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Connect *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__Connect::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Connect *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Connect, SOAP_TYPE__ns1__Connect, sizeof(_ns1__Connect), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Connect * SOAP_FMAC2 soap_instantiate__ns1__Connect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Connect(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Connect *p;
	size_t k = sizeof(_ns1__Connect);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__Connect);
		if (p)
			((_ns1__Connect*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__Connect, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__Connect*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Connect location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__Connect, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__Connect::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Connect(soap, tag ? tag : "ns1:Connect", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Connect::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Connect(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Connect * SOAP_FMAC4 soap_get__ns1__Connect(struct soap *soap, _ns1__Connect *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Connect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ActivateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ActivateResponse::ActivateResult = NULL;
	/* transient soap skipped */
}

void _ns1__ActivateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->_ns1__ActivateResponse::ActivateResult);
#endif
}

int _ns1__ActivateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ActivateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ActivateResponse(struct soap *soap, const char *tag, int id, const _ns1__ActivateResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ActivateResponse), type))
		return soap->error;
	if (a->ActivateResult)
		soap_element_result(soap, "ns1:ActivateResult");
	if (soap_out_PointerToint(soap, "ns1:ActivateResult", -1, &a->_ns1__ActivateResponse::ActivateResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ActivateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ActivateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ActivateResponse * SOAP_FMAC4 soap_in__ns1__ActivateResponse(struct soap *soap, const char *tag, _ns1__ActivateResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ActivateResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ActivateResponse, sizeof(_ns1__ActivateResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ActivateResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ActivateResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ActivateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ActivateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:ActivateResult", &a->_ns1__ActivateResponse::ActivateResult, "xsd:int"))
				{	soap_flag_ActivateResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:ActivateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ActivateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ActivateResponse, SOAP_TYPE__ns1__ActivateResponse, sizeof(_ns1__ActivateResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ActivateResponse * SOAP_FMAC2 soap_instantiate__ns1__ActivateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ActivateResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ActivateResponse *p;
	size_t k = sizeof(_ns1__ActivateResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__ActivateResponse);
		if (p)
			((_ns1__ActivateResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__ActivateResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__ActivateResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ActivateResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__ActivateResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__ActivateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ActivateResponse(soap, tag ? tag : "ns1:ActivateResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ActivateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ActivateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ActivateResponse * SOAP_FMAC4 soap_get__ns1__ActivateResponse(struct soap *soap, _ns1__ActivateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ActivateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Activate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Activate::gloveAddress = NULL;
	this->_ns1__Activate::actuator = NULL;
	this->_ns1__Activate::intensity = NULL;
	/* transient soap skipped */
}

void _ns1__Activate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Activate::gloveAddress);
	soap_serialize_PointerToint(soap, &this->_ns1__Activate::actuator);
	soap_serialize_PointerToint(soap, &this->_ns1__Activate::intensity);
#endif
}

int _ns1__Activate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Activate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Activate(struct soap *soap, const char *tag, int id, const _ns1__Activate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Activate), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:gloveAddress", -1, &a->_ns1__Activate::gloveAddress, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:actuator", -1, &a->_ns1__Activate::actuator, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:intensity", -1, &a->_ns1__Activate::intensity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Activate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Activate(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Activate * SOAP_FMAC4 soap_in__ns1__Activate(struct soap *soap, const char *tag, _ns1__Activate *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Activate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Activate, sizeof(_ns1__Activate), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Activate)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Activate *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gloveAddress1 = 1;
	size_t soap_flag_actuator1 = 1;
	size_t soap_flag_intensity1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gloveAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:gloveAddress", &a->_ns1__Activate::gloveAddress, "xsd:string"))
				{	soap_flag_gloveAddress1--;
					continue;
				}
			if (soap_flag_actuator1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:actuator", &a->_ns1__Activate::actuator, "xsd:int"))
				{	soap_flag_actuator1--;
					continue;
				}
			if (soap_flag_intensity1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:intensity", &a->_ns1__Activate::intensity, "xsd:int"))
				{	soap_flag_intensity1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Activate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Activate, SOAP_TYPE__ns1__Activate, sizeof(_ns1__Activate), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Activate * SOAP_FMAC2 soap_instantiate__ns1__Activate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Activate(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Activate *p;
	size_t k = sizeof(_ns1__Activate);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__Activate);
		if (p)
			((_ns1__Activate*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__Activate, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__Activate*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Activate location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__Activate, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__Activate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Activate(soap, tag ? tag : "ns1:Activate", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Activate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Activate(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Activate * SOAP_FMAC4 soap_get__ns1__Activate(struct soap *soap, _ns1__Activate *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Activate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__SaveGloveResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SaveGloveResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__SaveGloveResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SaveGloveResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveGloveResponse(struct soap *soap, const char *tag, int id, const _ns1__SaveGloveResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SaveGloveResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__SaveGloveResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SaveGloveResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SaveGloveResponse * SOAP_FMAC4 soap_in__ns1__SaveGloveResponse(struct soap *soap, const char *tag, _ns1__SaveGloveResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SaveGloveResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SaveGloveResponse, sizeof(_ns1__SaveGloveResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__SaveGloveResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__SaveGloveResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SaveGloveResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SaveGloveResponse, SOAP_TYPE__ns1__SaveGloveResponse, sizeof(_ns1__SaveGloveResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__SaveGloveResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveGloveResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SaveGloveResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__SaveGloveResponse *p;
	size_t k = sizeof(_ns1__SaveGloveResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__SaveGloveResponse);
		if (p)
			((_ns1__SaveGloveResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__SaveGloveResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__SaveGloveResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__SaveGloveResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__SaveGloveResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__SaveGloveResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__SaveGloveResponse(soap, tag ? tag : "ns1:SaveGloveResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SaveGloveResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SaveGloveResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SaveGloveResponse * SOAP_FMAC4 soap_get__ns1__SaveGloveResponse(struct soap *soap, _ns1__SaveGloveResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SaveGloveResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__SaveGlove::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SaveGlove::glove = NULL;
	/* transient soap skipped */
}

void _ns1__SaveGlove::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__Glove(soap, &this->_ns1__SaveGlove::glove);
#endif
}

int _ns1__SaveGlove::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SaveGlove(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveGlove(struct soap *soap, const char *tag, int id, const _ns1__SaveGlove *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SaveGlove), type))
		return soap->error;
	if (soap_out_PointerTons4__Glove(soap, "ns1:glove", -1, &a->_ns1__SaveGlove::glove, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__SaveGlove::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SaveGlove(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SaveGlove * SOAP_FMAC4 soap_in__ns1__SaveGlove(struct soap *soap, const char *tag, _ns1__SaveGlove *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SaveGlove *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SaveGlove, sizeof(_ns1__SaveGlove), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__SaveGlove)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__SaveGlove *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_glove1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_glove1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__Glove(soap, "ns1:glove", &a->_ns1__SaveGlove::glove, "ns4:Glove"))
				{	soap_flag_glove1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SaveGlove *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SaveGlove, SOAP_TYPE__ns1__SaveGlove, sizeof(_ns1__SaveGlove), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__SaveGlove * SOAP_FMAC2 soap_instantiate__ns1__SaveGlove(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SaveGlove(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__SaveGlove *p;
	size_t k = sizeof(_ns1__SaveGlove);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__SaveGlove);
		if (p)
			((_ns1__SaveGlove*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__SaveGlove, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__SaveGlove*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__SaveGlove location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__SaveGlove, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__SaveGlove::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__SaveGlove(soap, tag ? tag : "ns1:SaveGlove", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SaveGlove::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SaveGlove(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SaveGlove * SOAP_FMAC4 soap_get__ns1__SaveGlove(struct soap *soap, _ns1__SaveGlove *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SaveGlove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__RefreshGlovesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__RefreshGlovesResponse::RefreshGlovesResult = NULL;
	/* transient soap skipped */
}

void _ns1__RefreshGlovesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfGlove(soap, &this->_ns1__RefreshGlovesResponse::RefreshGlovesResult);
#endif
}

int _ns1__RefreshGlovesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RefreshGlovesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RefreshGlovesResponse(struct soap *soap, const char *tag, int id, const _ns1__RefreshGlovesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RefreshGlovesResponse), type))
		return soap->error;
	if (a->RefreshGlovesResult)
		soap_element_result(soap, "ns1:RefreshGlovesResult");
	if (soap_out_PointerTons4__ArrayOfGlove(soap, "ns1:RefreshGlovesResult", -1, &a->_ns1__RefreshGlovesResponse::RefreshGlovesResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__RefreshGlovesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RefreshGlovesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RefreshGlovesResponse * SOAP_FMAC4 soap_in__ns1__RefreshGlovesResponse(struct soap *soap, const char *tag, _ns1__RefreshGlovesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RefreshGlovesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RefreshGlovesResponse, sizeof(_ns1__RefreshGlovesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__RefreshGlovesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__RefreshGlovesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_RefreshGlovesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RefreshGlovesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfGlove(soap, "ns1:RefreshGlovesResult", &a->_ns1__RefreshGlovesResponse::RefreshGlovesResult, "ns4:ArrayOfGlove"))
				{	soap_flag_RefreshGlovesResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:RefreshGlovesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RefreshGlovesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RefreshGlovesResponse, SOAP_TYPE__ns1__RefreshGlovesResponse, sizeof(_ns1__RefreshGlovesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__RefreshGlovesResponse * SOAP_FMAC2 soap_instantiate__ns1__RefreshGlovesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RefreshGlovesResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__RefreshGlovesResponse *p;
	size_t k = sizeof(_ns1__RefreshGlovesResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__RefreshGlovesResponse);
		if (p)
			((_ns1__RefreshGlovesResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__RefreshGlovesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__RefreshGlovesResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__RefreshGlovesResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__RefreshGlovesResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__RefreshGlovesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__RefreshGlovesResponse(soap, tag ? tag : "ns1:RefreshGlovesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__RefreshGlovesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RefreshGlovesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RefreshGlovesResponse * SOAP_FMAC4 soap_get__ns1__RefreshGlovesResponse(struct soap *soap, _ns1__RefreshGlovesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RefreshGlovesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__RefreshGloves::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__RefreshGloves::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__RefreshGloves::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RefreshGloves(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RefreshGloves(struct soap *soap, const char *tag, int id, const _ns1__RefreshGloves *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RefreshGloves), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__RefreshGloves::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RefreshGloves(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RefreshGloves * SOAP_FMAC4 soap_in__ns1__RefreshGloves(struct soap *soap, const char *tag, _ns1__RefreshGloves *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RefreshGloves *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RefreshGloves, sizeof(_ns1__RefreshGloves), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__RefreshGloves)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__RefreshGloves *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RefreshGloves *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RefreshGloves, SOAP_TYPE__ns1__RefreshGloves, sizeof(_ns1__RefreshGloves), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__RefreshGloves * SOAP_FMAC2 soap_instantiate__ns1__RefreshGloves(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RefreshGloves(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__RefreshGloves *p;
	size_t k = sizeof(_ns1__RefreshGloves);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__RefreshGloves);
		if (p)
			((_ns1__RefreshGloves*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__RefreshGloves, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__RefreshGloves*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__RefreshGloves location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__RefreshGloves, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__RefreshGloves::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__RefreshGloves(soap, tag ? tag : "ns1:RefreshGloves", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__RefreshGloves::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RefreshGloves(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RefreshGloves * SOAP_FMAC4 soap_get__ns1__RefreshGloves(struct soap *soap, _ns1__RefreshGloves *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RefreshGloves(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetGlovesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetGlovesResponse::GetGlovesResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetGlovesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfGlove(soap, &this->_ns1__GetGlovesResponse::GetGlovesResult);
#endif
}

int _ns1__GetGlovesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetGlovesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGlovesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetGlovesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetGlovesResponse), type))
		return soap->error;
	if (a->GetGlovesResult)
		soap_element_result(soap, "ns1:GetGlovesResult");
	if (soap_out_PointerTons4__ArrayOfGlove(soap, "ns1:GetGlovesResult", -1, &a->_ns1__GetGlovesResponse::GetGlovesResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetGlovesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetGlovesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetGlovesResponse * SOAP_FMAC4 soap_in__ns1__GetGlovesResponse(struct soap *soap, const char *tag, _ns1__GetGlovesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetGlovesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetGlovesResponse, sizeof(_ns1__GetGlovesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetGlovesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetGlovesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetGlovesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetGlovesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfGlove(soap, "ns1:GetGlovesResult", &a->_ns1__GetGlovesResponse::GetGlovesResult, "ns4:ArrayOfGlove"))
				{	soap_flag_GetGlovesResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:GetGlovesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetGlovesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetGlovesResponse, SOAP_TYPE__ns1__GetGlovesResponse, sizeof(_ns1__GetGlovesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetGlovesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGlovesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetGlovesResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetGlovesResponse *p;
	size_t k = sizeof(_ns1__GetGlovesResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__GetGlovesResponse);
		if (p)
			((_ns1__GetGlovesResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__GetGlovesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__GetGlovesResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetGlovesResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__GetGlovesResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__GetGlovesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetGlovesResponse(soap, tag ? tag : "ns1:GetGlovesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetGlovesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetGlovesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetGlovesResponse * SOAP_FMAC4 soap_get__ns1__GetGlovesResponse(struct soap *soap, _ns1__GetGlovesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetGlovesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetGloves::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetGloves::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetGloves::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetGloves(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGloves(struct soap *soap, const char *tag, int id, const _ns1__GetGloves *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetGloves), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetGloves::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetGloves(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetGloves * SOAP_FMAC4 soap_in__ns1__GetGloves(struct soap *soap, const char *tag, _ns1__GetGloves *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetGloves *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetGloves, sizeof(_ns1__GetGloves), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetGloves)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetGloves *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetGloves *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetGloves, SOAP_TYPE__ns1__GetGloves, sizeof(_ns1__GetGloves), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetGloves * SOAP_FMAC2 soap_instantiate__ns1__GetGloves(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetGloves(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetGloves *p;
	size_t k = sizeof(_ns1__GetGloves);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__GetGloves);
		if (p)
			((_ns1__GetGloves*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__GetGloves, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__GetGloves*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetGloves location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__GetGloves, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__GetGloves::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetGloves(soap, tag ? tag : "ns1:GetGloves", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetGloves::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetGloves(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetGloves * SOAP_FMAC4 soap_get__ns1__GetGloves(struct soap *soap, _ns1__GetGloves *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetGloves(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort::__item);
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedShort(soap, tag, id, &a->xsd__unsignedShort::__item, "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedShort)
		return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_unsignedShort(soap, tag, &a->xsd__unsignedShort::__item, "xsd:unsignedShort"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedShort *p;
	size_t k = sizeof(xsd__unsignedShort);
	if (n < 0)
	{	p = SOAP_NEW(xsd__unsignedShort);
		if (p)
			((xsd__unsignedShort*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__unsignedShort, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedShort location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__unsignedShort, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedShort(soap, tag ? tag : "xsd:unsignedShort", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ULONG64(soap, &this->xsd__unsignedLong::__item);
}

void xsd__unsignedLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const xsd__unsignedLong *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ULONG64(soap, tag, id, &a->xsd__unsignedLong::__item, "xsd:unsignedLong");
}

void *xsd__unsignedLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedLong(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, xsd__unsignedLong *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedLong, sizeof(xsd__unsignedLong), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedLong)
		return (xsd__unsignedLong *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ULONG64(soap, tag, &a->xsd__unsignedLong::__item, "xsd:unsignedLong"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedLong *p;
	size_t k = sizeof(xsd__unsignedLong);
	if (n < 0)
	{	p = SOAP_NEW(xsd__unsignedLong);
		if (p)
			((xsd__unsignedLong*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__unsignedLong, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__unsignedLong*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedLong location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__unsignedLong, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__unsignedLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedLong(soap, tag ? tag : "xsd:unsignedLong", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt::__item);
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedInt(soap, tag, id, &a->xsd__unsignedInt::__item, "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedInt)
		return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_unsignedInt(soap, tag, &a->xsd__unsignedInt::__item, "xsd:unsignedInt"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedInt *p;
	size_t k = sizeof(xsd__unsignedInt);
	if (n < 0)
	{	p = SOAP_NEW(xsd__unsignedInt);
		if (p)
			((xsd__unsignedInt*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__unsignedInt, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedInt location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__unsignedInt, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedInt(soap, tag ? tag : "xsd:unsignedInt", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedByte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte_::__item);
}

void xsd__unsignedByte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedByte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap *soap, const char *tag, int id, const xsd__unsignedByte_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__unsignedByte(soap, tag, id, &a->xsd__unsignedByte_::__item, "xsd:unsignedByte");
}

void *xsd__unsignedByte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedByte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap *soap, const char *tag, xsd__unsignedByte_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedByte_, sizeof(xsd__unsignedByte_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__unsignedByte_)
		return (xsd__unsignedByte_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__unsignedByte(soap, tag, &a->xsd__unsignedByte_::__item, "xsd:unsignedByte"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedByte_ *p;
	size_t k = sizeof(xsd__unsignedByte_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__unsignedByte_);
		if (p)
			((xsd__unsignedByte_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__unsignedByte_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__unsignedByte_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedByte_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__unsignedByte_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__unsignedByte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedByte_(soap, tag ? tag : "xsd:unsignedByte", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->xsd__string::__item);
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &a->xsd__string::__item, "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__string)
		return (xsd__string *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_std__string(soap, tag, &a->xsd__string::__item, "xsd:string"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__string *p;
	size_t k = sizeof(xsd__string);
	if (n < 0)
	{	p = SOAP_NEW(xsd__string);
		if (p)
			((xsd__string*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__string, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__string*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__string location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__string(soap, tag ? tag : "xsd:string", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__short::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_short(soap, &this->xsd__short::__item);
}

void xsd__short::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__short::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const xsd__short *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_short(soap, tag, id, &a->xsd__short::__item, "xsd:short");
}

void *xsd__short::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__short(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, xsd__short *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__short, sizeof(xsd__short), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__short)
		return (xsd__short *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_short(soap, tag, &a->xsd__short::__item, "xsd:short"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__short *p;
	size_t k = sizeof(xsd__short);
	if (n < 0)
	{	p = SOAP_NEW(xsd__short);
		if (p)
			((xsd__short*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__short, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__short*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__short location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__short, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__short::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__short(soap, tag ? tag : "xsd:short", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, xsd__short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_LONG64(soap, &this->xsd__long::__item);
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_LONG64(soap, tag, id, &a->xsd__long::__item, "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__long)
		return (xsd__long *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_LONG64(soap, tag, &a->xsd__long::__item, "xsd:long"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__long *p;
	size_t k = sizeof(xsd__long);
	if (n < 0)
	{	p = SOAP_NEW(xsd__long);
		if (p)
			((xsd__long*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__long, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__long*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__long location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__long, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__long(soap, tag ? tag : "xsd:long", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->xsd__int::__item);
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__int::__item, SOAP_TYPE_int);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &a->xsd__int::__item, "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__int)
		return (xsd__int *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_int(soap, tag, &a->xsd__int::__item, "xsd:int"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__int *p;
	size_t k = sizeof(xsd__int);
	if (n < 0)
	{	p = SOAP_NEW(xsd__int);
		if (p)
			((xsd__int*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__int, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__int*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__int location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__int, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__int(soap, tag ? tag : "xsd:int", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__float::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_float(soap, &this->xsd__float::__item);
}

void xsd__float::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__float::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const xsd__float *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_float(soap, tag, id, &a->xsd__float::__item, "xsd:float");
}

void *xsd__float::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__float(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, xsd__float *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__float)
		return (xsd__float *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_float(soap, tag, &a->xsd__float::__item, "xsd:float"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__float *p;
	size_t k = sizeof(xsd__float);
	if (n < 0)
	{	p = SOAP_NEW(xsd__float);
		if (p)
			((xsd__float*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__float, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__float*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__float location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__float, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__float::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__float(soap, tag ? tag : "xsd:float", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, xsd__float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__duration(soap, &this->xsd__duration_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__duration(soap, tag, id, &a->xsd__duration_::__item, "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__duration_)
		return (xsd__duration_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__duration(soap, tag, &a->xsd__duration_::__item, "xsd:duration"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__duration_ *p;
	size_t k = sizeof(xsd__duration_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__duration_);
		if (p)
			((xsd__duration_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__duration_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__duration_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__duration_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__duration_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__duration_(soap, tag ? tag : "xsd:duration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__duration, SOAP_TYPE_xsd__duration, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__duration(soap, tag ? tag : "xsd:duration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_double(soap, &this->xsd__double::__item);
}

void xsd__double::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__double::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const xsd__double *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_double(soap, tag, id, &a->xsd__double::__item, "xsd:double");
}

void *xsd__double::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__double(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, xsd__double *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__double, sizeof(xsd__double), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__double)
		return (xsd__double *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_double(soap, tag, &a->xsd__double::__item, "xsd:double"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__double *p;
	size_t k = sizeof(xsd__double);
	if (n < 0)
	{	p = SOAP_NEW(xsd__double);
		if (p)
			((xsd__double*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__double, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__double*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__double location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__double, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__double::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__double(soap, tag ? tag : "xsd:double", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, xsd__double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__decimal(soap, &this->xsd__decimal_::__item);
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__decimal(soap, tag, id, &a->xsd__decimal_::__item, "xsd:decimal");
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__decimal_)
		return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__decimal(soap, tag, &a->xsd__decimal_::__item, "xsd:decimal"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__decimal_ *p;
	size_t k = sizeof(xsd__decimal_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__decimal_);
		if (p)
			((xsd__decimal_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__decimal_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__decimal_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__decimal_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__decimal_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__decimal_(soap, tag ? tag : "xsd:decimal", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__decimal, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_dateTime(soap, &this->xsd__dateTime::__item);
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_dateTime(soap, tag, id, &a->xsd__dateTime::__item, "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__dateTime)
		return (xsd__dateTime *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_dateTime(soap, tag, &a->xsd__dateTime::__item, "xsd:dateTime"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__dateTime *p;
	size_t k = sizeof(xsd__dateTime);
	if (n < 0)
	{	p = SOAP_NEW(xsd__dateTime);
		if (p)
			((xsd__dateTime*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__dateTime, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__dateTime location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__dateTime, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__dateTime(soap, tag ? tag : "xsd:dateTime", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__byte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__byte(soap, &this->xsd__byte_::__item);
}

void xsd__byte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__byte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap *soap, const char *tag, int id, const xsd__byte_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__byte(soap, tag, id, &a->xsd__byte_::__item, "xsd:byte");
}

void *xsd__byte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__byte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap *soap, const char *tag, xsd__byte_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__byte_, sizeof(xsd__byte_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__byte_)
		return (xsd__byte_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__byte(soap, tag, &a->xsd__byte_::__item, "xsd:byte"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__byte_ *p;
	size_t k = sizeof(xsd__byte_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__byte_);
		if (p)
			((xsd__byte_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__byte_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__byte_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__byte_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__byte_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__byte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__byte_(soap, tag ? tag : "xsd:byte", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap *soap, xsd__byte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->xsd__boolean::__item);
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__boolean::__item, SOAP_TYPE_bool);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_bool(soap, tag, id, &a->xsd__boolean::__item, "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__boolean)
		return (xsd__boolean *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_bool(soap, tag, &a->xsd__boolean::__item, "xsd:boolean"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__boolean *p;
	size_t k = sizeof(xsd__boolean);
	if (n < 0)
	{	p = SOAP_NEW(xsd__boolean);
		if (p)
			((xsd__boolean*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__boolean, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__boolean*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__boolean location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__boolean(soap, tag ? tag : "xsd:boolean", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__base64Binary_)
		return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary_ *p;
	size_t k = sizeof(xsd__base64Binary_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__base64Binary_);
		if (p)
			((xsd__base64Binary_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__base64Binary_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__base64Binary_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary_(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__anyURI(soap, tag, id, &a->xsd__anyURI_::__item, "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__anyURI_)
		return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__anyURI(soap, tag, &a->xsd__anyURI_::__item, "xsd:anyURI"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__anyURI_ *p;
	size_t k = sizeof(xsd__anyURI_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__anyURI_);
		if (p)
			((xsd__anyURI_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__anyURI_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyURI_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__anyURI_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyURI_(soap, tag ? tag : "xsd:anyURI", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__anyURI, SOAP_TYPE_xsd__anyURI, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__QName(soap, &this->xsd__QName_::__item);
}

void xsd__QName_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__QName(soap, &this->xsd__QName_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__QName_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap *soap, const char *tag, int id, const xsd__QName_ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap *soap, const char *tag, xsd__QName_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName_, sizeof(xsd__QName_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__QName_)
		return (xsd__QName_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__QName(soap, tag, &a->xsd__QName_::__item, "xsd:QName"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__QName_ *p;
	size_t k = sizeof(xsd__QName_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__QName_);
		if (p)
			((xsd__QName_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__QName_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__QName_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__QName_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__QName_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__QName_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__QName_(soap, tag ? tag : "xsd:QName", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap *soap, xsd__QName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__IDREF_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
}

void xsd__IDREF_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__IDREF_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap *soap, const char *tag, int id, const xsd__IDREF_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__IDREF(soap, tag, id, &a->xsd__IDREF_::__item, "xsd:IDREF");
}

void *xsd__IDREF_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__IDREF_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap *soap, const char *tag, xsd__IDREF_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__IDREF_, sizeof(xsd__IDREF_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__IDREF_)
		return (xsd__IDREF_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__IDREF(soap, tag, &a->xsd__IDREF_::__item, "xsd:IDREF"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__IDREF_ *p;
	size_t k = sizeof(xsd__IDREF_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__IDREF_);
		if (p)
			((xsd__IDREF_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__IDREF_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__IDREF_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__IDREF_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__IDREF_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__IDREF_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__IDREF_(soap, tag ? tag : "xsd:IDREF", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__IDREF), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__IDREF, SOAP_TYPE_xsd__IDREF, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__IDREF(soap, tag ? tag : "xsd:IDREF", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__ID(soap, &this->xsd__ID_::__item);
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__ID(soap, &this->xsd__ID_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__ID(soap, tag, id, &a->xsd__ID_::__item, "xsd:ID");
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__ID_)
		return (xsd__ID_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__ID(soap, tag, &a->xsd__ID_::__item, "xsd:ID"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__ID_ *p;
	size_t k = sizeof(xsd__ID_);
	if (n < 0)
	{	p = SOAP_NEW(xsd__ID_);
		if (p)
			((xsd__ID_*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__ID_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__ID_*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__ID_ location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__ID_, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__ID_(soap, tag ? tag : "xsd:ID", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__ID), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__ID, SOAP_TYPE_xsd__ID, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__ID(soap, tag ? tag : "xsd:ID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	if (n < 0)
	{	p = SOAP_NEW(xsd__base64Binary);
		if (p)
			((xsd__base64Binary*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__base64Binary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__QName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 2, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__QName, SOAP_TYPE_xsd__QName, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__QName(soap, tag ? tag : "xsd:QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__anyType)
		return (xsd__anyType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "xsd:ID"))
		return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:IDREF"))
		return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:QName"))
		return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:anyURI"))
		return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:base64Binary"))
		return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:boolean"))
		return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:byte"))
		return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:dateTime"))
		return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:decimal"))
		return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:double"))
		return soap_instantiate_xsd__double(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:duration"))
		return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:float"))
		return soap_instantiate_xsd__float(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:int"))
		return soap_instantiate_xsd__int(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:long"))
		return soap_instantiate_xsd__long(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:short"))
		return soap_instantiate_xsd__short(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:string"))
		return soap_instantiate_xsd__string(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
		return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
		return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
		return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
		return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:char"))
		return soap_instantiate_ns3__char__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:duration"))
		return soap_instantiate_ns3__duration__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns3:guid"))
		return soap_instantiate_ns3__guid__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns4:Side"))
		return soap_instantiate_ns4__Side_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns4:ArrayOfGlove"))
		return soap_instantiate_ns4__ArrayOfGlove(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns4:Glove"))
		return soap_instantiate_ns4__Glove(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns4:Glove.Configuration"))
		return soap_instantiate_ns4__Glove_x002eConfiguration(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns4:Glove.Configuration.Profile"))
		return soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns5:ArrayOfint"))
		return soap_instantiate_ns5__ArrayOfint(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns5:ArrayOfstring"))
		return soap_instantiate_ns5__ArrayOfstring(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns5:ArrayOfKeyValueOfintint"))
		return soap_instantiate_ns5__ArrayOfKeyValueOfintint(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns5:ArrayOfKeyValueOfstringstring"))
		return soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(soap, n, NULL, NULL, size);
	xsd__anyType *p;
	size_t k = sizeof(xsd__anyType);
	if (n < 0)
	{	p = SOAP_NEW(xsd__anyType);
		if (p)
			((xsd__anyType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__anyType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__anyType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyType(soap, tag ? tag : "xsd:anyType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setRawData(struct soap *soap, struct __ns1__setRawData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setRawData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setRawData(struct soap *soap, const struct __ns1__setRawData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__setRawData(soap, &a->ns1__setRawData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setRawData(struct soap *soap, const char *tag, int id, const struct __ns1__setRawData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__setRawData(soap, "ns1:setRawData", -1, &a->ns1__setRawData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setRawData * SOAP_FMAC4 soap_in___ns1__setRawData(struct soap *soap, const char *tag, struct __ns1__setRawData *a, const char *type)
{
	size_t soap_flag_ns1__setRawData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__setRawData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setRawData, sizeof(struct __ns1__setRawData), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setRawData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setRawData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setRawData(soap, "ns1:setRawData", &a->ns1__setRawData, ""))
				{	soap_flag_ns1__setRawData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__setRawData * SOAP_FMAC2 soap_instantiate___ns1__setRawData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setRawData(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__setRawData *p;
	size_t k = sizeof(struct __ns1__setRawData);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__setRawData);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__setRawData, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__setRawData location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__setRawData, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setRawData(struct soap *soap, const struct __ns1__setRawData *a, const char *tag, const char *type)
{
	if (soap_out___ns1__setRawData(soap, tag ? tag : "-ns1:setRawData", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setRawData * SOAP_FMAC4 soap_get___ns1__setRawData(struct soap *soap, struct __ns1__setRawData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setRawData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setIMUStatus(struct soap *soap, struct __ns1__setIMUStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setIMUStatus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setIMUStatus(struct soap *soap, const struct __ns1__setIMUStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__setIMUStatus(soap, &a->ns1__setIMUStatus);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setIMUStatus(struct soap *soap, const char *tag, int id, const struct __ns1__setIMUStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__setIMUStatus(soap, "ns1:setIMUStatus", -1, &a->ns1__setIMUStatus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setIMUStatus * SOAP_FMAC4 soap_in___ns1__setIMUStatus(struct soap *soap, const char *tag, struct __ns1__setIMUStatus *a, const char *type)
{
	size_t soap_flag_ns1__setIMUStatus = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__setIMUStatus *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setIMUStatus, sizeof(struct __ns1__setIMUStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setIMUStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setIMUStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setIMUStatus(soap, "ns1:setIMUStatus", &a->ns1__setIMUStatus, ""))
				{	soap_flag_ns1__setIMUStatus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__setIMUStatus * SOAP_FMAC2 soap_instantiate___ns1__setIMUStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setIMUStatus(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__setIMUStatus *p;
	size_t k = sizeof(struct __ns1__setIMUStatus);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__setIMUStatus);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__setIMUStatus, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__setIMUStatus location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__setIMUStatus, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setIMUStatus(struct soap *soap, const struct __ns1__setIMUStatus *a, const char *tag, const char *type)
{
	if (soap_out___ns1__setIMUStatus(soap, tag ? tag : "-ns1:setIMUStatus", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setIMUStatus * SOAP_FMAC4 soap_get___ns1__setIMUStatus(struct soap *soap, struct __ns1__setIMUStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setIMUStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__startIMU(struct soap *soap, struct __ns1__startIMU *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__startIMU = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__startIMU(struct soap *soap, const struct __ns1__startIMU *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__startIMU(soap, &a->ns1__startIMU);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__startIMU(struct soap *soap, const char *tag, int id, const struct __ns1__startIMU *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__startIMU(soap, "ns1:startIMU", -1, &a->ns1__startIMU, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__startIMU * SOAP_FMAC4 soap_in___ns1__startIMU(struct soap *soap, const char *tag, struct __ns1__startIMU *a, const char *type)
{
	size_t soap_flag_ns1__startIMU = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__startIMU *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__startIMU, sizeof(struct __ns1__startIMU), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__startIMU(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__startIMU && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__startIMU(soap, "ns1:startIMU", &a->ns1__startIMU, ""))
				{	soap_flag_ns1__startIMU--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__startIMU * SOAP_FMAC2 soap_instantiate___ns1__startIMU(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__startIMU(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__startIMU *p;
	size_t k = sizeof(struct __ns1__startIMU);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__startIMU);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__startIMU, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__startIMU location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__startIMU, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__startIMU(struct soap *soap, const struct __ns1__startIMU *a, const char *tag, const char *type)
{
	if (soap_out___ns1__startIMU(soap, tag ? tag : "-ns1:startIMU", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__startIMU * SOAP_FMAC4 soap_get___ns1__startIMU(struct soap *soap, struct __ns1__startIMU *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__startIMU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__resetFlexors(struct soap *soap, struct __ns1__resetFlexors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__resetFlexors = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__resetFlexors(struct soap *soap, const struct __ns1__resetFlexors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__resetFlexors(soap, &a->ns1__resetFlexors);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__resetFlexors(struct soap *soap, const char *tag, int id, const struct __ns1__resetFlexors *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__resetFlexors(soap, "ns1:resetFlexors", -1, &a->ns1__resetFlexors, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__resetFlexors * SOAP_FMAC4 soap_in___ns1__resetFlexors(struct soap *soap, const char *tag, struct __ns1__resetFlexors *a, const char *type)
{
	size_t soap_flag_ns1__resetFlexors = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__resetFlexors *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__resetFlexors, sizeof(struct __ns1__resetFlexors), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__resetFlexors(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__resetFlexors && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__resetFlexors(soap, "ns1:resetFlexors", &a->ns1__resetFlexors, ""))
				{	soap_flag_ns1__resetFlexors--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__resetFlexors * SOAP_FMAC2 soap_instantiate___ns1__resetFlexors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__resetFlexors(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__resetFlexors *p;
	size_t k = sizeof(struct __ns1__resetFlexors);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__resetFlexors);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__resetFlexors, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__resetFlexors location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__resetFlexors, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__resetFlexors(struct soap *soap, const struct __ns1__resetFlexors *a, const char *tag, const char *type)
{
	if (soap_out___ns1__resetFlexors(soap, tag ? tag : "-ns1:resetFlexors", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__resetFlexors * SOAP_FMAC4 soap_get___ns1__resetFlexors(struct soap *soap, struct __ns1__resetFlexors *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__resetFlexors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setThreshold(struct soap *soap, struct __ns1__setThreshold *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setThreshold = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setThreshold(struct soap *soap, const struct __ns1__setThreshold *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__setThreshold(soap, &a->ns1__setThreshold);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setThreshold(struct soap *soap, const char *tag, int id, const struct __ns1__setThreshold *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__setThreshold(soap, "ns1:setThreshold", -1, &a->ns1__setThreshold, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setThreshold * SOAP_FMAC4 soap_in___ns1__setThreshold(struct soap *soap, const char *tag, struct __ns1__setThreshold *a, const char *type)
{
	size_t soap_flag_ns1__setThreshold = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__setThreshold *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setThreshold, sizeof(struct __ns1__setThreshold), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setThreshold(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setThreshold && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setThreshold(soap, "ns1:setThreshold", &a->ns1__setThreshold, ""))
				{	soap_flag_ns1__setThreshold--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__setThreshold * SOAP_FMAC2 soap_instantiate___ns1__setThreshold(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setThreshold(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__setThreshold *p;
	size_t k = sizeof(struct __ns1__setThreshold);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__setThreshold);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__setThreshold, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__setThreshold location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__setThreshold, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setThreshold(struct soap *soap, const struct __ns1__setThreshold *a, const char *tag, const char *type)
{
	if (soap_out___ns1__setThreshold(soap, tag ? tag : "-ns1:setThreshold", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setThreshold * SOAP_FMAC4 soap_get___ns1__setThreshold(struct soap *soap, struct __ns1__setThreshold *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setThreshold(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__confirmCalibration(struct soap *soap, struct __ns1__confirmCalibration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__confirmCalibration = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__confirmCalibration(struct soap *soap, const struct __ns1__confirmCalibration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__confirmCalibration(soap, &a->ns1__confirmCalibration);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__confirmCalibration(struct soap *soap, const char *tag, int id, const struct __ns1__confirmCalibration *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__confirmCalibration(soap, "ns1:confirmCalibration", -1, &a->ns1__confirmCalibration, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__confirmCalibration * SOAP_FMAC4 soap_in___ns1__confirmCalibration(struct soap *soap, const char *tag, struct __ns1__confirmCalibration *a, const char *type)
{
	size_t soap_flag_ns1__confirmCalibration = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__confirmCalibration *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__confirmCalibration, sizeof(struct __ns1__confirmCalibration), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__confirmCalibration(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__confirmCalibration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__confirmCalibration(soap, "ns1:confirmCalibration", &a->ns1__confirmCalibration, ""))
				{	soap_flag_ns1__confirmCalibration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__confirmCalibration * SOAP_FMAC2 soap_instantiate___ns1__confirmCalibration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__confirmCalibration(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__confirmCalibration *p;
	size_t k = sizeof(struct __ns1__confirmCalibration);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__confirmCalibration);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__confirmCalibration, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__confirmCalibration location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__confirmCalibration, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__confirmCalibration(struct soap *soap, const struct __ns1__confirmCalibration *a, const char *tag, const char *type)
{
	if (soap_out___ns1__confirmCalibration(soap, tag ? tag : "-ns1:confirmCalibration", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__confirmCalibration * SOAP_FMAC4 soap_get___ns1__confirmCalibration(struct soap *soap, struct __ns1__confirmCalibration *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__confirmCalibration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__calibrateFlexors(struct soap *soap, struct __ns1__calibrateFlexors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__calibrateFlexors = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__calibrateFlexors(struct soap *soap, const struct __ns1__calibrateFlexors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__calibrateFlexors(soap, &a->ns1__calibrateFlexors);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__calibrateFlexors(struct soap *soap, const char *tag, int id, const struct __ns1__calibrateFlexors *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__calibrateFlexors(soap, "ns1:calibrateFlexors", -1, &a->ns1__calibrateFlexors, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__calibrateFlexors * SOAP_FMAC4 soap_in___ns1__calibrateFlexors(struct soap *soap, const char *tag, struct __ns1__calibrateFlexors *a, const char *type)
{
	size_t soap_flag_ns1__calibrateFlexors = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__calibrateFlexors *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__calibrateFlexors, sizeof(struct __ns1__calibrateFlexors), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__calibrateFlexors(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__calibrateFlexors && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__calibrateFlexors(soap, "ns1:calibrateFlexors", &a->ns1__calibrateFlexors, ""))
				{	soap_flag_ns1__calibrateFlexors--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__calibrateFlexors * SOAP_FMAC2 soap_instantiate___ns1__calibrateFlexors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__calibrateFlexors(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__calibrateFlexors *p;
	size_t k = sizeof(struct __ns1__calibrateFlexors);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__calibrateFlexors);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__calibrateFlexors, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__calibrateFlexors location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__calibrateFlexors, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__calibrateFlexors(struct soap *soap, const struct __ns1__calibrateFlexors *a, const char *tag, const char *type)
{
	if (soap_out___ns1__calibrateFlexors(soap, tag ? tag : "-ns1:calibrateFlexors", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__calibrateFlexors * SOAP_FMAC4 soap_get___ns1__calibrateFlexors(struct soap *soap, struct __ns1__calibrateFlexors *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__calibrateFlexors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeFlexor(struct soap *soap, struct __ns1__removeFlexor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__removeFlexor = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeFlexor(struct soap *soap, const struct __ns1__removeFlexor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__removeFlexor(soap, &a->ns1__removeFlexor);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeFlexor(struct soap *soap, const char *tag, int id, const struct __ns1__removeFlexor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__removeFlexor(soap, "ns1:removeFlexor", -1, &a->ns1__removeFlexor, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__removeFlexor * SOAP_FMAC4 soap_in___ns1__removeFlexor(struct soap *soap, const char *tag, struct __ns1__removeFlexor *a, const char *type)
{
	size_t soap_flag_ns1__removeFlexor = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__removeFlexor *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__removeFlexor, sizeof(struct __ns1__removeFlexor), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__removeFlexor(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__removeFlexor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__removeFlexor(soap, "ns1:removeFlexor", &a->ns1__removeFlexor, ""))
				{	soap_flag_ns1__removeFlexor--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__removeFlexor * SOAP_FMAC2 soap_instantiate___ns1__removeFlexor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__removeFlexor(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__removeFlexor *p;
	size_t k = sizeof(struct __ns1__removeFlexor);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__removeFlexor);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__removeFlexor, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__removeFlexor location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__removeFlexor, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeFlexor(struct soap *soap, const struct __ns1__removeFlexor *a, const char *tag, const char *type)
{
	if (soap_out___ns1__removeFlexor(soap, tag ? tag : "-ns1:removeFlexor", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__removeFlexor * SOAP_FMAC4 soap_get___ns1__removeFlexor(struct soap *soap, struct __ns1__removeFlexor *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__removeFlexor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addFlexor(struct soap *soap, struct __ns1__addFlexor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__addFlexor = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addFlexor(struct soap *soap, const struct __ns1__addFlexor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__addFlexor(soap, &a->ns1__addFlexor);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addFlexor(struct soap *soap, const char *tag, int id, const struct __ns1__addFlexor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__addFlexor(soap, "ns1:addFlexor", -1, &a->ns1__addFlexor, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addFlexor * SOAP_FMAC4 soap_in___ns1__addFlexor(struct soap *soap, const char *tag, struct __ns1__addFlexor *a, const char *type)
{
	size_t soap_flag_ns1__addFlexor = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__addFlexor *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__addFlexor, sizeof(struct __ns1__addFlexor), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__addFlexor(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__addFlexor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__addFlexor(soap, "ns1:addFlexor", &a->ns1__addFlexor, ""))
				{	soap_flag_ns1__addFlexor--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__addFlexor * SOAP_FMAC2 soap_instantiate___ns1__addFlexor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__addFlexor(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__addFlexor *p;
	size_t k = sizeof(struct __ns1__addFlexor);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__addFlexor);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__addFlexor, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__addFlexor location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__addFlexor, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addFlexor(struct soap *soap, const struct __ns1__addFlexor *a, const char *tag, const char *type)
{
	if (soap_out___ns1__addFlexor(soap, tag ? tag : "-ns1:addFlexor", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addFlexor * SOAP_FMAC4 soap_get___ns1__addFlexor(struct soap *soap, struct __ns1__addFlexor *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__addFlexor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ActivateMany(struct soap *soap, struct __ns1__ActivateMany *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ActivateMany = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ActivateMany(struct soap *soap, const struct __ns1__ActivateMany *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ActivateMany(soap, &a->ns1__ActivateMany);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ActivateMany(struct soap *soap, const char *tag, int id, const struct __ns1__ActivateMany *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ActivateMany(soap, "ns1:ActivateMany", -1, &a->ns1__ActivateMany, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ActivateMany * SOAP_FMAC4 soap_in___ns1__ActivateMany(struct soap *soap, const char *tag, struct __ns1__ActivateMany *a, const char *type)
{
	size_t soap_flag_ns1__ActivateMany = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ActivateMany *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ActivateMany, sizeof(struct __ns1__ActivateMany), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ActivateMany(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ActivateMany && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ActivateMany(soap, "ns1:ActivateMany", &a->ns1__ActivateMany, ""))
				{	soap_flag_ns1__ActivateMany--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ActivateMany * SOAP_FMAC2 soap_instantiate___ns1__ActivateMany(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ActivateMany(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ActivateMany *p;
	size_t k = sizeof(struct __ns1__ActivateMany);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__ActivateMany);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__ActivateMany, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ActivateMany location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__ActivateMany, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ActivateMany(struct soap *soap, const struct __ns1__ActivateMany *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ActivateMany(soap, tag ? tag : "-ns1:ActivateMany", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ActivateMany * SOAP_FMAC4 soap_get___ns1__ActivateMany(struct soap *soap, struct __ns1__ActivateMany *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ActivateMany(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Disconnect(struct soap *soap, struct __ns1__Disconnect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Disconnect = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Disconnect(struct soap *soap, const struct __ns1__Disconnect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Disconnect(soap, &a->ns1__Disconnect);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Disconnect(struct soap *soap, const char *tag, int id, const struct __ns1__Disconnect *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Disconnect(soap, "ns1:Disconnect", -1, &a->ns1__Disconnect, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Disconnect * SOAP_FMAC4 soap_in___ns1__Disconnect(struct soap *soap, const char *tag, struct __ns1__Disconnect *a, const char *type)
{
	size_t soap_flag_ns1__Disconnect = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Disconnect *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Disconnect, sizeof(struct __ns1__Disconnect), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Disconnect(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Disconnect && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Disconnect(soap, "ns1:Disconnect", &a->ns1__Disconnect, ""))
				{	soap_flag_ns1__Disconnect--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Disconnect * SOAP_FMAC2 soap_instantiate___ns1__Disconnect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Disconnect(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Disconnect *p;
	size_t k = sizeof(struct __ns1__Disconnect);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__Disconnect);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__Disconnect, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Disconnect location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__Disconnect, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Disconnect(struct soap *soap, const struct __ns1__Disconnect *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Disconnect(soap, tag ? tag : "-ns1:Disconnect", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Disconnect * SOAP_FMAC4 soap_get___ns1__Disconnect(struct soap *soap, struct __ns1__Disconnect *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Disconnect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Connect(struct soap *soap, struct __ns1__Connect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Connect = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Connect(struct soap *soap, const struct __ns1__Connect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Connect(soap, &a->ns1__Connect);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Connect(struct soap *soap, const char *tag, int id, const struct __ns1__Connect *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Connect(soap, "ns1:Connect", -1, &a->ns1__Connect, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Connect * SOAP_FMAC4 soap_in___ns1__Connect(struct soap *soap, const char *tag, struct __ns1__Connect *a, const char *type)
{
	size_t soap_flag_ns1__Connect = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Connect *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Connect, sizeof(struct __ns1__Connect), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Connect(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Connect && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Connect(soap, "ns1:Connect", &a->ns1__Connect, ""))
				{	soap_flag_ns1__Connect--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Connect * SOAP_FMAC2 soap_instantiate___ns1__Connect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Connect(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Connect *p;
	size_t k = sizeof(struct __ns1__Connect);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__Connect);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__Connect, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Connect location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__Connect, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Connect(struct soap *soap, const struct __ns1__Connect *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Connect(soap, tag ? tag : "-ns1:Connect", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Connect * SOAP_FMAC4 soap_get___ns1__Connect(struct soap *soap, struct __ns1__Connect *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Connect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Activate(struct soap *soap, struct __ns1__Activate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Activate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Activate(struct soap *soap, const struct __ns1__Activate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Activate(soap, &a->ns1__Activate);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Activate(struct soap *soap, const char *tag, int id, const struct __ns1__Activate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Activate(soap, "ns1:Activate", -1, &a->ns1__Activate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Activate * SOAP_FMAC4 soap_in___ns1__Activate(struct soap *soap, const char *tag, struct __ns1__Activate *a, const char *type)
{
	size_t soap_flag_ns1__Activate = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Activate *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Activate, sizeof(struct __ns1__Activate), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Activate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Activate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Activate(soap, "ns1:Activate", &a->ns1__Activate, ""))
				{	soap_flag_ns1__Activate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Activate * SOAP_FMAC2 soap_instantiate___ns1__Activate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Activate(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Activate *p;
	size_t k = sizeof(struct __ns1__Activate);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__Activate);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__Activate, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Activate location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__Activate, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Activate(struct soap *soap, const struct __ns1__Activate *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Activate(soap, tag ? tag : "-ns1:Activate", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Activate * SOAP_FMAC4 soap_get___ns1__Activate(struct soap *soap, struct __ns1__Activate *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Activate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveGlove(struct soap *soap, struct __ns1__SaveGlove *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SaveGlove = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveGlove(struct soap *soap, const struct __ns1__SaveGlove *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SaveGlove(soap, &a->ns1__SaveGlove);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveGlove(struct soap *soap, const char *tag, int id, const struct __ns1__SaveGlove *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SaveGlove(soap, "ns1:SaveGlove", -1, &a->ns1__SaveGlove, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveGlove * SOAP_FMAC4 soap_in___ns1__SaveGlove(struct soap *soap, const char *tag, struct __ns1__SaveGlove *a, const char *type)
{
	size_t soap_flag_ns1__SaveGlove = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SaveGlove *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SaveGlove, sizeof(struct __ns1__SaveGlove), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SaveGlove(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SaveGlove && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SaveGlove(soap, "ns1:SaveGlove", &a->ns1__SaveGlove, ""))
				{	soap_flag_ns1__SaveGlove--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__SaveGlove * SOAP_FMAC2 soap_instantiate___ns1__SaveGlove(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SaveGlove(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__SaveGlove *p;
	size_t k = sizeof(struct __ns1__SaveGlove);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__SaveGlove);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__SaveGlove, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__SaveGlove location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__SaveGlove, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveGlove(struct soap *soap, const struct __ns1__SaveGlove *a, const char *tag, const char *type)
{
	if (soap_out___ns1__SaveGlove(soap, tag ? tag : "-ns1:SaveGlove", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SaveGlove * SOAP_FMAC4 soap_get___ns1__SaveGlove(struct soap *soap, struct __ns1__SaveGlove *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SaveGlove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RefreshGloves(struct soap *soap, struct __ns1__RefreshGloves *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RefreshGloves = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RefreshGloves(struct soap *soap, const struct __ns1__RefreshGloves *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__RefreshGloves(soap, &a->ns1__RefreshGloves);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RefreshGloves(struct soap *soap, const char *tag, int id, const struct __ns1__RefreshGloves *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__RefreshGloves(soap, "ns1:RefreshGloves", -1, &a->ns1__RefreshGloves, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__RefreshGloves * SOAP_FMAC4 soap_in___ns1__RefreshGloves(struct soap *soap, const char *tag, struct __ns1__RefreshGloves *a, const char *type)
{
	size_t soap_flag_ns1__RefreshGloves = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__RefreshGloves *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__RefreshGloves, sizeof(struct __ns1__RefreshGloves), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__RefreshGloves(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RefreshGloves && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RefreshGloves(soap, "ns1:RefreshGloves", &a->ns1__RefreshGloves, ""))
				{	soap_flag_ns1__RefreshGloves--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__RefreshGloves * SOAP_FMAC2 soap_instantiate___ns1__RefreshGloves(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__RefreshGloves(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__RefreshGloves *p;
	size_t k = sizeof(struct __ns1__RefreshGloves);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__RefreshGloves);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__RefreshGloves, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__RefreshGloves location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__RefreshGloves, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RefreshGloves(struct soap *soap, const struct __ns1__RefreshGloves *a, const char *tag, const char *type)
{
	if (soap_out___ns1__RefreshGloves(soap, tag ? tag : "-ns1:RefreshGloves", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__RefreshGloves * SOAP_FMAC4 soap_get___ns1__RefreshGloves(struct soap *soap, struct __ns1__RefreshGloves *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__RefreshGloves(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGloves(struct soap *soap, struct __ns1__GetGloves *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetGloves = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGloves(struct soap *soap, const struct __ns1__GetGloves *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetGloves(soap, &a->ns1__GetGloves);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGloves(struct soap *soap, const char *tag, int id, const struct __ns1__GetGloves *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetGloves(soap, "ns1:GetGloves", -1, &a->ns1__GetGloves, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGloves * SOAP_FMAC4 soap_in___ns1__GetGloves(struct soap *soap, const char *tag, struct __ns1__GetGloves *a, const char *type)
{
	size_t soap_flag_ns1__GetGloves = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetGloves *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetGloves, sizeof(struct __ns1__GetGloves), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetGloves(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetGloves && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetGloves(soap, "ns1:GetGloves", &a->ns1__GetGloves, ""))
				{	soap_flag_ns1__GetGloves--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetGloves * SOAP_FMAC2 soap_instantiate___ns1__GetGloves(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetGloves(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetGloves *p;
	size_t k = sizeof(struct __ns1__GetGloves);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__GetGloves);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__GetGloves, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetGloves location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__GetGloves, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGloves(struct soap *soap, const struct __ns1__GetGloves *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetGloves(soap, tag ? tag : "-ns1:GetGloves", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGloves * SOAP_FMAC4 soap_get___ns1__GetGloves(struct soap *soap, struct __ns1__GetGloves *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetGloves(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setRawData(struct soap *soap, _ns1__setRawData *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setRawData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setRawData(struct soap *soap, const char *tag, int id, _ns1__setRawData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setRawData, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__setRawData ? type : NULL);
}

SOAP_FMAC3 _ns1__setRawData ** SOAP_FMAC4 soap_in_PointerTo_ns1__setRawData(struct soap *soap, const char *tag, _ns1__setRawData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setRawData **)soap_malloc(soap, sizeof(_ns1__setRawData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setRawData *)soap_instantiate__ns1__setRawData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__setRawData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setRawData, sizeof(_ns1__setRawData), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setRawData(struct soap *soap, _ns1__setRawData *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__setRawData(soap, tag ? tag : "ns1:setRawData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setRawData ** SOAP_FMAC4 soap_get_PointerTo_ns1__setRawData(struct soap *soap, _ns1__setRawData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setRawData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setIMUStatus(struct soap *soap, _ns1__setIMUStatus *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setIMUStatus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setIMUStatus(struct soap *soap, const char *tag, int id, _ns1__setIMUStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setIMUStatus, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__setIMUStatus ? type : NULL);
}

SOAP_FMAC3 _ns1__setIMUStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__setIMUStatus(struct soap *soap, const char *tag, _ns1__setIMUStatus **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setIMUStatus **)soap_malloc(soap, sizeof(_ns1__setIMUStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setIMUStatus *)soap_instantiate__ns1__setIMUStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__setIMUStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setIMUStatus, sizeof(_ns1__setIMUStatus), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setIMUStatus(struct soap *soap, _ns1__setIMUStatus *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__setIMUStatus(soap, tag ? tag : "ns1:setIMUStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setIMUStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__setIMUStatus(struct soap *soap, _ns1__setIMUStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setIMUStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__startIMU(struct soap *soap, _ns1__startIMU *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__startIMU))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__startIMU(struct soap *soap, const char *tag, int id, _ns1__startIMU *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__startIMU, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__startIMU ? type : NULL);
}

SOAP_FMAC3 _ns1__startIMU ** SOAP_FMAC4 soap_in_PointerTo_ns1__startIMU(struct soap *soap, const char *tag, _ns1__startIMU **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__startIMU **)soap_malloc(soap, sizeof(_ns1__startIMU *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__startIMU *)soap_instantiate__ns1__startIMU(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__startIMU **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__startIMU, sizeof(_ns1__startIMU), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__startIMU(struct soap *soap, _ns1__startIMU *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__startIMU(soap, tag ? tag : "ns1:startIMU", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__startIMU ** SOAP_FMAC4 soap_get_PointerTo_ns1__startIMU(struct soap *soap, _ns1__startIMU **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__startIMU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__resetFlexors(struct soap *soap, _ns1__resetFlexors *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__resetFlexors))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__resetFlexors(struct soap *soap, const char *tag, int id, _ns1__resetFlexors *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__resetFlexors, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__resetFlexors ? type : NULL);
}

SOAP_FMAC3 _ns1__resetFlexors ** SOAP_FMAC4 soap_in_PointerTo_ns1__resetFlexors(struct soap *soap, const char *tag, _ns1__resetFlexors **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__resetFlexors **)soap_malloc(soap, sizeof(_ns1__resetFlexors *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__resetFlexors *)soap_instantiate__ns1__resetFlexors(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__resetFlexors **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__resetFlexors, sizeof(_ns1__resetFlexors), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__resetFlexors(struct soap *soap, _ns1__resetFlexors *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__resetFlexors(soap, tag ? tag : "ns1:resetFlexors", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__resetFlexors ** SOAP_FMAC4 soap_get_PointerTo_ns1__resetFlexors(struct soap *soap, _ns1__resetFlexors **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__resetFlexors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setThreshold(struct soap *soap, _ns1__setThreshold *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setThreshold))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setThreshold(struct soap *soap, const char *tag, int id, _ns1__setThreshold *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setThreshold, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__setThreshold ? type : NULL);
}

SOAP_FMAC3 _ns1__setThreshold ** SOAP_FMAC4 soap_in_PointerTo_ns1__setThreshold(struct soap *soap, const char *tag, _ns1__setThreshold **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setThreshold **)soap_malloc(soap, sizeof(_ns1__setThreshold *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setThreshold *)soap_instantiate__ns1__setThreshold(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__setThreshold **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setThreshold, sizeof(_ns1__setThreshold), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setThreshold(struct soap *soap, _ns1__setThreshold *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__setThreshold(soap, tag ? tag : "ns1:setThreshold", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setThreshold ** SOAP_FMAC4 soap_get_PointerTo_ns1__setThreshold(struct soap *soap, _ns1__setThreshold **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setThreshold(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__confirmCalibration(struct soap *soap, _ns1__confirmCalibration *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__confirmCalibration))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__confirmCalibration(struct soap *soap, const char *tag, int id, _ns1__confirmCalibration *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__confirmCalibration, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__confirmCalibration ? type : NULL);
}

SOAP_FMAC3 _ns1__confirmCalibration ** SOAP_FMAC4 soap_in_PointerTo_ns1__confirmCalibration(struct soap *soap, const char *tag, _ns1__confirmCalibration **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__confirmCalibration **)soap_malloc(soap, sizeof(_ns1__confirmCalibration *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__confirmCalibration *)soap_instantiate__ns1__confirmCalibration(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__confirmCalibration **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__confirmCalibration, sizeof(_ns1__confirmCalibration), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__confirmCalibration(struct soap *soap, _ns1__confirmCalibration *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__confirmCalibration(soap, tag ? tag : "ns1:confirmCalibration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__confirmCalibration ** SOAP_FMAC4 soap_get_PointerTo_ns1__confirmCalibration(struct soap *soap, _ns1__confirmCalibration **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__confirmCalibration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__calibrateFlexors(struct soap *soap, _ns1__calibrateFlexors *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__calibrateFlexors))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__calibrateFlexors(struct soap *soap, const char *tag, int id, _ns1__calibrateFlexors *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__calibrateFlexors, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__calibrateFlexors ? type : NULL);
}

SOAP_FMAC3 _ns1__calibrateFlexors ** SOAP_FMAC4 soap_in_PointerTo_ns1__calibrateFlexors(struct soap *soap, const char *tag, _ns1__calibrateFlexors **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__calibrateFlexors **)soap_malloc(soap, sizeof(_ns1__calibrateFlexors *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__calibrateFlexors *)soap_instantiate__ns1__calibrateFlexors(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__calibrateFlexors **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__calibrateFlexors, sizeof(_ns1__calibrateFlexors), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__calibrateFlexors(struct soap *soap, _ns1__calibrateFlexors *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__calibrateFlexors(soap, tag ? tag : "ns1:calibrateFlexors", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__calibrateFlexors ** SOAP_FMAC4 soap_get_PointerTo_ns1__calibrateFlexors(struct soap *soap, _ns1__calibrateFlexors **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__calibrateFlexors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__removeFlexor(struct soap *soap, _ns1__removeFlexor *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__removeFlexor))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__removeFlexor(struct soap *soap, const char *tag, int id, _ns1__removeFlexor *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__removeFlexor, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__removeFlexor ? type : NULL);
}

SOAP_FMAC3 _ns1__removeFlexor ** SOAP_FMAC4 soap_in_PointerTo_ns1__removeFlexor(struct soap *soap, const char *tag, _ns1__removeFlexor **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__removeFlexor **)soap_malloc(soap, sizeof(_ns1__removeFlexor *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__removeFlexor *)soap_instantiate__ns1__removeFlexor(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__removeFlexor **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__removeFlexor, sizeof(_ns1__removeFlexor), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__removeFlexor(struct soap *soap, _ns1__removeFlexor *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__removeFlexor(soap, tag ? tag : "ns1:removeFlexor", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__removeFlexor ** SOAP_FMAC4 soap_get_PointerTo_ns1__removeFlexor(struct soap *soap, _ns1__removeFlexor **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__removeFlexor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__addFlexor(struct soap *soap, _ns1__addFlexor *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__addFlexor))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__addFlexor(struct soap *soap, const char *tag, int id, _ns1__addFlexor *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__addFlexor, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__addFlexor ? type : NULL);
}

SOAP_FMAC3 _ns1__addFlexor ** SOAP_FMAC4 soap_in_PointerTo_ns1__addFlexor(struct soap *soap, const char *tag, _ns1__addFlexor **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__addFlexor **)soap_malloc(soap, sizeof(_ns1__addFlexor *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__addFlexor *)soap_instantiate__ns1__addFlexor(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__addFlexor **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__addFlexor, sizeof(_ns1__addFlexor), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__addFlexor(struct soap *soap, _ns1__addFlexor *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__addFlexor(soap, tag ? tag : "ns1:addFlexor", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__addFlexor ** SOAP_FMAC4 soap_get_PointerTo_ns1__addFlexor(struct soap *soap, _ns1__addFlexor **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__addFlexor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ActivateMany(struct soap *soap, _ns1__ActivateMany *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ActivateMany))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ActivateMany(struct soap *soap, const char *tag, int id, _ns1__ActivateMany *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ActivateMany, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ActivateMany ? type : NULL);
}

SOAP_FMAC3 _ns1__ActivateMany ** SOAP_FMAC4 soap_in_PointerTo_ns1__ActivateMany(struct soap *soap, const char *tag, _ns1__ActivateMany **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ActivateMany **)soap_malloc(soap, sizeof(_ns1__ActivateMany *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ActivateMany *)soap_instantiate__ns1__ActivateMany(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ActivateMany **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ActivateMany, sizeof(_ns1__ActivateMany), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ActivateMany(struct soap *soap, _ns1__ActivateMany *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ActivateMany(soap, tag ? tag : "ns1:ActivateMany", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ActivateMany ** SOAP_FMAC4 soap_get_PointerTo_ns1__ActivateMany(struct soap *soap, _ns1__ActivateMany **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ActivateMany(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Disconnect(struct soap *soap, _ns1__Disconnect *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Disconnect))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Disconnect(struct soap *soap, const char *tag, int id, _ns1__Disconnect *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Disconnect, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__Disconnect ? type : NULL);
}

SOAP_FMAC3 _ns1__Disconnect ** SOAP_FMAC4 soap_in_PointerTo_ns1__Disconnect(struct soap *soap, const char *tag, _ns1__Disconnect **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Disconnect **)soap_malloc(soap, sizeof(_ns1__Disconnect *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Disconnect *)soap_instantiate__ns1__Disconnect(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__Disconnect **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Disconnect, sizeof(_ns1__Disconnect), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Disconnect(struct soap *soap, _ns1__Disconnect *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__Disconnect(soap, tag ? tag : "ns1:Disconnect", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Disconnect ** SOAP_FMAC4 soap_get_PointerTo_ns1__Disconnect(struct soap *soap, _ns1__Disconnect **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Disconnect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Connect(struct soap *soap, _ns1__Connect *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Connect))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Connect(struct soap *soap, const char *tag, int id, _ns1__Connect *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Connect, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__Connect ? type : NULL);
}

SOAP_FMAC3 _ns1__Connect ** SOAP_FMAC4 soap_in_PointerTo_ns1__Connect(struct soap *soap, const char *tag, _ns1__Connect **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Connect **)soap_malloc(soap, sizeof(_ns1__Connect *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Connect *)soap_instantiate__ns1__Connect(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__Connect **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Connect, sizeof(_ns1__Connect), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Connect(struct soap *soap, _ns1__Connect *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__Connect(soap, tag ? tag : "ns1:Connect", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Connect ** SOAP_FMAC4 soap_get_PointerTo_ns1__Connect(struct soap *soap, _ns1__Connect **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Connect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Activate(struct soap *soap, _ns1__Activate *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Activate))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Activate(struct soap *soap, const char *tag, int id, _ns1__Activate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Activate, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__Activate ? type : NULL);
}

SOAP_FMAC3 _ns1__Activate ** SOAP_FMAC4 soap_in_PointerTo_ns1__Activate(struct soap *soap, const char *tag, _ns1__Activate **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Activate **)soap_malloc(soap, sizeof(_ns1__Activate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Activate *)soap_instantiate__ns1__Activate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__Activate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Activate, sizeof(_ns1__Activate), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Activate(struct soap *soap, _ns1__Activate *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__Activate(soap, tag ? tag : "ns1:Activate", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Activate ** SOAP_FMAC4 soap_get_PointerTo_ns1__Activate(struct soap *soap, _ns1__Activate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Activate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SaveGlove(struct soap *soap, _ns1__SaveGlove *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SaveGlove))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SaveGlove(struct soap *soap, const char *tag, int id, _ns1__SaveGlove *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SaveGlove, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__SaveGlove ? type : NULL);
}

SOAP_FMAC3 _ns1__SaveGlove ** SOAP_FMAC4 soap_in_PointerTo_ns1__SaveGlove(struct soap *soap, const char *tag, _ns1__SaveGlove **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SaveGlove **)soap_malloc(soap, sizeof(_ns1__SaveGlove *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SaveGlove *)soap_instantiate__ns1__SaveGlove(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__SaveGlove **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SaveGlove, sizeof(_ns1__SaveGlove), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SaveGlove(struct soap *soap, _ns1__SaveGlove *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__SaveGlove(soap, tag ? tag : "ns1:SaveGlove", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SaveGlove ** SOAP_FMAC4 soap_get_PointerTo_ns1__SaveGlove(struct soap *soap, _ns1__SaveGlove **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SaveGlove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RefreshGloves(struct soap *soap, _ns1__RefreshGloves *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RefreshGloves))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RefreshGloves(struct soap *soap, const char *tag, int id, _ns1__RefreshGloves *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RefreshGloves, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__RefreshGloves ? type : NULL);
}

SOAP_FMAC3 _ns1__RefreshGloves ** SOAP_FMAC4 soap_in_PointerTo_ns1__RefreshGloves(struct soap *soap, const char *tag, _ns1__RefreshGloves **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RefreshGloves **)soap_malloc(soap, sizeof(_ns1__RefreshGloves *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RefreshGloves *)soap_instantiate__ns1__RefreshGloves(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__RefreshGloves **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RefreshGloves, sizeof(_ns1__RefreshGloves), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RefreshGloves(struct soap *soap, _ns1__RefreshGloves *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__RefreshGloves(soap, tag ? tag : "ns1:RefreshGloves", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__RefreshGloves ** SOAP_FMAC4 soap_get_PointerTo_ns1__RefreshGloves(struct soap *soap, _ns1__RefreshGloves **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RefreshGloves(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGloves(struct soap *soap, _ns1__GetGloves *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetGloves))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGloves(struct soap *soap, const char *tag, int id, _ns1__GetGloves *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetGloves, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetGloves ? type : NULL);
}

SOAP_FMAC3 _ns1__GetGloves ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGloves(struct soap *soap, const char *tag, _ns1__GetGloves **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetGloves **)soap_malloc(soap, sizeof(_ns1__GetGloves *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetGloves *)soap_instantiate__ns1__GetGloves(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetGloves **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetGloves, sizeof(_ns1__GetGloves), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGloves(struct soap *soap, _ns1__GetGloves *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetGloves(soap, tag ? tag : "ns1:GetGloves", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetGloves ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGloves(struct soap *soap, _ns1__GetGloves **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetGloves(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring))
		soap_serialize_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *tag, int id, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *tag, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> **)soap_malloc(soap, sizeof(std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag ? tag : "", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint))
		soap_serialize_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const char *tag, int id, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const char *tag, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> **)soap_malloc(soap, sizeof(std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag ? tag : "", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap *soap, ns5__ArrayOfKeyValueOfstringstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *tag, int id, ns5__ArrayOfKeyValueOfstringstring *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *tag, ns5__ArrayOfKeyValueOfstringstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfKeyValueOfstringstring **)soap_malloc(soap, sizeof(ns5__ArrayOfKeyValueOfstringstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfKeyValueOfstringstring *)soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns5__ArrayOfKeyValueOfstringstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring, sizeof(ns5__ArrayOfKeyValueOfstringstring), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap *soap, ns5__ArrayOfKeyValueOfstringstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons5__ArrayOfKeyValueOfstringstring(soap, tag ? tag : "ns5:ArrayOfKeyValueOfstringstring", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap *soap, ns5__ArrayOfKeyValueOfstringstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfKeyValueOfstringstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfKeyValueOfintint(struct soap *soap, ns5__ArrayOfKeyValueOfintint *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfKeyValueOfintint(struct soap *soap, const char *tag, int id, ns5__ArrayOfKeyValueOfintint *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns5__ArrayOfKeyValueOfintint ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfKeyValueOfintint(struct soap *soap, const char *tag, ns5__ArrayOfKeyValueOfintint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfKeyValueOfintint **)soap_malloc(soap, sizeof(ns5__ArrayOfKeyValueOfintint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfKeyValueOfintint *)soap_instantiate_ns5__ArrayOfKeyValueOfintint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns5__ArrayOfKeyValueOfintint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfKeyValueOfintint, sizeof(ns5__ArrayOfKeyValueOfintint), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfKeyValueOfintint(struct soap *soap, ns5__ArrayOfKeyValueOfintint *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons5__ArrayOfKeyValueOfintint(soap, tag ? tag : "ns5:ArrayOfKeyValueOfintint", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfKeyValueOfintint(struct soap *soap, ns5__ArrayOfKeyValueOfintint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfKeyValueOfintint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, ns4__Glove_x002eConfiguration_x002eProfile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, const char *tag, int id, ns4__Glove_x002eConfiguration_x002eProfile *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile ** SOAP_FMAC4 soap_in_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, const char *tag, ns4__Glove_x002eConfiguration_x002eProfile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__Glove_x002eConfiguration_x002eProfile **)soap_malloc(soap, sizeof(ns4__Glove_x002eConfiguration_x002eProfile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__Glove_x002eConfiguration_x002eProfile *)soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns4__Glove_x002eConfiguration_x002eProfile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile, sizeof(ns4__Glove_x002eConfiguration_x002eProfile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, ns4__Glove_x002eConfiguration_x002eProfile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, tag ? tag : "ns4:Glove.Configuration.Profile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile ** SOAP_FMAC4 soap_get_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, ns4__Glove_x002eConfiguration_x002eProfile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__Glove_x002eConfiguration_x002eProfile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfstring(struct soap *soap, const char *tag, int id, ns5__ArrayOfstring *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfstring, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns5__ArrayOfstring ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfstring(struct soap *soap, const char *tag, ns5__ArrayOfstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfstring **)soap_malloc(soap, sizeof(ns5__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfstring *)soap_instantiate_ns5__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns5__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons5__ArrayOfstring(soap, tag ? tag : "ns5:ArrayOfstring", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Side(struct soap *soap, enum ns4__Side *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns4__Side);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Side(struct soap *soap, const char *tag, int id, enum ns4__Side *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__Side, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns4__Side(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns4__Side ** SOAP_FMAC4 soap_in_PointerTons4__Side(struct soap *soap, const char *tag, enum ns4__Side **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns4__Side **)soap_malloc(soap, sizeof(enum ns4__Side *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns4__Side(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns4__Side **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__Side, sizeof(enum ns4__Side), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Side(struct soap *soap, enum ns4__Side *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__Side(soap, tag ? tag : "ns4:Side", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns4__Side ** SOAP_FMAC4 soap_get_PointerTons4__Side(struct soap *soap, enum ns4__Side **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__Side(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Glove_x002eConfiguration(struct soap *soap, ns4__Glove_x002eConfiguration *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__Glove_x002eConfiguration))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Glove_x002eConfiguration(struct soap *soap, const char *tag, int id, ns4__Glove_x002eConfiguration *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__Glove_x002eConfiguration, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns4__Glove_x002eConfiguration ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration ** SOAP_FMAC4 soap_in_PointerTons4__Glove_x002eConfiguration(struct soap *soap, const char *tag, ns4__Glove_x002eConfiguration **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__Glove_x002eConfiguration **)soap_malloc(soap, sizeof(ns4__Glove_x002eConfiguration *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__Glove_x002eConfiguration *)soap_instantiate_ns4__Glove_x002eConfiguration(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns4__Glove_x002eConfiguration **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__Glove_x002eConfiguration, sizeof(ns4__Glove_x002eConfiguration), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Glove_x002eConfiguration(struct soap *soap, ns4__Glove_x002eConfiguration *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__Glove_x002eConfiguration(soap, tag ? tag : "ns4:Glove.Configuration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__Glove_x002eConfiguration ** SOAP_FMAC4 soap_get_PointerTons4__Glove_x002eConfiguration(struct soap *soap, ns4__Glove_x002eConfiguration **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__Glove_x002eConfiguration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTobool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfint(struct soap *soap, const char *tag, int id, ns5__ArrayOfint *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfint, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns5__ArrayOfint ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns5__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfint(struct soap *soap, const char *tag, ns5__ArrayOfint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfint **)soap_malloc(soap, sizeof(ns5__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfint *)soap_instantiate_ns5__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns5__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfint, sizeof(ns5__ArrayOfint), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons5__ArrayOfint(soap, tag ? tag : "ns5:ArrayOfint", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfint(struct soap *soap, ns5__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Glove(struct soap *soap, ns4__Glove *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__Glove))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Glove(struct soap *soap, const char *tag, int id, ns4__Glove *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__Glove, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns4__Glove ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns4__Glove ** SOAP_FMAC4 soap_in_PointerTons4__Glove(struct soap *soap, const char *tag, ns4__Glove **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__Glove **)soap_malloc(soap, sizeof(ns4__Glove *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__Glove *)soap_instantiate_ns4__Glove(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns4__Glove **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__Glove, sizeof(ns4__Glove), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Glove(struct soap *soap, ns4__Glove *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__Glove(soap, tag ? tag : "ns4:Glove", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__Glove ** SOAP_FMAC4 soap_get_PointerTons4__Glove(struct soap *soap, ns4__Glove **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__Glove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfGlove(struct soap *soap, ns4__ArrayOfGlove *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfGlove))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfGlove(struct soap *soap, const char *tag, int id, ns4__ArrayOfGlove *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfGlove, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns4__ArrayOfGlove ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns4__ArrayOfGlove ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfGlove(struct soap *soap, const char *tag, ns4__ArrayOfGlove **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfGlove **)soap_malloc(soap, sizeof(ns4__ArrayOfGlove *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfGlove *)soap_instantiate_ns4__ArrayOfGlove(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns4__ArrayOfGlove **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfGlove, sizeof(ns4__ArrayOfGlove), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfGlove(struct soap *soap, ns4__ArrayOfGlove *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__ArrayOfGlove(soap, tag ? tag : "ns4:ArrayOfGlove", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfGlove ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfGlove(struct soap *soap, ns4__ArrayOfGlove **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfGlove(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default__QName(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *tag, int id, const std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *tag, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) >= soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *p;
	size_t k = sizeof(std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const char *tag, int id, const std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, const char *tag, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) >= soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *p;
	size_t k = sizeof(std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) >= soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::string n;
		soap_default_std__string(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::string));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<int> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) >= soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		int n;
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{	if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<int> *p;
	size_t k = sizeof(std::vector<int> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<int> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<int> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<int>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Glove(struct soap *soap, std::vector<ns4__Glove *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Glove(struct soap *soap, const std::vector<ns4__Glove *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns4__Glove *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons4__Glove(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Glove(struct soap *soap, const char *tag, int id, const std::vector<ns4__Glove *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns4__Glove *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons4__Glove(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns4__Glove *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Glove(struct soap *soap, const char *tag, std::vector<ns4__Glove *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons4__Glove(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) >= soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns4__Glove *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns4__Glove, SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove, sizeof(ns4__Glove), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons4__Glove(soap, tag, NULL, "ns4:Glove"))
				break;
		}
		else
		{	if (!soap_in_PointerTons4__Glove(soap, tag, &n, "ns4:Glove"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns4__Glove *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Glove(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons4__Glove(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns4__Glove *> *p;
	size_t k = sizeof(std::vector<ns4__Glove *> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<ns4__Glove *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<ns4__Glove *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns4__Glove *>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
