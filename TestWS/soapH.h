/* soapH.h
   Generated by gSOAP 2.8.36 for OGService.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_xsd__byte_DEFINED
#define SOAP_TYPE_xsd__byte_DEFINED

inline void soap_default_xsd__byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

#define soap_xsd__byte2s soap_byte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);

#define soap_s2xsd__byte soap_s2byte

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_xsd__byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_xsd__byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

inline int soap_read_xsd__byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__char_DEFINED
#define SOAP_TYPE_ns3__char_DEFINED

inline void soap_default_ns3__char(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__char
	*a = SOAP_DEFAULT_ns3__char;
#else
	*a = (int)0;
#endif
}

#define soap_ns3__char2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap*, const char*, int, const int *, const char*);

#define soap_s2ns3__char soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_ns3__char(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap*, const int *, const char*, const char*);

inline int soap_write_ns3__char(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__char(soap, p, "ns3:char", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap*, int *, const char*, const char*);

inline int soap_read_ns3__char(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__char(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_xsd__unsignedByte_DEFINED

inline void soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_xsd__unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedShort_DEFINED
#define SOAP_TYPE_unsignedShort_DEFINED

inline void soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_unsignedShort(struct soap *soap, unsigned short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__Side_DEFINED
#define SOAP_TYPE_ns4__Side_DEFINED

inline void soap_default_ns4__Side(struct soap *soap, enum ns4__Side *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__Side
	*a = SOAP_DEFAULT_ns4__Side;
#else
	*a = (enum ns4__Side)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Side(struct soap*, const char*, int, const enum ns4__Side *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__Side2s(struct soap*, enum ns4__Side);
SOAP_FMAC3 enum ns4__Side * SOAP_FMAC4 soap_in_ns4__Side(struct soap*, const char*, enum ns4__Side *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__Side(struct soap*, const char*, enum ns4__Side *);

SOAP_FMAC3 enum ns4__Side * SOAP_FMAC4 soap_new_ns4__Side(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__Side(struct soap*, const enum ns4__Side *, const char*, const char*);

inline int soap_write_ns4__Side(struct soap *soap, enum ns4__Side const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__Side(soap, p, "ns4:Side", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum ns4__Side * SOAP_FMAC4 soap_get_ns4__Side(struct soap*, enum ns4__Side *, const char*, const char*);

inline int soap_read_ns4__Side(struct soap *soap, enum ns4__Side *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__Side(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
#define SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, int, const _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *, const char*);
SOAP_FMAC3 _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC4 soap_in__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *, const char*);
SOAP_FMAC1 _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC2 soap_instantiate__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * soap_new__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, n, NULL, NULL, NULL);
}

inline _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * soap_new_req__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(
	struct soap *soap,
	std::string *Key,
	std::string *Value)
{
	_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *_p = soap_new__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key = Key;
		_p->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value = Value;
	}
	return _p;
}

inline _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * soap_new_set__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(
	struct soap *soap,
	std::string *Key,
	std::string *Value)
{
	_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *_p = soap_new__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key = Key;
		_p->_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value = Value;
	}
	return _p;
}

inline int soap_write__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring", p->soap_type() == SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC4 soap_get__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *, const char*, const char*);

inline int soap_read__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint_DEFINED
#define SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const char*, int, const _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *, const char*);
SOAP_FMAC3 _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * SOAP_FMAC4 soap_in__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const char*, _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *, const char*);
SOAP_FMAC1 _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * SOAP_FMAC2 soap_instantiate__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * soap_new__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, n, NULL, NULL, NULL);
}

inline _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * soap_new_req__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(
	struct soap *soap,
	int Key,
	int Value)
{
	_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *_p = soap_new__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Key = Key;
		_p->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Value = Value;
	}
	return _p;
}

inline _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * soap_new_set__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(
	struct soap *soap,
	int Key,
	int Value)
{
	_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *_p = soap_new__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Key = Key;
		_p->_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint::Value = Value;
	}
	return _p;
}

inline int soap_write__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ArrayOfKeyValueOfintint-KeyValueOfintint", p->soap_type() == SOAP_TYPE__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint * SOAP_FMAC4 soap_get__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *, const char*, const char*);

inline int soap_read__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, _ns5__ArrayOfKeyValueOfintint_KeyValueOfintint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__Side__DEFINED
#define SOAP_TYPE_ns4__Side__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Side_(struct soap*, const char*, int, const ns4__Side_ *, const char*);
SOAP_FMAC3 ns4__Side_ * SOAP_FMAC4 soap_in_ns4__Side_(struct soap*, const char*, ns4__Side_ *, const char*);
SOAP_FMAC1 ns4__Side_ * SOAP_FMAC2 soap_instantiate_ns4__Side_(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Side_ * soap_new_ns4__Side_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Side_(soap, n, NULL, NULL, NULL);
}

inline ns4__Side_ * soap_new_req_ns4__Side_(
	struct soap *soap,
	enum ns4__Side __item)
{
	ns4__Side_ *_p = soap_new_ns4__Side_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Side_::__item = __item;
	}
	return _p;
}

inline ns4__Side_ * soap_new_set_ns4__Side_(
	struct soap *soap,
	enum ns4__Side __item,
	char *__item__1)
{
	ns4__Side_ *_p = soap_new_ns4__Side_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Side_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__Side_(struct soap *soap, ns4__Side_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Side", p->soap_type() == SOAP_TYPE_ns4__Side_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Side_ * SOAP_FMAC4 soap_get_ns4__Side_(struct soap*, ns4__Side_ *, const char*, const char*);

inline int soap_read_ns4__Side_(struct soap *soap, ns4__Side_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__Side_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__guid___DEFINED
#define SOAP_TYPE_ns3__guid___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap*, const char*, int, const ns3__guid__ *, const char*);
SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap*, const char*, ns3__guid__ *, const char*);
SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__guid__ * soap_new_ns3__guid__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__guid__(soap, n, NULL, NULL, NULL);
}

inline ns3__guid__ * soap_new_req_ns3__guid__(
	struct soap *soap,
	const std::string& __item)
{
	ns3__guid__ *_p = soap_new_ns3__guid__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__guid__::__item = __item;
	}
	return _p;
}

inline ns3__guid__ * soap_new_set_ns3__guid__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ns3__guid__ *_p = soap_new_ns3__guid__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__guid__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__guid__(struct soap *soap, ns3__guid__ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:guid", p->soap_type() == SOAP_TYPE_ns3__guid__ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap*, ns3__guid__ *, const char*, const char*);

inline int soap_read_ns3__guid__(struct soap *soap, ns3__guid__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__guid__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__guid_DEFINED
#define SOAP_TYPE_ns3__guid_DEFINED

inline void soap_default_ns3__guid(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__guid(struct soap*, const std::string *);

#define soap_ns3__guid2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__guid(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__guid(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__guid soap_instantiate_std__string


#define soap_new_ns3__guid soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__guid(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__guid(soap, p, "ns3:guid", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__guid(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__guid(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__guid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__duration___DEFINED
#define SOAP_TYPE_ns3__duration___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap*, const char*, int, const ns3__duration__ *, const char*);
SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap*, const char*, ns3__duration__ *, const char*);
SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__duration__ * soap_new_ns3__duration__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__duration__(soap, n, NULL, NULL, NULL);
}

inline ns3__duration__ * soap_new_req_ns3__duration__(
	struct soap *soap,
	const std::string& __item)
{
	ns3__duration__ *_p = soap_new_ns3__duration__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__duration__::__item = __item;
	}
	return _p;
}

inline ns3__duration__ * soap_new_set_ns3__duration__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ns3__duration__ *_p = soap_new_ns3__duration__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__duration__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__duration__(struct soap *soap, ns3__duration__ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:duration", p->soap_type() == SOAP_TYPE_ns3__duration__ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap*, ns3__duration__ *, const char*, const char*);

inline int soap_read_ns3__duration__(struct soap *soap, ns3__duration__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__duration__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__duration_DEFINED
#define SOAP_TYPE_ns3__duration_DEFINED

inline void soap_default_ns3__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__duration(struct soap*, const std::string *);

#define soap_ns3__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__duration soap_instantiate_std__string


#define soap_new_ns3__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__duration(soap, p, "ns3:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__char___DEFINED
#define SOAP_TYPE_ns3__char___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap*, const char*, int, const ns3__char__ *, const char*);
SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap*, const char*, ns3__char__ *, const char*);
SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__char__ * soap_new_ns3__char__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__char__(soap, n, NULL, NULL, NULL);
}

inline ns3__char__ * soap_new_req_ns3__char__(
	struct soap *soap,
	int __item)
{
	ns3__char__ *_p = soap_new_ns3__char__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__char__::__item = __item;
	}
	return _p;
}

inline ns3__char__ * soap_new_set_ns3__char__(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	ns3__char__ *_p = soap_new_ns3__char__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__char__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__char__(struct soap *soap, ns3__char__ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:char", p->soap_type() == SOAP_TYPE_ns3__char__ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap*, ns3__char__ *, const char*, const char*);

inline int soap_read_ns3__char__(struct soap *soap, ns3__char__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__char__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring_DEFINED
#define SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfKeyValueOfstringstring(struct soap*, const char*, int, const ns5__ArrayOfKeyValueOfstringstring *, const char*);
SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring * SOAP_FMAC4 soap_in_ns5__ArrayOfKeyValueOfstringstring(struct soap*, const char*, ns5__ArrayOfKeyValueOfstringstring *, const char*);
SOAP_FMAC1 ns5__ArrayOfKeyValueOfstringstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ArrayOfKeyValueOfstringstring * soap_new_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ArrayOfKeyValueOfstringstring(soap, n, NULL, NULL, NULL);
}

inline ns5__ArrayOfKeyValueOfstringstring * soap_new_req_ns5__ArrayOfKeyValueOfstringstring(
	struct soap *soap)
{
	ns5__ArrayOfKeyValueOfstringstring *_p = soap_new_ns5__ArrayOfKeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ArrayOfKeyValueOfstringstring * soap_new_set_ns5__ArrayOfKeyValueOfstringstring(
	struct soap *soap,
	std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *KeyValueOfstringstring,
	char *__item__1)
{
	ns5__ArrayOfKeyValueOfstringstring *_p = soap_new_ns5__ArrayOfKeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring = KeyValueOfstringstring;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, ns5__ArrayOfKeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ArrayOfKeyValueOfstringstring", p->soap_type() == SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring * SOAP_FMAC4 soap_get_ns5__ArrayOfKeyValueOfstringstring(struct soap*, ns5__ArrayOfKeyValueOfstringstring *, const char*, const char*);

inline int soap_read_ns5__ArrayOfKeyValueOfstringstring(struct soap *soap, ns5__ArrayOfKeyValueOfstringstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ArrayOfKeyValueOfstringstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfKeyValueOfintint_DEFINED
#define SOAP_TYPE_ns5__ArrayOfKeyValueOfintint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfKeyValueOfintint(struct soap*, const char*, int, const ns5__ArrayOfKeyValueOfintint *, const char*);
SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint * SOAP_FMAC4 soap_in_ns5__ArrayOfKeyValueOfintint(struct soap*, const char*, ns5__ArrayOfKeyValueOfintint *, const char*);
SOAP_FMAC1 ns5__ArrayOfKeyValueOfintint * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfKeyValueOfintint(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ArrayOfKeyValueOfintint * soap_new_ns5__ArrayOfKeyValueOfintint(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ArrayOfKeyValueOfintint(soap, n, NULL, NULL, NULL);
}

inline ns5__ArrayOfKeyValueOfintint * soap_new_req_ns5__ArrayOfKeyValueOfintint(
	struct soap *soap)
{
	ns5__ArrayOfKeyValueOfintint *_p = soap_new_ns5__ArrayOfKeyValueOfintint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ArrayOfKeyValueOfintint * soap_new_set_ns5__ArrayOfKeyValueOfintint(
	struct soap *soap,
	std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *KeyValueOfintint,
	char *__item__1)
{
	ns5__ArrayOfKeyValueOfintint *_p = soap_new_ns5__ArrayOfKeyValueOfintint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ArrayOfKeyValueOfintint::KeyValueOfintint = KeyValueOfintint;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns5__ArrayOfKeyValueOfintint(struct soap *soap, ns5__ArrayOfKeyValueOfintint const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ArrayOfKeyValueOfintint", p->soap_type() == SOAP_TYPE_ns5__ArrayOfKeyValueOfintint ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint * SOAP_FMAC4 soap_get_ns5__ArrayOfKeyValueOfintint(struct soap*, ns5__ArrayOfKeyValueOfintint *, const char*, const char*);

inline int soap_read_ns5__ArrayOfKeyValueOfintint(struct soap *soap, ns5__ArrayOfKeyValueOfintint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ArrayOfKeyValueOfintint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfstring_DEFINED
#define SOAP_TYPE_ns5__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfstring(struct soap*, const char*, int, const ns5__ArrayOfstring *, const char*);
SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_in_ns5__ArrayOfstring(struct soap*, const char*, ns5__ArrayOfstring *, const char*);
SOAP_FMAC1 ns5__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ArrayOfstring * soap_new_ns5__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline ns5__ArrayOfstring * soap_new_req_ns5__ArrayOfstring(
	struct soap *soap)
{
	ns5__ArrayOfstring *_p = soap_new_ns5__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ArrayOfstring * soap_new_set_ns5__ArrayOfstring(
	struct soap *soap,
	const std::vector<std::string> & string,
	char *__item__1)
{
	ns5__ArrayOfstring *_p = soap_new_ns5__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ArrayOfstring::string = string;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ArrayOfstring", p->soap_type() == SOAP_TYPE_ns5__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_get_ns5__ArrayOfstring(struct soap*, ns5__ArrayOfstring *, const char*, const char*);

inline int soap_read_ns5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfint_DEFINED
#define SOAP_TYPE_ns5__ArrayOfint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfint(struct soap*, const char*, int, const ns5__ArrayOfint *, const char*);
SOAP_FMAC3 ns5__ArrayOfint * SOAP_FMAC4 soap_in_ns5__ArrayOfint(struct soap*, const char*, ns5__ArrayOfint *, const char*);
SOAP_FMAC1 ns5__ArrayOfint * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfint(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ArrayOfint * soap_new_ns5__ArrayOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ArrayOfint(soap, n, NULL, NULL, NULL);
}

inline ns5__ArrayOfint * soap_new_req_ns5__ArrayOfint(
	struct soap *soap)
{
	ns5__ArrayOfint *_p = soap_new_ns5__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ArrayOfint * soap_new_set_ns5__ArrayOfint(
	struct soap *soap,
	const std::vector<int> & int_,
	char *__item__1)
{
	ns5__ArrayOfint *_p = soap_new_ns5__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ArrayOfint::int_ = int_;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns5__ArrayOfint(struct soap *soap, ns5__ArrayOfint const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ArrayOfint", p->soap_type() == SOAP_TYPE_ns5__ArrayOfint ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ArrayOfint * SOAP_FMAC4 soap_get_ns5__ArrayOfint(struct soap*, ns5__ArrayOfint *, const char*, const char*);

inline int soap_read_ns5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ArrayOfint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile_DEFINED
#define SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Glove_x002eConfiguration_x002eProfile(struct soap*, const char*, int, const ns4__Glove_x002eConfiguration_x002eProfile *, const char*);
SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile * SOAP_FMAC4 soap_in_ns4__Glove_x002eConfiguration_x002eProfile(struct soap*, const char*, ns4__Glove_x002eConfiguration_x002eProfile *, const char*);
SOAP_FMAC1 ns4__Glove_x002eConfiguration_x002eProfile * SOAP_FMAC2 soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Glove_x002eConfiguration_x002eProfile * soap_new_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Glove_x002eConfiguration_x002eProfile(soap, n, NULL, NULL, NULL);
}

inline ns4__Glove_x002eConfiguration_x002eProfile * soap_new_req_ns4__Glove_x002eConfiguration_x002eProfile(
	struct soap *soap)
{
	ns4__Glove_x002eConfiguration_x002eProfile *_p = soap_new_ns4__Glove_x002eConfiguration_x002eProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__Glove_x002eConfiguration_x002eProfile * soap_new_set_ns4__Glove_x002eConfiguration_x002eProfile(
	struct soap *soap,
	int *AreaCount,
	ns5__ArrayOfKeyValueOfintint *FlexorsMappings,
	int *FlexorsThreshold,
	std::string *GloveHash,
	ns5__ArrayOfKeyValueOfstringstring *Mappings,
	std::string *ProfileName,
	bool *imuCalibrationStatus,
	std::string *imuModel,
	bool *imuStatus,
	bool *rawData,
	char *__item__1)
{
	ns4__Glove_x002eConfiguration_x002eProfile *_p = soap_new_ns4__Glove_x002eConfiguration_x002eProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Glove_x002eConfiguration_x002eProfile::AreaCount = AreaCount;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsMappings = FlexorsMappings;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::FlexorsThreshold = FlexorsThreshold;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::GloveHash = GloveHash;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::Mappings = Mappings;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::ProfileName = ProfileName;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::imuCalibrationStatus = imuCalibrationStatus;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::imuModel = imuModel;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::imuStatus = imuStatus;
		_p->ns4__Glove_x002eConfiguration_x002eProfile::rawData = rawData;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, ns4__Glove_x002eConfiguration_x002eProfile const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Glove.Configuration.Profile", p->soap_type() == SOAP_TYPE_ns4__Glove_x002eConfiguration_x002eProfile ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile * SOAP_FMAC4 soap_get_ns4__Glove_x002eConfiguration_x002eProfile(struct soap*, ns4__Glove_x002eConfiguration_x002eProfile *, const char*, const char*);

inline int soap_read_ns4__Glove_x002eConfiguration_x002eProfile(struct soap *soap, ns4__Glove_x002eConfiguration_x002eProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__Glove_x002eConfiguration_x002eProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__Glove_x002eConfiguration_DEFINED
#define SOAP_TYPE_ns4__Glove_x002eConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Glove_x002eConfiguration(struct soap*, const char*, int, const ns4__Glove_x002eConfiguration *, const char*);
SOAP_FMAC3 ns4__Glove_x002eConfiguration * SOAP_FMAC4 soap_in_ns4__Glove_x002eConfiguration(struct soap*, const char*, ns4__Glove_x002eConfiguration *, const char*);
SOAP_FMAC1 ns4__Glove_x002eConfiguration * SOAP_FMAC2 soap_instantiate_ns4__Glove_x002eConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Glove_x002eConfiguration * soap_new_ns4__Glove_x002eConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Glove_x002eConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns4__Glove_x002eConfiguration * soap_new_req_ns4__Glove_x002eConfiguration(
	struct soap *soap)
{
	ns4__Glove_x002eConfiguration *_p = soap_new_ns4__Glove_x002eConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__Glove_x002eConfiguration * soap_new_set_ns4__Glove_x002eConfiguration(
	struct soap *soap,
	ns5__ArrayOfint *AllowedBaudRates,
	int *BaudRate,
	ns5__ArrayOfstring *FlexInit,
	ns5__ArrayOfint *FlexPins,
	std::string *GloveHash,
	std::string *GloveName,
	ns4__Glove_x002eConfiguration_x002eProfile *GloveProfile,
	ns5__ArrayOfstring *NegativeInit,
	ns5__ArrayOfint *NegativePins,
	ns5__ArrayOfstring *PositiveInit,
	ns5__ArrayOfint *PositivePins,
	char *__item__1)
{
	ns4__Glove_x002eConfiguration *_p = soap_new_ns4__Glove_x002eConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Glove_x002eConfiguration::AllowedBaudRates = AllowedBaudRates;
		_p->ns4__Glove_x002eConfiguration::BaudRate = BaudRate;
		_p->ns4__Glove_x002eConfiguration::FlexInit = FlexInit;
		_p->ns4__Glove_x002eConfiguration::FlexPins = FlexPins;
		_p->ns4__Glove_x002eConfiguration::GloveHash = GloveHash;
		_p->ns4__Glove_x002eConfiguration::GloveName = GloveName;
		_p->ns4__Glove_x002eConfiguration::GloveProfile = GloveProfile;
		_p->ns4__Glove_x002eConfiguration::NegativeInit = NegativeInit;
		_p->ns4__Glove_x002eConfiguration::NegativePins = NegativePins;
		_p->ns4__Glove_x002eConfiguration::PositiveInit = PositiveInit;
		_p->ns4__Glove_x002eConfiguration::PositivePins = PositivePins;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__Glove_x002eConfiguration(struct soap *soap, ns4__Glove_x002eConfiguration const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Glove.Configuration", p->soap_type() == SOAP_TYPE_ns4__Glove_x002eConfiguration ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Glove_x002eConfiguration * SOAP_FMAC4 soap_get_ns4__Glove_x002eConfiguration(struct soap*, ns4__Glove_x002eConfiguration *, const char*, const char*);

inline int soap_read_ns4__Glove_x002eConfiguration(struct soap *soap, ns4__Glove_x002eConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__Glove_x002eConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__Glove_DEFINED
#define SOAP_TYPE_ns4__Glove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Glove(struct soap*, const char*, int, const ns4__Glove *, const char*);
SOAP_FMAC3 ns4__Glove * SOAP_FMAC4 soap_in_ns4__Glove(struct soap*, const char*, ns4__Glove *, const char*);
SOAP_FMAC1 ns4__Glove * SOAP_FMAC2 soap_instantiate_ns4__Glove(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Glove * soap_new_ns4__Glove(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Glove(soap, n, NULL, NULL, NULL);
}

inline ns4__Glove * soap_new_req_ns4__Glove(
	struct soap *soap)
{
	ns4__Glove *_p = soap_new_ns4__Glove(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__Glove * soap_new_set_ns4__Glove(
	struct soap *soap,
	std::string *BluetoothAddress,
	bool *Connected,
	ns4__Glove_x002eConfiguration *GloveConfiguration,
	std::string *Name,
	std::string *Port,
	enum ns4__Side *Side,
	std::string *WebSocketPort,
	char *__item__1)
{
	ns4__Glove *_p = soap_new_ns4__Glove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Glove::BluetoothAddress = BluetoothAddress;
		_p->ns4__Glove::Connected = Connected;
		_p->ns4__Glove::GloveConfiguration = GloveConfiguration;
		_p->ns4__Glove::Name = Name;
		_p->ns4__Glove::Port = Port;
		_p->ns4__Glove::Side = Side;
		_p->ns4__Glove::WebSocketPort = WebSocketPort;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__Glove(struct soap *soap, ns4__Glove const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Glove", p->soap_type() == SOAP_TYPE_ns4__Glove ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Glove * SOAP_FMAC4 soap_get_ns4__Glove(struct soap*, ns4__Glove *, const char*, const char*);

inline int soap_read_ns4__Glove(struct soap *soap, ns4__Glove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__Glove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfGlove_DEFINED
#define SOAP_TYPE_ns4__ArrayOfGlove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfGlove(struct soap*, const char*, int, const ns4__ArrayOfGlove *, const char*);
SOAP_FMAC3 ns4__ArrayOfGlove * SOAP_FMAC4 soap_in_ns4__ArrayOfGlove(struct soap*, const char*, ns4__ArrayOfGlove *, const char*);
SOAP_FMAC1 ns4__ArrayOfGlove * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfGlove(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfGlove * soap_new_ns4__ArrayOfGlove(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfGlove(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfGlove * soap_new_req_ns4__ArrayOfGlove(
	struct soap *soap)
{
	ns4__ArrayOfGlove *_p = soap_new_ns4__ArrayOfGlove(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfGlove * soap_new_set_ns4__ArrayOfGlove(
	struct soap *soap,
	const std::vector<ns4__Glove *> & Glove,
	char *__item__1)
{
	ns4__ArrayOfGlove *_p = soap_new_ns4__ArrayOfGlove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfGlove::Glove = Glove;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfGlove(struct soap *soap, ns4__ArrayOfGlove const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfGlove", p->soap_type() == SOAP_TYPE_ns4__ArrayOfGlove ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfGlove * SOAP_FMAC4 soap_get_ns4__ArrayOfGlove(struct soap*, ns4__ArrayOfGlove *, const char*, const char*);

inline int soap_read_ns4__ArrayOfGlove(struct soap *soap, ns4__ArrayOfGlove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__ArrayOfGlove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setRawDataResponse_DEFINED
#define SOAP_TYPE__ns1__setRawDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRawDataResponse(struct soap*, const char*, int, const _ns1__setRawDataResponse *, const char*);
SOAP_FMAC3 _ns1__setRawDataResponse * SOAP_FMAC4 soap_in__ns1__setRawDataResponse(struct soap*, const char*, _ns1__setRawDataResponse *, const char*);
SOAP_FMAC1 _ns1__setRawDataResponse * SOAP_FMAC2 soap_instantiate__ns1__setRawDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setRawDataResponse * soap_new__ns1__setRawDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setRawDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__setRawDataResponse * soap_new_req__ns1__setRawDataResponse(
	struct soap *soap)
{
	_ns1__setRawDataResponse *_p = soap_new__ns1__setRawDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setRawDataResponse * soap_new_set__ns1__setRawDataResponse(
	struct soap *soap)
{
	_ns1__setRawDataResponse *_p = soap_new__ns1__setRawDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__setRawDataResponse(struct soap *soap, _ns1__setRawDataResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRawDataResponse", p->soap_type() == SOAP_TYPE__ns1__setRawDataResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setRawDataResponse * SOAP_FMAC4 soap_get__ns1__setRawDataResponse(struct soap*, _ns1__setRawDataResponse *, const char*, const char*);

inline int soap_read__ns1__setRawDataResponse(struct soap *soap, _ns1__setRawDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setRawDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setRawData_DEFINED
#define SOAP_TYPE__ns1__setRawData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRawData(struct soap*, const char*, int, const _ns1__setRawData *, const char*);
SOAP_FMAC3 _ns1__setRawData * SOAP_FMAC4 soap_in__ns1__setRawData(struct soap*, const char*, _ns1__setRawData *, const char*);
SOAP_FMAC1 _ns1__setRawData * SOAP_FMAC2 soap_instantiate__ns1__setRawData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setRawData * soap_new__ns1__setRawData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setRawData(soap, n, NULL, NULL, NULL);
}

inline _ns1__setRawData * soap_new_req__ns1__setRawData(
	struct soap *soap)
{
	_ns1__setRawData *_p = soap_new__ns1__setRawData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setRawData * soap_new_set__ns1__setRawData(
	struct soap *soap,
	std::string *gloveAddress,
	int *value)
{
	_ns1__setRawData *_p = soap_new__ns1__setRawData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__setRawData::gloveAddress = gloveAddress;
		_p->_ns1__setRawData::value = value;
	}
	return _p;
}

inline int soap_write__ns1__setRawData(struct soap *soap, _ns1__setRawData const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRawData", p->soap_type() == SOAP_TYPE__ns1__setRawData ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setRawData * SOAP_FMAC4 soap_get__ns1__setRawData(struct soap*, _ns1__setRawData *, const char*, const char*);

inline int soap_read__ns1__setRawData(struct soap *soap, _ns1__setRawData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setRawData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setIMUStatusResponse_DEFINED
#define SOAP_TYPE__ns1__setIMUStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setIMUStatusResponse(struct soap*, const char*, int, const _ns1__setIMUStatusResponse *, const char*);
SOAP_FMAC3 _ns1__setIMUStatusResponse * SOAP_FMAC4 soap_in__ns1__setIMUStatusResponse(struct soap*, const char*, _ns1__setIMUStatusResponse *, const char*);
SOAP_FMAC1 _ns1__setIMUStatusResponse * SOAP_FMAC2 soap_instantiate__ns1__setIMUStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setIMUStatusResponse * soap_new__ns1__setIMUStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setIMUStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__setIMUStatusResponse * soap_new_req__ns1__setIMUStatusResponse(
	struct soap *soap)
{
	_ns1__setIMUStatusResponse *_p = soap_new__ns1__setIMUStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setIMUStatusResponse * soap_new_set__ns1__setIMUStatusResponse(
	struct soap *soap)
{
	_ns1__setIMUStatusResponse *_p = soap_new__ns1__setIMUStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__setIMUStatusResponse(struct soap *soap, _ns1__setIMUStatusResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setIMUStatusResponse", p->soap_type() == SOAP_TYPE__ns1__setIMUStatusResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setIMUStatusResponse * SOAP_FMAC4 soap_get__ns1__setIMUStatusResponse(struct soap*, _ns1__setIMUStatusResponse *, const char*, const char*);

inline int soap_read__ns1__setIMUStatusResponse(struct soap *soap, _ns1__setIMUStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setIMUStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setIMUStatus_DEFINED
#define SOAP_TYPE__ns1__setIMUStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setIMUStatus(struct soap*, const char*, int, const _ns1__setIMUStatus *, const char*);
SOAP_FMAC3 _ns1__setIMUStatus * SOAP_FMAC4 soap_in__ns1__setIMUStatus(struct soap*, const char*, _ns1__setIMUStatus *, const char*);
SOAP_FMAC1 _ns1__setIMUStatus * SOAP_FMAC2 soap_instantiate__ns1__setIMUStatus(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setIMUStatus * soap_new__ns1__setIMUStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setIMUStatus(soap, n, NULL, NULL, NULL);
}

inline _ns1__setIMUStatus * soap_new_req__ns1__setIMUStatus(
	struct soap *soap)
{
	_ns1__setIMUStatus *_p = soap_new__ns1__setIMUStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setIMUStatus * soap_new_set__ns1__setIMUStatus(
	struct soap *soap,
	std::string *gloveAddress,
	int *value)
{
	_ns1__setIMUStatus *_p = soap_new__ns1__setIMUStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__setIMUStatus::gloveAddress = gloveAddress;
		_p->_ns1__setIMUStatus::value = value;
	}
	return _p;
}

inline int soap_write__ns1__setIMUStatus(struct soap *soap, _ns1__setIMUStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setIMUStatus", p->soap_type() == SOAP_TYPE__ns1__setIMUStatus ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setIMUStatus * SOAP_FMAC4 soap_get__ns1__setIMUStatus(struct soap*, _ns1__setIMUStatus *, const char*, const char*);

inline int soap_read__ns1__setIMUStatus(struct soap *soap, _ns1__setIMUStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setIMUStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__startIMUResponse_DEFINED
#define SOAP_TYPE__ns1__startIMUResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__startIMUResponse(struct soap*, const char*, int, const _ns1__startIMUResponse *, const char*);
SOAP_FMAC3 _ns1__startIMUResponse * SOAP_FMAC4 soap_in__ns1__startIMUResponse(struct soap*, const char*, _ns1__startIMUResponse *, const char*);
SOAP_FMAC1 _ns1__startIMUResponse * SOAP_FMAC2 soap_instantiate__ns1__startIMUResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__startIMUResponse * soap_new__ns1__startIMUResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__startIMUResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__startIMUResponse * soap_new_req__ns1__startIMUResponse(
	struct soap *soap)
{
	_ns1__startIMUResponse *_p = soap_new__ns1__startIMUResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__startIMUResponse * soap_new_set__ns1__startIMUResponse(
	struct soap *soap)
{
	_ns1__startIMUResponse *_p = soap_new__ns1__startIMUResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__startIMUResponse(struct soap *soap, _ns1__startIMUResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:startIMUResponse", p->soap_type() == SOAP_TYPE__ns1__startIMUResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__startIMUResponse * SOAP_FMAC4 soap_get__ns1__startIMUResponse(struct soap*, _ns1__startIMUResponse *, const char*, const char*);

inline int soap_read__ns1__startIMUResponse(struct soap *soap, _ns1__startIMUResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__startIMUResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__startIMU_DEFINED
#define SOAP_TYPE__ns1__startIMU_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__startIMU(struct soap*, const char*, int, const _ns1__startIMU *, const char*);
SOAP_FMAC3 _ns1__startIMU * SOAP_FMAC4 soap_in__ns1__startIMU(struct soap*, const char*, _ns1__startIMU *, const char*);
SOAP_FMAC1 _ns1__startIMU * SOAP_FMAC2 soap_instantiate__ns1__startIMU(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__startIMU * soap_new__ns1__startIMU(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__startIMU(soap, n, NULL, NULL, NULL);
}

inline _ns1__startIMU * soap_new_req__ns1__startIMU(
	struct soap *soap)
{
	_ns1__startIMU *_p = soap_new__ns1__startIMU(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__startIMU * soap_new_set__ns1__startIMU(
	struct soap *soap,
	std::string *gloveAddress)
{
	_ns1__startIMU *_p = soap_new__ns1__startIMU(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__startIMU::gloveAddress = gloveAddress;
	}
	return _p;
}

inline int soap_write__ns1__startIMU(struct soap *soap, _ns1__startIMU const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:startIMU", p->soap_type() == SOAP_TYPE__ns1__startIMU ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__startIMU * SOAP_FMAC4 soap_get__ns1__startIMU(struct soap*, _ns1__startIMU *, const char*, const char*);

inline int soap_read__ns1__startIMU(struct soap *soap, _ns1__startIMU *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__startIMU(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__resetFlexorsResponse_DEFINED
#define SOAP_TYPE__ns1__resetFlexorsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__resetFlexorsResponse(struct soap*, const char*, int, const _ns1__resetFlexorsResponse *, const char*);
SOAP_FMAC3 _ns1__resetFlexorsResponse * SOAP_FMAC4 soap_in__ns1__resetFlexorsResponse(struct soap*, const char*, _ns1__resetFlexorsResponse *, const char*);
SOAP_FMAC1 _ns1__resetFlexorsResponse * SOAP_FMAC2 soap_instantiate__ns1__resetFlexorsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__resetFlexorsResponse * soap_new__ns1__resetFlexorsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__resetFlexorsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__resetFlexorsResponse * soap_new_req__ns1__resetFlexorsResponse(
	struct soap *soap)
{
	_ns1__resetFlexorsResponse *_p = soap_new__ns1__resetFlexorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__resetFlexorsResponse * soap_new_set__ns1__resetFlexorsResponse(
	struct soap *soap)
{
	_ns1__resetFlexorsResponse *_p = soap_new__ns1__resetFlexorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__resetFlexorsResponse(struct soap *soap, _ns1__resetFlexorsResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:resetFlexorsResponse", p->soap_type() == SOAP_TYPE__ns1__resetFlexorsResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__resetFlexorsResponse * SOAP_FMAC4 soap_get__ns1__resetFlexorsResponse(struct soap*, _ns1__resetFlexorsResponse *, const char*, const char*);

inline int soap_read__ns1__resetFlexorsResponse(struct soap *soap, _ns1__resetFlexorsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__resetFlexorsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__resetFlexors_DEFINED
#define SOAP_TYPE__ns1__resetFlexors_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__resetFlexors(struct soap*, const char*, int, const _ns1__resetFlexors *, const char*);
SOAP_FMAC3 _ns1__resetFlexors * SOAP_FMAC4 soap_in__ns1__resetFlexors(struct soap*, const char*, _ns1__resetFlexors *, const char*);
SOAP_FMAC1 _ns1__resetFlexors * SOAP_FMAC2 soap_instantiate__ns1__resetFlexors(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__resetFlexors * soap_new__ns1__resetFlexors(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__resetFlexors(soap, n, NULL, NULL, NULL);
}

inline _ns1__resetFlexors * soap_new_req__ns1__resetFlexors(
	struct soap *soap)
{
	_ns1__resetFlexors *_p = soap_new__ns1__resetFlexors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__resetFlexors * soap_new_set__ns1__resetFlexors(
	struct soap *soap,
	std::string *gloveAddress)
{
	_ns1__resetFlexors *_p = soap_new__ns1__resetFlexors(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__resetFlexors::gloveAddress = gloveAddress;
	}
	return _p;
}

inline int soap_write__ns1__resetFlexors(struct soap *soap, _ns1__resetFlexors const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:resetFlexors", p->soap_type() == SOAP_TYPE__ns1__resetFlexors ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__resetFlexors * SOAP_FMAC4 soap_get__ns1__resetFlexors(struct soap*, _ns1__resetFlexors *, const char*, const char*);

inline int soap_read__ns1__resetFlexors(struct soap *soap, _ns1__resetFlexors *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__resetFlexors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setThresholdResponse_DEFINED
#define SOAP_TYPE__ns1__setThresholdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setThresholdResponse(struct soap*, const char*, int, const _ns1__setThresholdResponse *, const char*);
SOAP_FMAC3 _ns1__setThresholdResponse * SOAP_FMAC4 soap_in__ns1__setThresholdResponse(struct soap*, const char*, _ns1__setThresholdResponse *, const char*);
SOAP_FMAC1 _ns1__setThresholdResponse * SOAP_FMAC2 soap_instantiate__ns1__setThresholdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setThresholdResponse * soap_new__ns1__setThresholdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setThresholdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__setThresholdResponse * soap_new_req__ns1__setThresholdResponse(
	struct soap *soap)
{
	_ns1__setThresholdResponse *_p = soap_new__ns1__setThresholdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setThresholdResponse * soap_new_set__ns1__setThresholdResponse(
	struct soap *soap)
{
	_ns1__setThresholdResponse *_p = soap_new__ns1__setThresholdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__setThresholdResponse(struct soap *soap, _ns1__setThresholdResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setThresholdResponse", p->soap_type() == SOAP_TYPE__ns1__setThresholdResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setThresholdResponse * SOAP_FMAC4 soap_get__ns1__setThresholdResponse(struct soap*, _ns1__setThresholdResponse *, const char*, const char*);

inline int soap_read__ns1__setThresholdResponse(struct soap *soap, _ns1__setThresholdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setThresholdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setThreshold_DEFINED
#define SOAP_TYPE__ns1__setThreshold_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setThreshold(struct soap*, const char*, int, const _ns1__setThreshold *, const char*);
SOAP_FMAC3 _ns1__setThreshold * SOAP_FMAC4 soap_in__ns1__setThreshold(struct soap*, const char*, _ns1__setThreshold *, const char*);
SOAP_FMAC1 _ns1__setThreshold * SOAP_FMAC2 soap_instantiate__ns1__setThreshold(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setThreshold * soap_new__ns1__setThreshold(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setThreshold(soap, n, NULL, NULL, NULL);
}

inline _ns1__setThreshold * soap_new_req__ns1__setThreshold(
	struct soap *soap)
{
	_ns1__setThreshold *_p = soap_new__ns1__setThreshold(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setThreshold * soap_new_set__ns1__setThreshold(
	struct soap *soap,
	std::string *gloveAddress,
	int *value)
{
	_ns1__setThreshold *_p = soap_new__ns1__setThreshold(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__setThreshold::gloveAddress = gloveAddress;
		_p->_ns1__setThreshold::value = value;
	}
	return _p;
}

inline int soap_write__ns1__setThreshold(struct soap *soap, _ns1__setThreshold const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setThreshold", p->soap_type() == SOAP_TYPE__ns1__setThreshold ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setThreshold * SOAP_FMAC4 soap_get__ns1__setThreshold(struct soap*, _ns1__setThreshold *, const char*, const char*);

inline int soap_read__ns1__setThreshold(struct soap *soap, _ns1__setThreshold *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setThreshold(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__confirmCalibrationResponse_DEFINED
#define SOAP_TYPE__ns1__confirmCalibrationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__confirmCalibrationResponse(struct soap*, const char*, int, const _ns1__confirmCalibrationResponse *, const char*);
SOAP_FMAC3 _ns1__confirmCalibrationResponse * SOAP_FMAC4 soap_in__ns1__confirmCalibrationResponse(struct soap*, const char*, _ns1__confirmCalibrationResponse *, const char*);
SOAP_FMAC1 _ns1__confirmCalibrationResponse * SOAP_FMAC2 soap_instantiate__ns1__confirmCalibrationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__confirmCalibrationResponse * soap_new__ns1__confirmCalibrationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__confirmCalibrationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__confirmCalibrationResponse * soap_new_req__ns1__confirmCalibrationResponse(
	struct soap *soap)
{
	_ns1__confirmCalibrationResponse *_p = soap_new__ns1__confirmCalibrationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__confirmCalibrationResponse * soap_new_set__ns1__confirmCalibrationResponse(
	struct soap *soap)
{
	_ns1__confirmCalibrationResponse *_p = soap_new__ns1__confirmCalibrationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__confirmCalibrationResponse(struct soap *soap, _ns1__confirmCalibrationResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:confirmCalibrationResponse", p->soap_type() == SOAP_TYPE__ns1__confirmCalibrationResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__confirmCalibrationResponse * SOAP_FMAC4 soap_get__ns1__confirmCalibrationResponse(struct soap*, _ns1__confirmCalibrationResponse *, const char*, const char*);

inline int soap_read__ns1__confirmCalibrationResponse(struct soap *soap, _ns1__confirmCalibrationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__confirmCalibrationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__confirmCalibration_DEFINED
#define SOAP_TYPE__ns1__confirmCalibration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__confirmCalibration(struct soap*, const char*, int, const _ns1__confirmCalibration *, const char*);
SOAP_FMAC3 _ns1__confirmCalibration * SOAP_FMAC4 soap_in__ns1__confirmCalibration(struct soap*, const char*, _ns1__confirmCalibration *, const char*);
SOAP_FMAC1 _ns1__confirmCalibration * SOAP_FMAC2 soap_instantiate__ns1__confirmCalibration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__confirmCalibration * soap_new__ns1__confirmCalibration(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__confirmCalibration(soap, n, NULL, NULL, NULL);
}

inline _ns1__confirmCalibration * soap_new_req__ns1__confirmCalibration(
	struct soap *soap)
{
	_ns1__confirmCalibration *_p = soap_new__ns1__confirmCalibration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__confirmCalibration * soap_new_set__ns1__confirmCalibration(
	struct soap *soap,
	std::string *gloveAddress)
{
	_ns1__confirmCalibration *_p = soap_new__ns1__confirmCalibration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__confirmCalibration::gloveAddress = gloveAddress;
	}
	return _p;
}

inline int soap_write__ns1__confirmCalibration(struct soap *soap, _ns1__confirmCalibration const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:confirmCalibration", p->soap_type() == SOAP_TYPE__ns1__confirmCalibration ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__confirmCalibration * SOAP_FMAC4 soap_get__ns1__confirmCalibration(struct soap*, _ns1__confirmCalibration *, const char*, const char*);

inline int soap_read__ns1__confirmCalibration(struct soap *soap, _ns1__confirmCalibration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__confirmCalibration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__calibrateFlexorsResponse_DEFINED
#define SOAP_TYPE__ns1__calibrateFlexorsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__calibrateFlexorsResponse(struct soap*, const char*, int, const _ns1__calibrateFlexorsResponse *, const char*);
SOAP_FMAC3 _ns1__calibrateFlexorsResponse * SOAP_FMAC4 soap_in__ns1__calibrateFlexorsResponse(struct soap*, const char*, _ns1__calibrateFlexorsResponse *, const char*);
SOAP_FMAC1 _ns1__calibrateFlexorsResponse * SOAP_FMAC2 soap_instantiate__ns1__calibrateFlexorsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__calibrateFlexorsResponse * soap_new__ns1__calibrateFlexorsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__calibrateFlexorsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__calibrateFlexorsResponse * soap_new_req__ns1__calibrateFlexorsResponse(
	struct soap *soap)
{
	_ns1__calibrateFlexorsResponse *_p = soap_new__ns1__calibrateFlexorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__calibrateFlexorsResponse * soap_new_set__ns1__calibrateFlexorsResponse(
	struct soap *soap)
{
	_ns1__calibrateFlexorsResponse *_p = soap_new__ns1__calibrateFlexorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__calibrateFlexorsResponse(struct soap *soap, _ns1__calibrateFlexorsResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:calibrateFlexorsResponse", p->soap_type() == SOAP_TYPE__ns1__calibrateFlexorsResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__calibrateFlexorsResponse * SOAP_FMAC4 soap_get__ns1__calibrateFlexorsResponse(struct soap*, _ns1__calibrateFlexorsResponse *, const char*, const char*);

inline int soap_read__ns1__calibrateFlexorsResponse(struct soap *soap, _ns1__calibrateFlexorsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__calibrateFlexorsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__calibrateFlexors_DEFINED
#define SOAP_TYPE__ns1__calibrateFlexors_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__calibrateFlexors(struct soap*, const char*, int, const _ns1__calibrateFlexors *, const char*);
SOAP_FMAC3 _ns1__calibrateFlexors * SOAP_FMAC4 soap_in__ns1__calibrateFlexors(struct soap*, const char*, _ns1__calibrateFlexors *, const char*);
SOAP_FMAC1 _ns1__calibrateFlexors * SOAP_FMAC2 soap_instantiate__ns1__calibrateFlexors(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__calibrateFlexors * soap_new__ns1__calibrateFlexors(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__calibrateFlexors(soap, n, NULL, NULL, NULL);
}

inline _ns1__calibrateFlexors * soap_new_req__ns1__calibrateFlexors(
	struct soap *soap)
{
	_ns1__calibrateFlexors *_p = soap_new__ns1__calibrateFlexors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__calibrateFlexors * soap_new_set__ns1__calibrateFlexors(
	struct soap *soap,
	std::string *gloveAddress)
{
	_ns1__calibrateFlexors *_p = soap_new__ns1__calibrateFlexors(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__calibrateFlexors::gloveAddress = gloveAddress;
	}
	return _p;
}

inline int soap_write__ns1__calibrateFlexors(struct soap *soap, _ns1__calibrateFlexors const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:calibrateFlexors", p->soap_type() == SOAP_TYPE__ns1__calibrateFlexors ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__calibrateFlexors * SOAP_FMAC4 soap_get__ns1__calibrateFlexors(struct soap*, _ns1__calibrateFlexors *, const char*, const char*);

inline int soap_read__ns1__calibrateFlexors(struct soap *soap, _ns1__calibrateFlexors *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__calibrateFlexors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__removeFlexorResponse_DEFINED
#define SOAP_TYPE__ns1__removeFlexorResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeFlexorResponse(struct soap*, const char*, int, const _ns1__removeFlexorResponse *, const char*);
SOAP_FMAC3 _ns1__removeFlexorResponse * SOAP_FMAC4 soap_in__ns1__removeFlexorResponse(struct soap*, const char*, _ns1__removeFlexorResponse *, const char*);
SOAP_FMAC1 _ns1__removeFlexorResponse * SOAP_FMAC2 soap_instantiate__ns1__removeFlexorResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__removeFlexorResponse * soap_new__ns1__removeFlexorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__removeFlexorResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__removeFlexorResponse * soap_new_req__ns1__removeFlexorResponse(
	struct soap *soap)
{
	_ns1__removeFlexorResponse *_p = soap_new__ns1__removeFlexorResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__removeFlexorResponse * soap_new_set__ns1__removeFlexorResponse(
	struct soap *soap,
	int *removeFlexorResult)
{
	_ns1__removeFlexorResponse *_p = soap_new__ns1__removeFlexorResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__removeFlexorResponse::removeFlexorResult = removeFlexorResult;
	}
	return _p;
}

inline int soap_write__ns1__removeFlexorResponse(struct soap *soap, _ns1__removeFlexorResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:removeFlexorResponse", p->soap_type() == SOAP_TYPE__ns1__removeFlexorResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__removeFlexorResponse * SOAP_FMAC4 soap_get__ns1__removeFlexorResponse(struct soap*, _ns1__removeFlexorResponse *, const char*, const char*);

inline int soap_read__ns1__removeFlexorResponse(struct soap *soap, _ns1__removeFlexorResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__removeFlexorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__removeFlexor_DEFINED
#define SOAP_TYPE__ns1__removeFlexor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeFlexor(struct soap*, const char*, int, const _ns1__removeFlexor *, const char*);
SOAP_FMAC3 _ns1__removeFlexor * SOAP_FMAC4 soap_in__ns1__removeFlexor(struct soap*, const char*, _ns1__removeFlexor *, const char*);
SOAP_FMAC1 _ns1__removeFlexor * SOAP_FMAC2 soap_instantiate__ns1__removeFlexor(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__removeFlexor * soap_new__ns1__removeFlexor(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__removeFlexor(soap, n, NULL, NULL, NULL);
}

inline _ns1__removeFlexor * soap_new_req__ns1__removeFlexor(
	struct soap *soap)
{
	_ns1__removeFlexor *_p = soap_new__ns1__removeFlexor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__removeFlexor * soap_new_set__ns1__removeFlexor(
	struct soap *soap,
	std::string *gloveAddress,
	int *mapping)
{
	_ns1__removeFlexor *_p = soap_new__ns1__removeFlexor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__removeFlexor::gloveAddress = gloveAddress;
		_p->_ns1__removeFlexor::mapping = mapping;
	}
	return _p;
}

inline int soap_write__ns1__removeFlexor(struct soap *soap, _ns1__removeFlexor const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:removeFlexor", p->soap_type() == SOAP_TYPE__ns1__removeFlexor ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__removeFlexor * SOAP_FMAC4 soap_get__ns1__removeFlexor(struct soap*, _ns1__removeFlexor *, const char*, const char*);

inline int soap_read__ns1__removeFlexor(struct soap *soap, _ns1__removeFlexor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__removeFlexor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__addFlexorResponse_DEFINED
#define SOAP_TYPE__ns1__addFlexorResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addFlexorResponse(struct soap*, const char*, int, const _ns1__addFlexorResponse *, const char*);
SOAP_FMAC3 _ns1__addFlexorResponse * SOAP_FMAC4 soap_in__ns1__addFlexorResponse(struct soap*, const char*, _ns1__addFlexorResponse *, const char*);
SOAP_FMAC1 _ns1__addFlexorResponse * SOAP_FMAC2 soap_instantiate__ns1__addFlexorResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__addFlexorResponse * soap_new__ns1__addFlexorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__addFlexorResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__addFlexorResponse * soap_new_req__ns1__addFlexorResponse(
	struct soap *soap)
{
	_ns1__addFlexorResponse *_p = soap_new__ns1__addFlexorResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__addFlexorResponse * soap_new_set__ns1__addFlexorResponse(
	struct soap *soap,
	int *addFlexorResult)
{
	_ns1__addFlexorResponse *_p = soap_new__ns1__addFlexorResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__addFlexorResponse::addFlexorResult = addFlexorResult;
	}
	return _p;
}

inline int soap_write__ns1__addFlexorResponse(struct soap *soap, _ns1__addFlexorResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:addFlexorResponse", p->soap_type() == SOAP_TYPE__ns1__addFlexorResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__addFlexorResponse * SOAP_FMAC4 soap_get__ns1__addFlexorResponse(struct soap*, _ns1__addFlexorResponse *, const char*, const char*);

inline int soap_read__ns1__addFlexorResponse(struct soap *soap, _ns1__addFlexorResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__addFlexorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__addFlexor_DEFINED
#define SOAP_TYPE__ns1__addFlexor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addFlexor(struct soap*, const char*, int, const _ns1__addFlexor *, const char*);
SOAP_FMAC3 _ns1__addFlexor * SOAP_FMAC4 soap_in__ns1__addFlexor(struct soap*, const char*, _ns1__addFlexor *, const char*);
SOAP_FMAC1 _ns1__addFlexor * SOAP_FMAC2 soap_instantiate__ns1__addFlexor(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__addFlexor * soap_new__ns1__addFlexor(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__addFlexor(soap, n, NULL, NULL, NULL);
}

inline _ns1__addFlexor * soap_new_req__ns1__addFlexor(
	struct soap *soap)
{
	_ns1__addFlexor *_p = soap_new__ns1__addFlexor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__addFlexor * soap_new_set__ns1__addFlexor(
	struct soap *soap,
	std::string *gloveAddress,
	int *pin,
	int *mapping)
{
	_ns1__addFlexor *_p = soap_new__ns1__addFlexor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__addFlexor::gloveAddress = gloveAddress;
		_p->_ns1__addFlexor::pin = pin;
		_p->_ns1__addFlexor::mapping = mapping;
	}
	return _p;
}

inline int soap_write__ns1__addFlexor(struct soap *soap, _ns1__addFlexor const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:addFlexor", p->soap_type() == SOAP_TYPE__ns1__addFlexor ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__addFlexor * SOAP_FMAC4 soap_get__ns1__addFlexor(struct soap*, _ns1__addFlexor *, const char*, const char*);

inline int soap_read__ns1__addFlexor(struct soap *soap, _ns1__addFlexor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__addFlexor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ActivateManyResponse_DEFINED
#define SOAP_TYPE__ns1__ActivateManyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ActivateManyResponse(struct soap*, const char*, int, const _ns1__ActivateManyResponse *, const char*);
SOAP_FMAC3 _ns1__ActivateManyResponse * SOAP_FMAC4 soap_in__ns1__ActivateManyResponse(struct soap*, const char*, _ns1__ActivateManyResponse *, const char*);
SOAP_FMAC1 _ns1__ActivateManyResponse * SOAP_FMAC2 soap_instantiate__ns1__ActivateManyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ActivateManyResponse * soap_new__ns1__ActivateManyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ActivateManyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ActivateManyResponse * soap_new_req__ns1__ActivateManyResponse(
	struct soap *soap)
{
	_ns1__ActivateManyResponse *_p = soap_new__ns1__ActivateManyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ActivateManyResponse * soap_new_set__ns1__ActivateManyResponse(
	struct soap *soap,
	int *ActivateManyResult)
{
	_ns1__ActivateManyResponse *_p = soap_new__ns1__ActivateManyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ActivateManyResponse::ActivateManyResult = ActivateManyResult;
	}
	return _p;
}

inline int soap_write__ns1__ActivateManyResponse(struct soap *soap, _ns1__ActivateManyResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActivateManyResponse", p->soap_type() == SOAP_TYPE__ns1__ActivateManyResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ActivateManyResponse * SOAP_FMAC4 soap_get__ns1__ActivateManyResponse(struct soap*, _ns1__ActivateManyResponse *, const char*, const char*);

inline int soap_read__ns1__ActivateManyResponse(struct soap *soap, _ns1__ActivateManyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ActivateManyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ActivateMany_DEFINED
#define SOAP_TYPE__ns1__ActivateMany_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ActivateMany(struct soap*, const char*, int, const _ns1__ActivateMany *, const char*);
SOAP_FMAC3 _ns1__ActivateMany * SOAP_FMAC4 soap_in__ns1__ActivateMany(struct soap*, const char*, _ns1__ActivateMany *, const char*);
SOAP_FMAC1 _ns1__ActivateMany * SOAP_FMAC2 soap_instantiate__ns1__ActivateMany(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ActivateMany * soap_new__ns1__ActivateMany(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ActivateMany(soap, n, NULL, NULL, NULL);
}

inline _ns1__ActivateMany * soap_new_req__ns1__ActivateMany(
	struct soap *soap)
{
	_ns1__ActivateMany *_p = soap_new__ns1__ActivateMany(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ActivateMany * soap_new_set__ns1__ActivateMany(
	struct soap *soap,
	std::string *gloveAddress,
	ns5__ArrayOfint *actuators,
	ns5__ArrayOfint *intensityList)
{
	_ns1__ActivateMany *_p = soap_new__ns1__ActivateMany(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ActivateMany::gloveAddress = gloveAddress;
		_p->_ns1__ActivateMany::actuators = actuators;
		_p->_ns1__ActivateMany::intensityList = intensityList;
	}
	return _p;
}

inline int soap_write__ns1__ActivateMany(struct soap *soap, _ns1__ActivateMany const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActivateMany", p->soap_type() == SOAP_TYPE__ns1__ActivateMany ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ActivateMany * SOAP_FMAC4 soap_get__ns1__ActivateMany(struct soap*, _ns1__ActivateMany *, const char*, const char*);

inline int soap_read__ns1__ActivateMany(struct soap *soap, _ns1__ActivateMany *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ActivateMany(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DisconnectResponse_DEFINED
#define SOAP_TYPE__ns1__DisconnectResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DisconnectResponse(struct soap*, const char*, int, const _ns1__DisconnectResponse *, const char*);
SOAP_FMAC3 _ns1__DisconnectResponse * SOAP_FMAC4 soap_in__ns1__DisconnectResponse(struct soap*, const char*, _ns1__DisconnectResponse *, const char*);
SOAP_FMAC1 _ns1__DisconnectResponse * SOAP_FMAC2 soap_instantiate__ns1__DisconnectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DisconnectResponse * soap_new__ns1__DisconnectResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DisconnectResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DisconnectResponse * soap_new_req__ns1__DisconnectResponse(
	struct soap *soap)
{
	_ns1__DisconnectResponse *_p = soap_new__ns1__DisconnectResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DisconnectResponse * soap_new_set__ns1__DisconnectResponse(
	struct soap *soap,
	int *DisconnectResult)
{
	_ns1__DisconnectResponse *_p = soap_new__ns1__DisconnectResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DisconnectResponse::DisconnectResult = DisconnectResult;
	}
	return _p;
}

inline int soap_write__ns1__DisconnectResponse(struct soap *soap, _ns1__DisconnectResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DisconnectResponse", p->soap_type() == SOAP_TYPE__ns1__DisconnectResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DisconnectResponse * SOAP_FMAC4 soap_get__ns1__DisconnectResponse(struct soap*, _ns1__DisconnectResponse *, const char*, const char*);

inline int soap_read__ns1__DisconnectResponse(struct soap *soap, _ns1__DisconnectResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DisconnectResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Disconnect_DEFINED
#define SOAP_TYPE__ns1__Disconnect_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Disconnect(struct soap*, const char*, int, const _ns1__Disconnect *, const char*);
SOAP_FMAC3 _ns1__Disconnect * SOAP_FMAC4 soap_in__ns1__Disconnect(struct soap*, const char*, _ns1__Disconnect *, const char*);
SOAP_FMAC1 _ns1__Disconnect * SOAP_FMAC2 soap_instantiate__ns1__Disconnect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Disconnect * soap_new__ns1__Disconnect(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Disconnect(soap, n, NULL, NULL, NULL);
}

inline _ns1__Disconnect * soap_new_req__ns1__Disconnect(
	struct soap *soap)
{
	_ns1__Disconnect *_p = soap_new__ns1__Disconnect(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Disconnect * soap_new_set__ns1__Disconnect(
	struct soap *soap,
	std::string *gloveAddress)
{
	_ns1__Disconnect *_p = soap_new__ns1__Disconnect(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Disconnect::gloveAddress = gloveAddress;
	}
	return _p;
}

inline int soap_write__ns1__Disconnect(struct soap *soap, _ns1__Disconnect const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Disconnect", p->soap_type() == SOAP_TYPE__ns1__Disconnect ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Disconnect * SOAP_FMAC4 soap_get__ns1__Disconnect(struct soap*, _ns1__Disconnect *, const char*, const char*);

inline int soap_read__ns1__Disconnect(struct soap *soap, _ns1__Disconnect *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Disconnect(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ConnectResponse_DEFINED
#define SOAP_TYPE__ns1__ConnectResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConnectResponse(struct soap*, const char*, int, const _ns1__ConnectResponse *, const char*);
SOAP_FMAC3 _ns1__ConnectResponse * SOAP_FMAC4 soap_in__ns1__ConnectResponse(struct soap*, const char*, _ns1__ConnectResponse *, const char*);
SOAP_FMAC1 _ns1__ConnectResponse * SOAP_FMAC2 soap_instantiate__ns1__ConnectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ConnectResponse * soap_new__ns1__ConnectResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ConnectResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ConnectResponse * soap_new_req__ns1__ConnectResponse(
	struct soap *soap)
{
	_ns1__ConnectResponse *_p = soap_new__ns1__ConnectResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ConnectResponse * soap_new_set__ns1__ConnectResponse(
	struct soap *soap,
	int *ConnectResult)
{
	_ns1__ConnectResponse *_p = soap_new__ns1__ConnectResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ConnectResponse::ConnectResult = ConnectResult;
	}
	return _p;
}

inline int soap_write__ns1__ConnectResponse(struct soap *soap, _ns1__ConnectResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConnectResponse", p->soap_type() == SOAP_TYPE__ns1__ConnectResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ConnectResponse * SOAP_FMAC4 soap_get__ns1__ConnectResponse(struct soap*, _ns1__ConnectResponse *, const char*, const char*);

inline int soap_read__ns1__ConnectResponse(struct soap *soap, _ns1__ConnectResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ConnectResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Connect_DEFINED
#define SOAP_TYPE__ns1__Connect_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Connect(struct soap*, const char*, int, const _ns1__Connect *, const char*);
SOAP_FMAC3 _ns1__Connect * SOAP_FMAC4 soap_in__ns1__Connect(struct soap*, const char*, _ns1__Connect *, const char*);
SOAP_FMAC1 _ns1__Connect * SOAP_FMAC2 soap_instantiate__ns1__Connect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Connect * soap_new__ns1__Connect(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Connect(soap, n, NULL, NULL, NULL);
}

inline _ns1__Connect * soap_new_req__ns1__Connect(
	struct soap *soap)
{
	_ns1__Connect *_p = soap_new__ns1__Connect(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Connect * soap_new_set__ns1__Connect(
	struct soap *soap,
	std::string *gloveAddress)
{
	_ns1__Connect *_p = soap_new__ns1__Connect(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Connect::gloveAddress = gloveAddress;
	}
	return _p;
}

inline int soap_write__ns1__Connect(struct soap *soap, _ns1__Connect const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Connect", p->soap_type() == SOAP_TYPE__ns1__Connect ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Connect * SOAP_FMAC4 soap_get__ns1__Connect(struct soap*, _ns1__Connect *, const char*, const char*);

inline int soap_read__ns1__Connect(struct soap *soap, _ns1__Connect *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Connect(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ActivateResponse_DEFINED
#define SOAP_TYPE__ns1__ActivateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ActivateResponse(struct soap*, const char*, int, const _ns1__ActivateResponse *, const char*);
SOAP_FMAC3 _ns1__ActivateResponse * SOAP_FMAC4 soap_in__ns1__ActivateResponse(struct soap*, const char*, _ns1__ActivateResponse *, const char*);
SOAP_FMAC1 _ns1__ActivateResponse * SOAP_FMAC2 soap_instantiate__ns1__ActivateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ActivateResponse * soap_new__ns1__ActivateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ActivateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ActivateResponse * soap_new_req__ns1__ActivateResponse(
	struct soap *soap)
{
	_ns1__ActivateResponse *_p = soap_new__ns1__ActivateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ActivateResponse * soap_new_set__ns1__ActivateResponse(
	struct soap *soap,
	int *ActivateResult)
{
	_ns1__ActivateResponse *_p = soap_new__ns1__ActivateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ActivateResponse::ActivateResult = ActivateResult;
	}
	return _p;
}

inline int soap_write__ns1__ActivateResponse(struct soap *soap, _ns1__ActivateResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActivateResponse", p->soap_type() == SOAP_TYPE__ns1__ActivateResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ActivateResponse * SOAP_FMAC4 soap_get__ns1__ActivateResponse(struct soap*, _ns1__ActivateResponse *, const char*, const char*);

inline int soap_read__ns1__ActivateResponse(struct soap *soap, _ns1__ActivateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ActivateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Activate_DEFINED
#define SOAP_TYPE__ns1__Activate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Activate(struct soap*, const char*, int, const _ns1__Activate *, const char*);
SOAP_FMAC3 _ns1__Activate * SOAP_FMAC4 soap_in__ns1__Activate(struct soap*, const char*, _ns1__Activate *, const char*);
SOAP_FMAC1 _ns1__Activate * SOAP_FMAC2 soap_instantiate__ns1__Activate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Activate * soap_new__ns1__Activate(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Activate(soap, n, NULL, NULL, NULL);
}

inline _ns1__Activate * soap_new_req__ns1__Activate(
	struct soap *soap)
{
	_ns1__Activate *_p = soap_new__ns1__Activate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Activate * soap_new_set__ns1__Activate(
	struct soap *soap,
	std::string *gloveAddress,
	int *actuator,
	int *intensity)
{
	_ns1__Activate *_p = soap_new__ns1__Activate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Activate::gloveAddress = gloveAddress;
		_p->_ns1__Activate::actuator = actuator;
		_p->_ns1__Activate::intensity = intensity;
	}
	return _p;
}

inline int soap_write__ns1__Activate(struct soap *soap, _ns1__Activate const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Activate", p->soap_type() == SOAP_TYPE__ns1__Activate ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Activate * SOAP_FMAC4 soap_get__ns1__Activate(struct soap*, _ns1__Activate *, const char*, const char*);

inline int soap_read__ns1__Activate(struct soap *soap, _ns1__Activate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Activate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SaveGloveResponse_DEFINED
#define SOAP_TYPE__ns1__SaveGloveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveGloveResponse(struct soap*, const char*, int, const _ns1__SaveGloveResponse *, const char*);
SOAP_FMAC3 _ns1__SaveGloveResponse * SOAP_FMAC4 soap_in__ns1__SaveGloveResponse(struct soap*, const char*, _ns1__SaveGloveResponse *, const char*);
SOAP_FMAC1 _ns1__SaveGloveResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveGloveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SaveGloveResponse * soap_new__ns1__SaveGloveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SaveGloveResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SaveGloveResponse * soap_new_req__ns1__SaveGloveResponse(
	struct soap *soap)
{
	_ns1__SaveGloveResponse *_p = soap_new__ns1__SaveGloveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SaveGloveResponse * soap_new_set__ns1__SaveGloveResponse(
	struct soap *soap)
{
	_ns1__SaveGloveResponse *_p = soap_new__ns1__SaveGloveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__SaveGloveResponse(struct soap *soap, _ns1__SaveGloveResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveGloveResponse", p->soap_type() == SOAP_TYPE__ns1__SaveGloveResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SaveGloveResponse * SOAP_FMAC4 soap_get__ns1__SaveGloveResponse(struct soap*, _ns1__SaveGloveResponse *, const char*, const char*);

inline int soap_read__ns1__SaveGloveResponse(struct soap *soap, _ns1__SaveGloveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SaveGloveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SaveGlove_DEFINED
#define SOAP_TYPE__ns1__SaveGlove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveGlove(struct soap*, const char*, int, const _ns1__SaveGlove *, const char*);
SOAP_FMAC3 _ns1__SaveGlove * SOAP_FMAC4 soap_in__ns1__SaveGlove(struct soap*, const char*, _ns1__SaveGlove *, const char*);
SOAP_FMAC1 _ns1__SaveGlove * SOAP_FMAC2 soap_instantiate__ns1__SaveGlove(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SaveGlove * soap_new__ns1__SaveGlove(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SaveGlove(soap, n, NULL, NULL, NULL);
}

inline _ns1__SaveGlove * soap_new_req__ns1__SaveGlove(
	struct soap *soap)
{
	_ns1__SaveGlove *_p = soap_new__ns1__SaveGlove(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SaveGlove * soap_new_set__ns1__SaveGlove(
	struct soap *soap,
	ns4__Glove *glove)
{
	_ns1__SaveGlove *_p = soap_new__ns1__SaveGlove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SaveGlove::glove = glove;
	}
	return _p;
}

inline int soap_write__ns1__SaveGlove(struct soap *soap, _ns1__SaveGlove const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveGlove", p->soap_type() == SOAP_TYPE__ns1__SaveGlove ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SaveGlove * SOAP_FMAC4 soap_get__ns1__SaveGlove(struct soap*, _ns1__SaveGlove *, const char*, const char*);

inline int soap_read__ns1__SaveGlove(struct soap *soap, _ns1__SaveGlove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SaveGlove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RefreshGlovesResponse_DEFINED
#define SOAP_TYPE__ns1__RefreshGlovesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RefreshGlovesResponse(struct soap*, const char*, int, const _ns1__RefreshGlovesResponse *, const char*);
SOAP_FMAC3 _ns1__RefreshGlovesResponse * SOAP_FMAC4 soap_in__ns1__RefreshGlovesResponse(struct soap*, const char*, _ns1__RefreshGlovesResponse *, const char*);
SOAP_FMAC1 _ns1__RefreshGlovesResponse * SOAP_FMAC2 soap_instantiate__ns1__RefreshGlovesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RefreshGlovesResponse * soap_new__ns1__RefreshGlovesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RefreshGlovesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RefreshGlovesResponse * soap_new_req__ns1__RefreshGlovesResponse(
	struct soap *soap)
{
	_ns1__RefreshGlovesResponse *_p = soap_new__ns1__RefreshGlovesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RefreshGlovesResponse * soap_new_set__ns1__RefreshGlovesResponse(
	struct soap *soap,
	ns4__ArrayOfGlove *RefreshGlovesResult)
{
	_ns1__RefreshGlovesResponse *_p = soap_new__ns1__RefreshGlovesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RefreshGlovesResponse::RefreshGlovesResult = RefreshGlovesResult;
	}
	return _p;
}

inline int soap_write__ns1__RefreshGlovesResponse(struct soap *soap, _ns1__RefreshGlovesResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefreshGlovesResponse", p->soap_type() == SOAP_TYPE__ns1__RefreshGlovesResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RefreshGlovesResponse * SOAP_FMAC4 soap_get__ns1__RefreshGlovesResponse(struct soap*, _ns1__RefreshGlovesResponse *, const char*, const char*);

inline int soap_read__ns1__RefreshGlovesResponse(struct soap *soap, _ns1__RefreshGlovesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RefreshGlovesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RefreshGloves_DEFINED
#define SOAP_TYPE__ns1__RefreshGloves_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RefreshGloves(struct soap*, const char*, int, const _ns1__RefreshGloves *, const char*);
SOAP_FMAC3 _ns1__RefreshGloves * SOAP_FMAC4 soap_in__ns1__RefreshGloves(struct soap*, const char*, _ns1__RefreshGloves *, const char*);
SOAP_FMAC1 _ns1__RefreshGloves * SOAP_FMAC2 soap_instantiate__ns1__RefreshGloves(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RefreshGloves * soap_new__ns1__RefreshGloves(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RefreshGloves(soap, n, NULL, NULL, NULL);
}

inline _ns1__RefreshGloves * soap_new_req__ns1__RefreshGloves(
	struct soap *soap)
{
	_ns1__RefreshGloves *_p = soap_new__ns1__RefreshGloves(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RefreshGloves * soap_new_set__ns1__RefreshGloves(
	struct soap *soap)
{
	_ns1__RefreshGloves *_p = soap_new__ns1__RefreshGloves(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__RefreshGloves(struct soap *soap, _ns1__RefreshGloves const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefreshGloves", p->soap_type() == SOAP_TYPE__ns1__RefreshGloves ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RefreshGloves * SOAP_FMAC4 soap_get__ns1__RefreshGloves(struct soap*, _ns1__RefreshGloves *, const char*, const char*);

inline int soap_read__ns1__RefreshGloves(struct soap *soap, _ns1__RefreshGloves *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RefreshGloves(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetGlovesResponse_DEFINED
#define SOAP_TYPE__ns1__GetGlovesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGlovesResponse(struct soap*, const char*, int, const _ns1__GetGlovesResponse *, const char*);
SOAP_FMAC3 _ns1__GetGlovesResponse * SOAP_FMAC4 soap_in__ns1__GetGlovesResponse(struct soap*, const char*, _ns1__GetGlovesResponse *, const char*);
SOAP_FMAC1 _ns1__GetGlovesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGlovesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetGlovesResponse * soap_new__ns1__GetGlovesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetGlovesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetGlovesResponse * soap_new_req__ns1__GetGlovesResponse(
	struct soap *soap)
{
	_ns1__GetGlovesResponse *_p = soap_new__ns1__GetGlovesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetGlovesResponse * soap_new_set__ns1__GetGlovesResponse(
	struct soap *soap,
	ns4__ArrayOfGlove *GetGlovesResult)
{
	_ns1__GetGlovesResponse *_p = soap_new__ns1__GetGlovesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetGlovesResponse::GetGlovesResult = GetGlovesResult;
	}
	return _p;
}

inline int soap_write__ns1__GetGlovesResponse(struct soap *soap, _ns1__GetGlovesResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGlovesResponse", p->soap_type() == SOAP_TYPE__ns1__GetGlovesResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetGlovesResponse * SOAP_FMAC4 soap_get__ns1__GetGlovesResponse(struct soap*, _ns1__GetGlovesResponse *, const char*, const char*);

inline int soap_read__ns1__GetGlovesResponse(struct soap *soap, _ns1__GetGlovesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetGlovesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetGloves_DEFINED
#define SOAP_TYPE__ns1__GetGloves_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGloves(struct soap*, const char*, int, const _ns1__GetGloves *, const char*);
SOAP_FMAC3 _ns1__GetGloves * SOAP_FMAC4 soap_in__ns1__GetGloves(struct soap*, const char*, _ns1__GetGloves *, const char*);
SOAP_FMAC1 _ns1__GetGloves * SOAP_FMAC2 soap_instantiate__ns1__GetGloves(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetGloves * soap_new__ns1__GetGloves(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetGloves(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetGloves * soap_new_req__ns1__GetGloves(
	struct soap *soap)
{
	_ns1__GetGloves *_p = soap_new__ns1__GetGloves(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetGloves * soap_new_set__ns1__GetGloves(
	struct soap *soap)
{
	_ns1__GetGloves *_p = soap_new__ns1__GetGloves(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetGloves(struct soap *soap, _ns1__GetGloves const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGloves", p->soap_type() == SOAP_TYPE__ns1__GetGloves ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetGloves * SOAP_FMAC4 soap_get__ns1__GetGloves(struct soap*, _ns1__GetGloves *, const char*, const char*);

inline int soap_read__ns1__GetGloves(struct soap *soap, _ns1__GetGloves *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetGloves(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort_DEFINED
#define SOAP_TYPE_xsd__unsignedShort_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);
SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
	}
	return _p;
}

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item,
	char *__item__1)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

inline int soap_read_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_xsd__unsignedLong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);
SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item,
	char *__item__1)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt_DEFINED
#define SOAP_TYPE_xsd__unsignedInt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);
SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
	}
	return _p;
}

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item,
	char *__item__1)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

inline int soap_read_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte__DEFINED
#define SOAP_TYPE_xsd__unsignedByte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);
SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
	}
	return _p;
}

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item,
	char *__item__1)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedByte", p->soap_type() == SOAP_TYPE_xsd__unsignedByte_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

inline int soap_read_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap,
	const std::string& __item)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__short_DEFINED
#define SOAP_TYPE_xsd__short_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);
SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL);
}

inline xsd__short * soap_new_req_xsd__short(
	struct soap *soap,
	short __item)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
	}
	return _p;
}

inline xsd__short * soap_new_set_xsd__short(
	struct soap *soap,
	short __item,
	char *__item__1)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__short(struct soap *soap, xsd__short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:short", p->soap_type() == SOAP_TYPE_xsd__short ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

inline int soap_read_xsd__short(struct soap *soap, xsd__short *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);
SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

inline xsd__long * soap_new_req_xsd__long(
	struct soap *soap,
	LONG64 __item)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
	}
	return _p;
}

inline xsd__long * soap_new_set_xsd__long(
	struct soap *soap,
	LONG64 __item,
	char *__item__1)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__long(struct soap *soap, xsd__long const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, xsd__long *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__float_DEFINED
#define SOAP_TYPE_xsd__float_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);
SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);
}

inline xsd__float * soap_new_req_xsd__float(
	struct soap *soap,
	float __item)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
	}
	return _p;
}

inline xsd__float * soap_new_set_xsd__float(
	struct soap *soap,
	float __item,
	char *__item__1)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__float(struct soap *soap, xsd__float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, xsd__float *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration__DEFINED
#define SOAP_TYPE_xsd__duration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);
SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL);
}

inline xsd__duration_ * soap_new_req_xsd__duration_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
	}
	return _p;
}

inline xsd__duration_ * soap_new_set_xsd__duration_(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__duration_(struct soap *soap, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

inline int soap_read_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__duration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__double_DEFINED
#define SOAP_TYPE_xsd__double_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);
SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL);
}

inline xsd__double * soap_new_req_xsd__double(
	struct soap *soap,
	double __item)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
	}
	return _p;
}

inline xsd__double * soap_new_set_xsd__double(
	struct soap *soap,
	double __item,
	char *__item__1)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__double(struct soap *soap, xsd__double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, xsd__double *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal__DEFINED
#define SOAP_TYPE_xsd__decimal__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);
SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL);
}

inline xsd__decimal_ * soap_new_req_xsd__decimal_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
	}
	return _p;
}

inline xsd__decimal_ * soap_new_set_xsd__decimal_(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__decimal_(struct soap *soap, xsd__decimal_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:decimal", p->soap_type() == SOAP_TYPE_xsd__decimal_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

inline int soap_read_xsd__decimal_(struct soap *soap, xsd__decimal_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__decimal_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item__1)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__byte__DEFINED
#define SOAP_TYPE_xsd__byte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);
SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL);
}

inline xsd__byte_ * soap_new_req_xsd__byte_(
	struct soap *soap,
	char __item)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
	}
	return _p;
}

inline xsd__byte_ * soap_new_set_xsd__byte_(
	struct soap *soap,
	char __item,
	char *__item__1)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__byte_(struct soap *soap, xsd__byte_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:byte", p->soap_type() == SOAP_TYPE_xsd__byte_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

inline int soap_read_xsd__byte_(struct soap *soap, xsd__byte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__byte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item__1)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary__DEFINED
#define SOAP_TYPE_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item__1)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI__DEFINED
#define SOAP_TYPE_xsd__anyURI__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);
SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
	}
	return _p;
}

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__anyURI_(struct soap *soap, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

inline int soap_read_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyURI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName__DEFINED
#define SOAP_TYPE_xsd__QName__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);
SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL);
}

inline xsd__QName_ * soap_new_req_xsd__QName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
	}
	return _p;
}

inline xsd__QName_ * soap_new_set_xsd__QName_(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__QName_(struct soap *soap, xsd__QName_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

inline int soap_read_xsd__QName_(struct soap *soap, xsd__QName_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__QName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__IDREF__DEFINED
#define SOAP_TYPE_xsd__IDREF__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);
SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL);
}

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
	}
	return _p;
}

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__IDREF_(struct soap *soap, xsd__IDREF_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:IDREF", p->soap_type() == SOAP_TYPE_xsd__IDREF_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

inline int soap_read_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__IDREF_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__IDREF_DEFINED
#define SOAP_TYPE_xsd__IDREF_DEFINED

inline void soap_default_xsd__IDREF(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, const std::string *);

#define soap_xsd__IDREF2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__IDREF(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__IDREF soap_instantiate_std__string


#define soap_new_xsd__IDREF soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__IDREF(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__IDREF(soap, p, "xsd:IDREF", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__IDREF(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__IDREF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID__DEFINED
#define SOAP_TYPE_xsd__ID__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);
SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL);
}

inline xsd__ID_ * soap_new_req_xsd__ID_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
	}
	return _p;
}

inline xsd__ID_ * soap_new_set_xsd__ID_(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__ID_(struct soap *soap, xsd__ID_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:ID", p->soap_type() == SOAP_TYPE_xsd__ID_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

inline int soap_read_xsd__ID_(struct soap *soap, xsd__ID_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__ID_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID_DEFINED
#define SOAP_TYPE_xsd__ID_DEFINED

inline void soap_default_xsd__ID(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::string *);

#define soap_xsd__ID2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__ID(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__ID soap_instantiate_std__string


#define soap_new_xsd__ID soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__ID(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__ID(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__ID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__setRawData_DEFINED
#define SOAP_TYPE___ns1__setRawData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setRawData(struct soap*, struct __ns1__setRawData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setRawData(struct soap*, const struct __ns1__setRawData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setRawData(struct soap*, const char*, int, const struct __ns1__setRawData *, const char*);
SOAP_FMAC3 struct __ns1__setRawData * SOAP_FMAC4 soap_in___ns1__setRawData(struct soap*, const char*, struct __ns1__setRawData *, const char*);
SOAP_FMAC1 struct __ns1__setRawData * SOAP_FMAC2 soap_instantiate___ns1__setRawData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setRawData * soap_new___ns1__setRawData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__setRawData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setRawData * soap_new_req___ns1__setRawData(
	struct soap *soap)
{
	struct __ns1__setRawData *_p = soap_new___ns1__setRawData(soap);
	if (_p)
	{	soap_default___ns1__setRawData(soap, _p);
	}
	return _p;
}

inline struct __ns1__setRawData * soap_new_set___ns1__setRawData(
	struct soap *soap,
	_ns1__setRawData *ns1__setRawData)
{
	struct __ns1__setRawData *_p = soap_new___ns1__setRawData(soap);
	if (_p)
	{	soap_default___ns1__setRawData(soap, _p);
		_p->ns1__setRawData = ns1__setRawData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setRawData(struct soap*, const struct __ns1__setRawData *, const char*, const char*);

inline int soap_write___ns1__setRawData(struct soap *soap, struct __ns1__setRawData const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setRawData(soap, p), 0) || soap_put___ns1__setRawData(soap, p, "-ns1:setRawData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setRawData * SOAP_FMAC4 soap_get___ns1__setRawData(struct soap*, struct __ns1__setRawData *, const char*, const char*);

inline int soap_read___ns1__setRawData(struct soap *soap, struct __ns1__setRawData *p)
{
	if (p)
	{	soap_default___ns1__setRawData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setRawData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setIMUStatus_DEFINED
#define SOAP_TYPE___ns1__setIMUStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setIMUStatus(struct soap*, struct __ns1__setIMUStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setIMUStatus(struct soap*, const struct __ns1__setIMUStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setIMUStatus(struct soap*, const char*, int, const struct __ns1__setIMUStatus *, const char*);
SOAP_FMAC3 struct __ns1__setIMUStatus * SOAP_FMAC4 soap_in___ns1__setIMUStatus(struct soap*, const char*, struct __ns1__setIMUStatus *, const char*);
SOAP_FMAC1 struct __ns1__setIMUStatus * SOAP_FMAC2 soap_instantiate___ns1__setIMUStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setIMUStatus * soap_new___ns1__setIMUStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__setIMUStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setIMUStatus * soap_new_req___ns1__setIMUStatus(
	struct soap *soap)
{
	struct __ns1__setIMUStatus *_p = soap_new___ns1__setIMUStatus(soap);
	if (_p)
	{	soap_default___ns1__setIMUStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__setIMUStatus * soap_new_set___ns1__setIMUStatus(
	struct soap *soap,
	_ns1__setIMUStatus *ns1__setIMUStatus)
{
	struct __ns1__setIMUStatus *_p = soap_new___ns1__setIMUStatus(soap);
	if (_p)
	{	soap_default___ns1__setIMUStatus(soap, _p);
		_p->ns1__setIMUStatus = ns1__setIMUStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setIMUStatus(struct soap*, const struct __ns1__setIMUStatus *, const char*, const char*);

inline int soap_write___ns1__setIMUStatus(struct soap *soap, struct __ns1__setIMUStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setIMUStatus(soap, p), 0) || soap_put___ns1__setIMUStatus(soap, p, "-ns1:setIMUStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setIMUStatus * SOAP_FMAC4 soap_get___ns1__setIMUStatus(struct soap*, struct __ns1__setIMUStatus *, const char*, const char*);

inline int soap_read___ns1__setIMUStatus(struct soap *soap, struct __ns1__setIMUStatus *p)
{
	if (p)
	{	soap_default___ns1__setIMUStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setIMUStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__startIMU_DEFINED
#define SOAP_TYPE___ns1__startIMU_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__startIMU(struct soap*, struct __ns1__startIMU *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__startIMU(struct soap*, const struct __ns1__startIMU *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__startIMU(struct soap*, const char*, int, const struct __ns1__startIMU *, const char*);
SOAP_FMAC3 struct __ns1__startIMU * SOAP_FMAC4 soap_in___ns1__startIMU(struct soap*, const char*, struct __ns1__startIMU *, const char*);
SOAP_FMAC1 struct __ns1__startIMU * SOAP_FMAC2 soap_instantiate___ns1__startIMU(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__startIMU * soap_new___ns1__startIMU(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__startIMU(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__startIMU * soap_new_req___ns1__startIMU(
	struct soap *soap)
{
	struct __ns1__startIMU *_p = soap_new___ns1__startIMU(soap);
	if (_p)
	{	soap_default___ns1__startIMU(soap, _p);
	}
	return _p;
}

inline struct __ns1__startIMU * soap_new_set___ns1__startIMU(
	struct soap *soap,
	_ns1__startIMU *ns1__startIMU)
{
	struct __ns1__startIMU *_p = soap_new___ns1__startIMU(soap);
	if (_p)
	{	soap_default___ns1__startIMU(soap, _p);
		_p->ns1__startIMU = ns1__startIMU;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__startIMU(struct soap*, const struct __ns1__startIMU *, const char*, const char*);

inline int soap_write___ns1__startIMU(struct soap *soap, struct __ns1__startIMU const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__startIMU(soap, p), 0) || soap_put___ns1__startIMU(soap, p, "-ns1:startIMU", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__startIMU * SOAP_FMAC4 soap_get___ns1__startIMU(struct soap*, struct __ns1__startIMU *, const char*, const char*);

inline int soap_read___ns1__startIMU(struct soap *soap, struct __ns1__startIMU *p)
{
	if (p)
	{	soap_default___ns1__startIMU(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__startIMU(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__resetFlexors_DEFINED
#define SOAP_TYPE___ns1__resetFlexors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__resetFlexors(struct soap*, struct __ns1__resetFlexors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__resetFlexors(struct soap*, const struct __ns1__resetFlexors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__resetFlexors(struct soap*, const char*, int, const struct __ns1__resetFlexors *, const char*);
SOAP_FMAC3 struct __ns1__resetFlexors * SOAP_FMAC4 soap_in___ns1__resetFlexors(struct soap*, const char*, struct __ns1__resetFlexors *, const char*);
SOAP_FMAC1 struct __ns1__resetFlexors * SOAP_FMAC2 soap_instantiate___ns1__resetFlexors(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__resetFlexors * soap_new___ns1__resetFlexors(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__resetFlexors(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__resetFlexors * soap_new_req___ns1__resetFlexors(
	struct soap *soap)
{
	struct __ns1__resetFlexors *_p = soap_new___ns1__resetFlexors(soap);
	if (_p)
	{	soap_default___ns1__resetFlexors(soap, _p);
	}
	return _p;
}

inline struct __ns1__resetFlexors * soap_new_set___ns1__resetFlexors(
	struct soap *soap,
	_ns1__resetFlexors *ns1__resetFlexors)
{
	struct __ns1__resetFlexors *_p = soap_new___ns1__resetFlexors(soap);
	if (_p)
	{	soap_default___ns1__resetFlexors(soap, _p);
		_p->ns1__resetFlexors = ns1__resetFlexors;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__resetFlexors(struct soap*, const struct __ns1__resetFlexors *, const char*, const char*);

inline int soap_write___ns1__resetFlexors(struct soap *soap, struct __ns1__resetFlexors const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__resetFlexors(soap, p), 0) || soap_put___ns1__resetFlexors(soap, p, "-ns1:resetFlexors", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__resetFlexors * SOAP_FMAC4 soap_get___ns1__resetFlexors(struct soap*, struct __ns1__resetFlexors *, const char*, const char*);

inline int soap_read___ns1__resetFlexors(struct soap *soap, struct __ns1__resetFlexors *p)
{
	if (p)
	{	soap_default___ns1__resetFlexors(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__resetFlexors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setThreshold_DEFINED
#define SOAP_TYPE___ns1__setThreshold_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setThreshold(struct soap*, struct __ns1__setThreshold *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setThreshold(struct soap*, const struct __ns1__setThreshold *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setThreshold(struct soap*, const char*, int, const struct __ns1__setThreshold *, const char*);
SOAP_FMAC3 struct __ns1__setThreshold * SOAP_FMAC4 soap_in___ns1__setThreshold(struct soap*, const char*, struct __ns1__setThreshold *, const char*);
SOAP_FMAC1 struct __ns1__setThreshold * SOAP_FMAC2 soap_instantiate___ns1__setThreshold(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setThreshold * soap_new___ns1__setThreshold(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__setThreshold(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setThreshold * soap_new_req___ns1__setThreshold(
	struct soap *soap)
{
	struct __ns1__setThreshold *_p = soap_new___ns1__setThreshold(soap);
	if (_p)
	{	soap_default___ns1__setThreshold(soap, _p);
	}
	return _p;
}

inline struct __ns1__setThreshold * soap_new_set___ns1__setThreshold(
	struct soap *soap,
	_ns1__setThreshold *ns1__setThreshold)
{
	struct __ns1__setThreshold *_p = soap_new___ns1__setThreshold(soap);
	if (_p)
	{	soap_default___ns1__setThreshold(soap, _p);
		_p->ns1__setThreshold = ns1__setThreshold;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setThreshold(struct soap*, const struct __ns1__setThreshold *, const char*, const char*);

inline int soap_write___ns1__setThreshold(struct soap *soap, struct __ns1__setThreshold const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setThreshold(soap, p), 0) || soap_put___ns1__setThreshold(soap, p, "-ns1:setThreshold", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setThreshold * SOAP_FMAC4 soap_get___ns1__setThreshold(struct soap*, struct __ns1__setThreshold *, const char*, const char*);

inline int soap_read___ns1__setThreshold(struct soap *soap, struct __ns1__setThreshold *p)
{
	if (p)
	{	soap_default___ns1__setThreshold(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setThreshold(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__confirmCalibration_DEFINED
#define SOAP_TYPE___ns1__confirmCalibration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__confirmCalibration(struct soap*, struct __ns1__confirmCalibration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__confirmCalibration(struct soap*, const struct __ns1__confirmCalibration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__confirmCalibration(struct soap*, const char*, int, const struct __ns1__confirmCalibration *, const char*);
SOAP_FMAC3 struct __ns1__confirmCalibration * SOAP_FMAC4 soap_in___ns1__confirmCalibration(struct soap*, const char*, struct __ns1__confirmCalibration *, const char*);
SOAP_FMAC1 struct __ns1__confirmCalibration * SOAP_FMAC2 soap_instantiate___ns1__confirmCalibration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__confirmCalibration * soap_new___ns1__confirmCalibration(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__confirmCalibration(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__confirmCalibration * soap_new_req___ns1__confirmCalibration(
	struct soap *soap)
{
	struct __ns1__confirmCalibration *_p = soap_new___ns1__confirmCalibration(soap);
	if (_p)
	{	soap_default___ns1__confirmCalibration(soap, _p);
	}
	return _p;
}

inline struct __ns1__confirmCalibration * soap_new_set___ns1__confirmCalibration(
	struct soap *soap,
	_ns1__confirmCalibration *ns1__confirmCalibration)
{
	struct __ns1__confirmCalibration *_p = soap_new___ns1__confirmCalibration(soap);
	if (_p)
	{	soap_default___ns1__confirmCalibration(soap, _p);
		_p->ns1__confirmCalibration = ns1__confirmCalibration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__confirmCalibration(struct soap*, const struct __ns1__confirmCalibration *, const char*, const char*);

inline int soap_write___ns1__confirmCalibration(struct soap *soap, struct __ns1__confirmCalibration const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__confirmCalibration(soap, p), 0) || soap_put___ns1__confirmCalibration(soap, p, "-ns1:confirmCalibration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__confirmCalibration * SOAP_FMAC4 soap_get___ns1__confirmCalibration(struct soap*, struct __ns1__confirmCalibration *, const char*, const char*);

inline int soap_read___ns1__confirmCalibration(struct soap *soap, struct __ns1__confirmCalibration *p)
{
	if (p)
	{	soap_default___ns1__confirmCalibration(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__confirmCalibration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__calibrateFlexors_DEFINED
#define SOAP_TYPE___ns1__calibrateFlexors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__calibrateFlexors(struct soap*, struct __ns1__calibrateFlexors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__calibrateFlexors(struct soap*, const struct __ns1__calibrateFlexors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__calibrateFlexors(struct soap*, const char*, int, const struct __ns1__calibrateFlexors *, const char*);
SOAP_FMAC3 struct __ns1__calibrateFlexors * SOAP_FMAC4 soap_in___ns1__calibrateFlexors(struct soap*, const char*, struct __ns1__calibrateFlexors *, const char*);
SOAP_FMAC1 struct __ns1__calibrateFlexors * SOAP_FMAC2 soap_instantiate___ns1__calibrateFlexors(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__calibrateFlexors * soap_new___ns1__calibrateFlexors(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__calibrateFlexors(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__calibrateFlexors * soap_new_req___ns1__calibrateFlexors(
	struct soap *soap)
{
	struct __ns1__calibrateFlexors *_p = soap_new___ns1__calibrateFlexors(soap);
	if (_p)
	{	soap_default___ns1__calibrateFlexors(soap, _p);
	}
	return _p;
}

inline struct __ns1__calibrateFlexors * soap_new_set___ns1__calibrateFlexors(
	struct soap *soap,
	_ns1__calibrateFlexors *ns1__calibrateFlexors)
{
	struct __ns1__calibrateFlexors *_p = soap_new___ns1__calibrateFlexors(soap);
	if (_p)
	{	soap_default___ns1__calibrateFlexors(soap, _p);
		_p->ns1__calibrateFlexors = ns1__calibrateFlexors;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__calibrateFlexors(struct soap*, const struct __ns1__calibrateFlexors *, const char*, const char*);

inline int soap_write___ns1__calibrateFlexors(struct soap *soap, struct __ns1__calibrateFlexors const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__calibrateFlexors(soap, p), 0) || soap_put___ns1__calibrateFlexors(soap, p, "-ns1:calibrateFlexors", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__calibrateFlexors * SOAP_FMAC4 soap_get___ns1__calibrateFlexors(struct soap*, struct __ns1__calibrateFlexors *, const char*, const char*);

inline int soap_read___ns1__calibrateFlexors(struct soap *soap, struct __ns1__calibrateFlexors *p)
{
	if (p)
	{	soap_default___ns1__calibrateFlexors(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__calibrateFlexors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeFlexor_DEFINED
#define SOAP_TYPE___ns1__removeFlexor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeFlexor(struct soap*, struct __ns1__removeFlexor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeFlexor(struct soap*, const struct __ns1__removeFlexor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeFlexor(struct soap*, const char*, int, const struct __ns1__removeFlexor *, const char*);
SOAP_FMAC3 struct __ns1__removeFlexor * SOAP_FMAC4 soap_in___ns1__removeFlexor(struct soap*, const char*, struct __ns1__removeFlexor *, const char*);
SOAP_FMAC1 struct __ns1__removeFlexor * SOAP_FMAC2 soap_instantiate___ns1__removeFlexor(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeFlexor * soap_new___ns1__removeFlexor(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__removeFlexor(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeFlexor * soap_new_req___ns1__removeFlexor(
	struct soap *soap)
{
	struct __ns1__removeFlexor *_p = soap_new___ns1__removeFlexor(soap);
	if (_p)
	{	soap_default___ns1__removeFlexor(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeFlexor * soap_new_set___ns1__removeFlexor(
	struct soap *soap,
	_ns1__removeFlexor *ns1__removeFlexor)
{
	struct __ns1__removeFlexor *_p = soap_new___ns1__removeFlexor(soap);
	if (_p)
	{	soap_default___ns1__removeFlexor(soap, _p);
		_p->ns1__removeFlexor = ns1__removeFlexor;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeFlexor(struct soap*, const struct __ns1__removeFlexor *, const char*, const char*);

inline int soap_write___ns1__removeFlexor(struct soap *soap, struct __ns1__removeFlexor const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeFlexor(soap, p), 0) || soap_put___ns1__removeFlexor(soap, p, "-ns1:removeFlexor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeFlexor * SOAP_FMAC4 soap_get___ns1__removeFlexor(struct soap*, struct __ns1__removeFlexor *, const char*, const char*);

inline int soap_read___ns1__removeFlexor(struct soap *soap, struct __ns1__removeFlexor *p)
{
	if (p)
	{	soap_default___ns1__removeFlexor(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeFlexor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__addFlexor_DEFINED
#define SOAP_TYPE___ns1__addFlexor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addFlexor(struct soap*, struct __ns1__addFlexor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addFlexor(struct soap*, const struct __ns1__addFlexor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addFlexor(struct soap*, const char*, int, const struct __ns1__addFlexor *, const char*);
SOAP_FMAC3 struct __ns1__addFlexor * SOAP_FMAC4 soap_in___ns1__addFlexor(struct soap*, const char*, struct __ns1__addFlexor *, const char*);
SOAP_FMAC1 struct __ns1__addFlexor * SOAP_FMAC2 soap_instantiate___ns1__addFlexor(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__addFlexor * soap_new___ns1__addFlexor(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__addFlexor(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__addFlexor * soap_new_req___ns1__addFlexor(
	struct soap *soap)
{
	struct __ns1__addFlexor *_p = soap_new___ns1__addFlexor(soap);
	if (_p)
	{	soap_default___ns1__addFlexor(soap, _p);
	}
	return _p;
}

inline struct __ns1__addFlexor * soap_new_set___ns1__addFlexor(
	struct soap *soap,
	_ns1__addFlexor *ns1__addFlexor)
{
	struct __ns1__addFlexor *_p = soap_new___ns1__addFlexor(soap);
	if (_p)
	{	soap_default___ns1__addFlexor(soap, _p);
		_p->ns1__addFlexor = ns1__addFlexor;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addFlexor(struct soap*, const struct __ns1__addFlexor *, const char*, const char*);

inline int soap_write___ns1__addFlexor(struct soap *soap, struct __ns1__addFlexor const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__addFlexor(soap, p), 0) || soap_put___ns1__addFlexor(soap, p, "-ns1:addFlexor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__addFlexor * SOAP_FMAC4 soap_get___ns1__addFlexor(struct soap*, struct __ns1__addFlexor *, const char*, const char*);

inline int soap_read___ns1__addFlexor(struct soap *soap, struct __ns1__addFlexor *p)
{
	if (p)
	{	soap_default___ns1__addFlexor(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__addFlexor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ActivateMany_DEFINED
#define SOAP_TYPE___ns1__ActivateMany_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ActivateMany(struct soap*, struct __ns1__ActivateMany *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ActivateMany(struct soap*, const struct __ns1__ActivateMany *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ActivateMany(struct soap*, const char*, int, const struct __ns1__ActivateMany *, const char*);
SOAP_FMAC3 struct __ns1__ActivateMany * SOAP_FMAC4 soap_in___ns1__ActivateMany(struct soap*, const char*, struct __ns1__ActivateMany *, const char*);
SOAP_FMAC1 struct __ns1__ActivateMany * SOAP_FMAC2 soap_instantiate___ns1__ActivateMany(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ActivateMany * soap_new___ns1__ActivateMany(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ActivateMany(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ActivateMany * soap_new_req___ns1__ActivateMany(
	struct soap *soap)
{
	struct __ns1__ActivateMany *_p = soap_new___ns1__ActivateMany(soap);
	if (_p)
	{	soap_default___ns1__ActivateMany(soap, _p);
	}
	return _p;
}

inline struct __ns1__ActivateMany * soap_new_set___ns1__ActivateMany(
	struct soap *soap,
	_ns1__ActivateMany *ns1__ActivateMany)
{
	struct __ns1__ActivateMany *_p = soap_new___ns1__ActivateMany(soap);
	if (_p)
	{	soap_default___ns1__ActivateMany(soap, _p);
		_p->ns1__ActivateMany = ns1__ActivateMany;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ActivateMany(struct soap*, const struct __ns1__ActivateMany *, const char*, const char*);

inline int soap_write___ns1__ActivateMany(struct soap *soap, struct __ns1__ActivateMany const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__ActivateMany(soap, p), 0) || soap_put___ns1__ActivateMany(soap, p, "-ns1:ActivateMany", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ActivateMany * SOAP_FMAC4 soap_get___ns1__ActivateMany(struct soap*, struct __ns1__ActivateMany *, const char*, const char*);

inline int soap_read___ns1__ActivateMany(struct soap *soap, struct __ns1__ActivateMany *p)
{
	if (p)
	{	soap_default___ns1__ActivateMany(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ActivateMany(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Disconnect_DEFINED
#define SOAP_TYPE___ns1__Disconnect_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Disconnect(struct soap*, struct __ns1__Disconnect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Disconnect(struct soap*, const struct __ns1__Disconnect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Disconnect(struct soap*, const char*, int, const struct __ns1__Disconnect *, const char*);
SOAP_FMAC3 struct __ns1__Disconnect * SOAP_FMAC4 soap_in___ns1__Disconnect(struct soap*, const char*, struct __ns1__Disconnect *, const char*);
SOAP_FMAC1 struct __ns1__Disconnect * SOAP_FMAC2 soap_instantiate___ns1__Disconnect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Disconnect * soap_new___ns1__Disconnect(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Disconnect(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Disconnect * soap_new_req___ns1__Disconnect(
	struct soap *soap)
{
	struct __ns1__Disconnect *_p = soap_new___ns1__Disconnect(soap);
	if (_p)
	{	soap_default___ns1__Disconnect(soap, _p);
	}
	return _p;
}

inline struct __ns1__Disconnect * soap_new_set___ns1__Disconnect(
	struct soap *soap,
	_ns1__Disconnect *ns1__Disconnect)
{
	struct __ns1__Disconnect *_p = soap_new___ns1__Disconnect(soap);
	if (_p)
	{	soap_default___ns1__Disconnect(soap, _p);
		_p->ns1__Disconnect = ns1__Disconnect;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Disconnect(struct soap*, const struct __ns1__Disconnect *, const char*, const char*);

inline int soap_write___ns1__Disconnect(struct soap *soap, struct __ns1__Disconnect const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__Disconnect(soap, p), 0) || soap_put___ns1__Disconnect(soap, p, "-ns1:Disconnect", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Disconnect * SOAP_FMAC4 soap_get___ns1__Disconnect(struct soap*, struct __ns1__Disconnect *, const char*, const char*);

inline int soap_read___ns1__Disconnect(struct soap *soap, struct __ns1__Disconnect *p)
{
	if (p)
	{	soap_default___ns1__Disconnect(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Disconnect(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Connect_DEFINED
#define SOAP_TYPE___ns1__Connect_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Connect(struct soap*, struct __ns1__Connect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Connect(struct soap*, const struct __ns1__Connect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Connect(struct soap*, const char*, int, const struct __ns1__Connect *, const char*);
SOAP_FMAC3 struct __ns1__Connect * SOAP_FMAC4 soap_in___ns1__Connect(struct soap*, const char*, struct __ns1__Connect *, const char*);
SOAP_FMAC1 struct __ns1__Connect * SOAP_FMAC2 soap_instantiate___ns1__Connect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Connect * soap_new___ns1__Connect(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Connect(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Connect * soap_new_req___ns1__Connect(
	struct soap *soap)
{
	struct __ns1__Connect *_p = soap_new___ns1__Connect(soap);
	if (_p)
	{	soap_default___ns1__Connect(soap, _p);
	}
	return _p;
}

inline struct __ns1__Connect * soap_new_set___ns1__Connect(
	struct soap *soap,
	_ns1__Connect *ns1__Connect)
{
	struct __ns1__Connect *_p = soap_new___ns1__Connect(soap);
	if (_p)
	{	soap_default___ns1__Connect(soap, _p);
		_p->ns1__Connect = ns1__Connect;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Connect(struct soap*, const struct __ns1__Connect *, const char*, const char*);

inline int soap_write___ns1__Connect(struct soap *soap, struct __ns1__Connect const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__Connect(soap, p), 0) || soap_put___ns1__Connect(soap, p, "-ns1:Connect", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Connect * SOAP_FMAC4 soap_get___ns1__Connect(struct soap*, struct __ns1__Connect *, const char*, const char*);

inline int soap_read___ns1__Connect(struct soap *soap, struct __ns1__Connect *p)
{
	if (p)
	{	soap_default___ns1__Connect(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Connect(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Activate_DEFINED
#define SOAP_TYPE___ns1__Activate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Activate(struct soap*, struct __ns1__Activate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Activate(struct soap*, const struct __ns1__Activate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Activate(struct soap*, const char*, int, const struct __ns1__Activate *, const char*);
SOAP_FMAC3 struct __ns1__Activate * SOAP_FMAC4 soap_in___ns1__Activate(struct soap*, const char*, struct __ns1__Activate *, const char*);
SOAP_FMAC1 struct __ns1__Activate * SOAP_FMAC2 soap_instantiate___ns1__Activate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Activate * soap_new___ns1__Activate(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Activate(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Activate * soap_new_req___ns1__Activate(
	struct soap *soap)
{
	struct __ns1__Activate *_p = soap_new___ns1__Activate(soap);
	if (_p)
	{	soap_default___ns1__Activate(soap, _p);
	}
	return _p;
}

inline struct __ns1__Activate * soap_new_set___ns1__Activate(
	struct soap *soap,
	_ns1__Activate *ns1__Activate)
{
	struct __ns1__Activate *_p = soap_new___ns1__Activate(soap);
	if (_p)
	{	soap_default___ns1__Activate(soap, _p);
		_p->ns1__Activate = ns1__Activate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Activate(struct soap*, const struct __ns1__Activate *, const char*, const char*);

inline int soap_write___ns1__Activate(struct soap *soap, struct __ns1__Activate const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__Activate(soap, p), 0) || soap_put___ns1__Activate(soap, p, "-ns1:Activate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Activate * SOAP_FMAC4 soap_get___ns1__Activate(struct soap*, struct __ns1__Activate *, const char*, const char*);

inline int soap_read___ns1__Activate(struct soap *soap, struct __ns1__Activate *p)
{
	if (p)
	{	soap_default___ns1__Activate(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Activate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SaveGlove_DEFINED
#define SOAP_TYPE___ns1__SaveGlove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveGlove(struct soap*, struct __ns1__SaveGlove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveGlove(struct soap*, const struct __ns1__SaveGlove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveGlove(struct soap*, const char*, int, const struct __ns1__SaveGlove *, const char*);
SOAP_FMAC3 struct __ns1__SaveGlove * SOAP_FMAC4 soap_in___ns1__SaveGlove(struct soap*, const char*, struct __ns1__SaveGlove *, const char*);
SOAP_FMAC1 struct __ns1__SaveGlove * SOAP_FMAC2 soap_instantiate___ns1__SaveGlove(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SaveGlove * soap_new___ns1__SaveGlove(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SaveGlove(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SaveGlove * soap_new_req___ns1__SaveGlove(
	struct soap *soap)
{
	struct __ns1__SaveGlove *_p = soap_new___ns1__SaveGlove(soap);
	if (_p)
	{	soap_default___ns1__SaveGlove(soap, _p);
	}
	return _p;
}

inline struct __ns1__SaveGlove * soap_new_set___ns1__SaveGlove(
	struct soap *soap,
	_ns1__SaveGlove *ns1__SaveGlove)
{
	struct __ns1__SaveGlove *_p = soap_new___ns1__SaveGlove(soap);
	if (_p)
	{	soap_default___ns1__SaveGlove(soap, _p);
		_p->ns1__SaveGlove = ns1__SaveGlove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveGlove(struct soap*, const struct __ns1__SaveGlove *, const char*, const char*);

inline int soap_write___ns1__SaveGlove(struct soap *soap, struct __ns1__SaveGlove const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SaveGlove(soap, p), 0) || soap_put___ns1__SaveGlove(soap, p, "-ns1:SaveGlove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SaveGlove * SOAP_FMAC4 soap_get___ns1__SaveGlove(struct soap*, struct __ns1__SaveGlove *, const char*, const char*);

inline int soap_read___ns1__SaveGlove(struct soap *soap, struct __ns1__SaveGlove *p)
{
	if (p)
	{	soap_default___ns1__SaveGlove(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SaveGlove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RefreshGloves_DEFINED
#define SOAP_TYPE___ns1__RefreshGloves_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RefreshGloves(struct soap*, struct __ns1__RefreshGloves *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RefreshGloves(struct soap*, const struct __ns1__RefreshGloves *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RefreshGloves(struct soap*, const char*, int, const struct __ns1__RefreshGloves *, const char*);
SOAP_FMAC3 struct __ns1__RefreshGloves * SOAP_FMAC4 soap_in___ns1__RefreshGloves(struct soap*, const char*, struct __ns1__RefreshGloves *, const char*);
SOAP_FMAC1 struct __ns1__RefreshGloves * SOAP_FMAC2 soap_instantiate___ns1__RefreshGloves(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RefreshGloves * soap_new___ns1__RefreshGloves(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RefreshGloves(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RefreshGloves * soap_new_req___ns1__RefreshGloves(
	struct soap *soap)
{
	struct __ns1__RefreshGloves *_p = soap_new___ns1__RefreshGloves(soap);
	if (_p)
	{	soap_default___ns1__RefreshGloves(soap, _p);
	}
	return _p;
}

inline struct __ns1__RefreshGloves * soap_new_set___ns1__RefreshGloves(
	struct soap *soap,
	_ns1__RefreshGloves *ns1__RefreshGloves)
{
	struct __ns1__RefreshGloves *_p = soap_new___ns1__RefreshGloves(soap);
	if (_p)
	{	soap_default___ns1__RefreshGloves(soap, _p);
		_p->ns1__RefreshGloves = ns1__RefreshGloves;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RefreshGloves(struct soap*, const struct __ns1__RefreshGloves *, const char*, const char*);

inline int soap_write___ns1__RefreshGloves(struct soap *soap, struct __ns1__RefreshGloves const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__RefreshGloves(soap, p), 0) || soap_put___ns1__RefreshGloves(soap, p, "-ns1:RefreshGloves", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RefreshGloves * SOAP_FMAC4 soap_get___ns1__RefreshGloves(struct soap*, struct __ns1__RefreshGloves *, const char*, const char*);

inline int soap_read___ns1__RefreshGloves(struct soap *soap, struct __ns1__RefreshGloves *p)
{
	if (p)
	{	soap_default___ns1__RefreshGloves(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RefreshGloves(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetGloves_DEFINED
#define SOAP_TYPE___ns1__GetGloves_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGloves(struct soap*, struct __ns1__GetGloves *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGloves(struct soap*, const struct __ns1__GetGloves *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGloves(struct soap*, const char*, int, const struct __ns1__GetGloves *, const char*);
SOAP_FMAC3 struct __ns1__GetGloves * SOAP_FMAC4 soap_in___ns1__GetGloves(struct soap*, const char*, struct __ns1__GetGloves *, const char*);
SOAP_FMAC1 struct __ns1__GetGloves * SOAP_FMAC2 soap_instantiate___ns1__GetGloves(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetGloves * soap_new___ns1__GetGloves(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetGloves(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetGloves * soap_new_req___ns1__GetGloves(
	struct soap *soap)
{
	struct __ns1__GetGloves *_p = soap_new___ns1__GetGloves(soap);
	if (_p)
	{	soap_default___ns1__GetGloves(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetGloves * soap_new_set___ns1__GetGloves(
	struct soap *soap,
	_ns1__GetGloves *ns1__GetGloves)
{
	struct __ns1__GetGloves *_p = soap_new___ns1__GetGloves(soap);
	if (_p)
	{	soap_default___ns1__GetGloves(soap, _p);
		_p->ns1__GetGloves = ns1__GetGloves;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGloves(struct soap*, const struct __ns1__GetGloves *, const char*, const char*);

inline int soap_write___ns1__GetGloves(struct soap *soap, struct __ns1__GetGloves const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__GetGloves(soap, p), 0) || soap_put___ns1__GetGloves(soap, p, "-ns1:GetGloves", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetGloves * SOAP_FMAC4 soap_get___ns1__GetGloves(struct soap*, struct __ns1__GetGloves *, const char*, const char*);

inline int soap_read___ns1__GetGloves(struct soap *soap, struct __ns1__GetGloves *p)
{
	if (p)
	{	soap_default___ns1__GetGloves(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetGloves(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__setRawData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__setRawData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setRawData(struct soap*, _ns1__setRawData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setRawData(struct soap*, const char *, int, _ns1__setRawData *const*, const char *);
SOAP_FMAC3 _ns1__setRawData ** SOAP_FMAC4 soap_in_PointerTo_ns1__setRawData(struct soap*, const char*, _ns1__setRawData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setRawData(struct soap*, _ns1__setRawData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__setRawData ** SOAP_FMAC4 soap_get_PointerTo_ns1__setRawData(struct soap*, _ns1__setRawData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__setIMUStatus_DEFINED
#define SOAP_TYPE_PointerTo_ns1__setIMUStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setIMUStatus(struct soap*, _ns1__setIMUStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setIMUStatus(struct soap*, const char *, int, _ns1__setIMUStatus *const*, const char *);
SOAP_FMAC3 _ns1__setIMUStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__setIMUStatus(struct soap*, const char*, _ns1__setIMUStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setIMUStatus(struct soap*, _ns1__setIMUStatus *const*, const char*, const char*);
SOAP_FMAC3 _ns1__setIMUStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__setIMUStatus(struct soap*, _ns1__setIMUStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__startIMU_DEFINED
#define SOAP_TYPE_PointerTo_ns1__startIMU_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__startIMU(struct soap*, _ns1__startIMU *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__startIMU(struct soap*, const char *, int, _ns1__startIMU *const*, const char *);
SOAP_FMAC3 _ns1__startIMU ** SOAP_FMAC4 soap_in_PointerTo_ns1__startIMU(struct soap*, const char*, _ns1__startIMU **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__startIMU(struct soap*, _ns1__startIMU *const*, const char*, const char*);
SOAP_FMAC3 _ns1__startIMU ** SOAP_FMAC4 soap_get_PointerTo_ns1__startIMU(struct soap*, _ns1__startIMU **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__resetFlexors_DEFINED
#define SOAP_TYPE_PointerTo_ns1__resetFlexors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__resetFlexors(struct soap*, _ns1__resetFlexors *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__resetFlexors(struct soap*, const char *, int, _ns1__resetFlexors *const*, const char *);
SOAP_FMAC3 _ns1__resetFlexors ** SOAP_FMAC4 soap_in_PointerTo_ns1__resetFlexors(struct soap*, const char*, _ns1__resetFlexors **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__resetFlexors(struct soap*, _ns1__resetFlexors *const*, const char*, const char*);
SOAP_FMAC3 _ns1__resetFlexors ** SOAP_FMAC4 soap_get_PointerTo_ns1__resetFlexors(struct soap*, _ns1__resetFlexors **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__setThreshold_DEFINED
#define SOAP_TYPE_PointerTo_ns1__setThreshold_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setThreshold(struct soap*, _ns1__setThreshold *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setThreshold(struct soap*, const char *, int, _ns1__setThreshold *const*, const char *);
SOAP_FMAC3 _ns1__setThreshold ** SOAP_FMAC4 soap_in_PointerTo_ns1__setThreshold(struct soap*, const char*, _ns1__setThreshold **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setThreshold(struct soap*, _ns1__setThreshold *const*, const char*, const char*);
SOAP_FMAC3 _ns1__setThreshold ** SOAP_FMAC4 soap_get_PointerTo_ns1__setThreshold(struct soap*, _ns1__setThreshold **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__confirmCalibration_DEFINED
#define SOAP_TYPE_PointerTo_ns1__confirmCalibration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__confirmCalibration(struct soap*, _ns1__confirmCalibration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__confirmCalibration(struct soap*, const char *, int, _ns1__confirmCalibration *const*, const char *);
SOAP_FMAC3 _ns1__confirmCalibration ** SOAP_FMAC4 soap_in_PointerTo_ns1__confirmCalibration(struct soap*, const char*, _ns1__confirmCalibration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__confirmCalibration(struct soap*, _ns1__confirmCalibration *const*, const char*, const char*);
SOAP_FMAC3 _ns1__confirmCalibration ** SOAP_FMAC4 soap_get_PointerTo_ns1__confirmCalibration(struct soap*, _ns1__confirmCalibration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__calibrateFlexors_DEFINED
#define SOAP_TYPE_PointerTo_ns1__calibrateFlexors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__calibrateFlexors(struct soap*, _ns1__calibrateFlexors *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__calibrateFlexors(struct soap*, const char *, int, _ns1__calibrateFlexors *const*, const char *);
SOAP_FMAC3 _ns1__calibrateFlexors ** SOAP_FMAC4 soap_in_PointerTo_ns1__calibrateFlexors(struct soap*, const char*, _ns1__calibrateFlexors **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__calibrateFlexors(struct soap*, _ns1__calibrateFlexors *const*, const char*, const char*);
SOAP_FMAC3 _ns1__calibrateFlexors ** SOAP_FMAC4 soap_get_PointerTo_ns1__calibrateFlexors(struct soap*, _ns1__calibrateFlexors **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__removeFlexor_DEFINED
#define SOAP_TYPE_PointerTo_ns1__removeFlexor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__removeFlexor(struct soap*, _ns1__removeFlexor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__removeFlexor(struct soap*, const char *, int, _ns1__removeFlexor *const*, const char *);
SOAP_FMAC3 _ns1__removeFlexor ** SOAP_FMAC4 soap_in_PointerTo_ns1__removeFlexor(struct soap*, const char*, _ns1__removeFlexor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__removeFlexor(struct soap*, _ns1__removeFlexor *const*, const char*, const char*);
SOAP_FMAC3 _ns1__removeFlexor ** SOAP_FMAC4 soap_get_PointerTo_ns1__removeFlexor(struct soap*, _ns1__removeFlexor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__addFlexor_DEFINED
#define SOAP_TYPE_PointerTo_ns1__addFlexor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__addFlexor(struct soap*, _ns1__addFlexor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__addFlexor(struct soap*, const char *, int, _ns1__addFlexor *const*, const char *);
SOAP_FMAC3 _ns1__addFlexor ** SOAP_FMAC4 soap_in_PointerTo_ns1__addFlexor(struct soap*, const char*, _ns1__addFlexor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__addFlexor(struct soap*, _ns1__addFlexor *const*, const char*, const char*);
SOAP_FMAC3 _ns1__addFlexor ** SOAP_FMAC4 soap_get_PointerTo_ns1__addFlexor(struct soap*, _ns1__addFlexor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ActivateMany_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ActivateMany_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ActivateMany(struct soap*, _ns1__ActivateMany *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ActivateMany(struct soap*, const char *, int, _ns1__ActivateMany *const*, const char *);
SOAP_FMAC3 _ns1__ActivateMany ** SOAP_FMAC4 soap_in_PointerTo_ns1__ActivateMany(struct soap*, const char*, _ns1__ActivateMany **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ActivateMany(struct soap*, _ns1__ActivateMany *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ActivateMany ** SOAP_FMAC4 soap_get_PointerTo_ns1__ActivateMany(struct soap*, _ns1__ActivateMany **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Disconnect_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Disconnect_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Disconnect(struct soap*, _ns1__Disconnect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Disconnect(struct soap*, const char *, int, _ns1__Disconnect *const*, const char *);
SOAP_FMAC3 _ns1__Disconnect ** SOAP_FMAC4 soap_in_PointerTo_ns1__Disconnect(struct soap*, const char*, _ns1__Disconnect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Disconnect(struct soap*, _ns1__Disconnect *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Disconnect ** SOAP_FMAC4 soap_get_PointerTo_ns1__Disconnect(struct soap*, _ns1__Disconnect **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Connect_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Connect_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Connect(struct soap*, _ns1__Connect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Connect(struct soap*, const char *, int, _ns1__Connect *const*, const char *);
SOAP_FMAC3 _ns1__Connect ** SOAP_FMAC4 soap_in_PointerTo_ns1__Connect(struct soap*, const char*, _ns1__Connect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Connect(struct soap*, _ns1__Connect *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Connect ** SOAP_FMAC4 soap_get_PointerTo_ns1__Connect(struct soap*, _ns1__Connect **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Activate_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Activate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Activate(struct soap*, _ns1__Activate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Activate(struct soap*, const char *, int, _ns1__Activate *const*, const char *);
SOAP_FMAC3 _ns1__Activate ** SOAP_FMAC4 soap_in_PointerTo_ns1__Activate(struct soap*, const char*, _ns1__Activate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Activate(struct soap*, _ns1__Activate *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Activate ** SOAP_FMAC4 soap_get_PointerTo_ns1__Activate(struct soap*, _ns1__Activate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SaveGlove_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SaveGlove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SaveGlove(struct soap*, _ns1__SaveGlove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SaveGlove(struct soap*, const char *, int, _ns1__SaveGlove *const*, const char *);
SOAP_FMAC3 _ns1__SaveGlove ** SOAP_FMAC4 soap_in_PointerTo_ns1__SaveGlove(struct soap*, const char*, _ns1__SaveGlove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SaveGlove(struct soap*, _ns1__SaveGlove *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SaveGlove ** SOAP_FMAC4 soap_get_PointerTo_ns1__SaveGlove(struct soap*, _ns1__SaveGlove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RefreshGloves_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RefreshGloves_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RefreshGloves(struct soap*, _ns1__RefreshGloves *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RefreshGloves(struct soap*, const char *, int, _ns1__RefreshGloves *const*, const char *);
SOAP_FMAC3 _ns1__RefreshGloves ** SOAP_FMAC4 soap_in_PointerTo_ns1__RefreshGloves(struct soap*, const char*, _ns1__RefreshGloves **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RefreshGloves(struct soap*, _ns1__RefreshGloves *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RefreshGloves ** SOAP_FMAC4 soap_get_PointerTo_ns1__RefreshGloves(struct soap*, _ns1__RefreshGloves **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetGloves_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetGloves_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGloves(struct soap*, _ns1__GetGloves *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGloves(struct soap*, const char *, int, _ns1__GetGloves *const*, const char *);
SOAP_FMAC3 _ns1__GetGloves ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGloves(struct soap*, const char*, _ns1__GetGloves **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGloves(struct soap*, _ns1__GetGloves *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetGloves ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGloves(struct soap*, _ns1__GetGloves **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char *, int, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *const*, const char *);
SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const char *, int, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *const*, const char *);
SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const char*, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfstringstring_DEFINED
#define SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfstringstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap*, ns5__ArrayOfKeyValueOfstringstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap*, const char *, int, ns5__ArrayOfKeyValueOfstringstring *const*, const char *);
SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap*, const char*, ns5__ArrayOfKeyValueOfstringstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap*, ns5__ArrayOfKeyValueOfstringstring *const*, const char*, const char*);
SOAP_FMAC3 ns5__ArrayOfKeyValueOfstringstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfKeyValueOfstringstring(struct soap*, ns5__ArrayOfKeyValueOfstringstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfintint_DEFINED
#define SOAP_TYPE_PointerTons5__ArrayOfKeyValueOfintint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfKeyValueOfintint(struct soap*, ns5__ArrayOfKeyValueOfintint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfKeyValueOfintint(struct soap*, const char *, int, ns5__ArrayOfKeyValueOfintint *const*, const char *);
SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfKeyValueOfintint(struct soap*, const char*, ns5__ArrayOfKeyValueOfintint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfKeyValueOfintint(struct soap*, ns5__ArrayOfKeyValueOfintint *const*, const char*, const char*);
SOAP_FMAC3 ns5__ArrayOfKeyValueOfintint ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfKeyValueOfintint(struct soap*, ns5__ArrayOfKeyValueOfintint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_x002eProfile_DEFINED
#define SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_x002eProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap*, ns4__Glove_x002eConfiguration_x002eProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap*, const char *, int, ns4__Glove_x002eConfiguration_x002eProfile *const*, const char *);
SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile ** SOAP_FMAC4 soap_in_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap*, const char*, ns4__Glove_x002eConfiguration_x002eProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap*, ns4__Glove_x002eConfiguration_x002eProfile *const*, const char*, const char*);
SOAP_FMAC3 ns4__Glove_x002eConfiguration_x002eProfile ** SOAP_FMAC4 soap_get_PointerTons4__Glove_x002eConfiguration_x002eProfile(struct soap*, ns4__Glove_x002eConfiguration_x002eProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ArrayOfstring_DEFINED
#define SOAP_TYPE_PointerTons5__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfstring(struct soap*, ns5__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfstring(struct soap*, const char *, int, ns5__ArrayOfstring *const*, const char *);
SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfstring(struct soap*, const char*, ns5__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfstring(struct soap*, ns5__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfstring(struct soap*, ns5__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Side_DEFINED
#define SOAP_TYPE_PointerTons4__Side_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Side(struct soap*, enum ns4__Side *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Side(struct soap*, const char *, int, enum ns4__Side *const*, const char *);
SOAP_FMAC3 enum ns4__Side ** SOAP_FMAC4 soap_in_PointerTons4__Side(struct soap*, const char*, enum ns4__Side **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Side(struct soap*, enum ns4__Side *const*, const char*, const char*);
SOAP_FMAC3 enum ns4__Side ** SOAP_FMAC4 soap_get_PointerTons4__Side(struct soap*, enum ns4__Side **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_DEFINED
#define SOAP_TYPE_PointerTons4__Glove_x002eConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Glove_x002eConfiguration(struct soap*, ns4__Glove_x002eConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Glove_x002eConfiguration(struct soap*, const char *, int, ns4__Glove_x002eConfiguration *const*, const char *);
SOAP_FMAC3 ns4__Glove_x002eConfiguration ** SOAP_FMAC4 soap_in_PointerTons4__Glove_x002eConfiguration(struct soap*, const char*, ns4__Glove_x002eConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Glove_x002eConfiguration(struct soap*, ns4__Glove_x002eConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns4__Glove_x002eConfiguration ** SOAP_FMAC4 soap_get_PointerTons4__Glove_x002eConfiguration(struct soap*, ns4__Glove_x002eConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ArrayOfint_DEFINED
#define SOAP_TYPE_PointerTons5__ArrayOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfint(struct soap*, ns5__ArrayOfint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfint(struct soap*, const char *, int, ns5__ArrayOfint *const*, const char *);
SOAP_FMAC3 ns5__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfint(struct soap*, const char*, ns5__ArrayOfint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfint(struct soap*, ns5__ArrayOfint *const*, const char*, const char*);
SOAP_FMAC3 ns5__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfint(struct soap*, ns5__ArrayOfint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Glove_DEFINED
#define SOAP_TYPE_PointerTons4__Glove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Glove(struct soap*, ns4__Glove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Glove(struct soap*, const char *, int, ns4__Glove *const*, const char *);
SOAP_FMAC3 ns4__Glove ** SOAP_FMAC4 soap_in_PointerTons4__Glove(struct soap*, const char*, ns4__Glove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Glove(struct soap*, ns4__Glove *const*, const char*, const char*);
SOAP_FMAC3 ns4__Glove ** SOAP_FMAC4 soap_get_PointerTons4__Glove(struct soap*, ns4__Glove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfGlove_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfGlove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfGlove(struct soap*, ns4__ArrayOfGlove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfGlove(struct soap*, const char *, int, ns4__ArrayOfGlove *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfGlove ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfGlove(struct soap*, const char*, ns4__ArrayOfGlove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfGlove(struct soap*, ns4__ArrayOfGlove *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfGlove ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfGlove(struct soap*, ns4__ArrayOfGlove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, int, const std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *, const char*);
SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring> *, const char*);
SOAP_FMAC1 std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring>  * soap_new_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const char*, int, const std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *, const char*);
SOAP_FMAC3 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, const char*, std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint> *, const char*);
SOAP_FMAC1 std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint>  * soap_new_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns5__ArrayOfKeyValueOfintint_KeyValueOfintint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Glove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Glove(struct soap*, std::vector<ns4__Glove *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Glove(struct soap*, const std::vector<ns4__Glove *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Glove(struct soap*, const char*, int, const std::vector<ns4__Glove *> *, const char*);
SOAP_FMAC3 std::vector<ns4__Glove *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Glove(struct soap*, const char*, std::vector<ns4__Glove *> *, const char*);
SOAP_FMAC1 std::vector<ns4__Glove *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Glove(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Glove *>  * soap_new_std__vectorTemplateOfPointerTons4__Glove(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__Glove(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
